
usartttdeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800be98  0800be98  0001be98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa0  0800bfa0  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfa0  0800bfa0  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfa0  0800bfa0  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfa4  0800bfa4  0001bfa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800bfa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000260  0800c208  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001784  0800c208  00021784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beb0  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a02  00000000  00000000  0003c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  00040fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6fc  00000000  00000000  000422a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001912f  00000000  00000000  0005c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009285f  00000000  00000000  00075acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010832a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  00108380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be7c 	.word	0x0800be7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800be7c 	.word	0x0800be7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__gesf2>:
 8000ac8:	f04f 3cff 	mov.w	ip, #4294967295
 8000acc:	e006      	b.n	8000adc <__cmpsf2+0x4>
 8000ace:	bf00      	nop

08000ad0 <__lesf2>:
 8000ad0:	f04f 0c01 	mov.w	ip, #1
 8000ad4:	e002      	b.n	8000adc <__cmpsf2+0x4>
 8000ad6:	bf00      	nop

08000ad8 <__cmpsf2>:
 8000ad8:	f04f 0c01 	mov.w	ip, #1
 8000adc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d011      	beq.n	8000b18 <__cmpsf2+0x40>
 8000af4:	b001      	add	sp, #4
 8000af6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000afa:	bf18      	it	ne
 8000afc:	ea90 0f01 	teqne	r0, r1
 8000b00:	bf58      	it	pl
 8000b02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b06:	bf88      	it	hi
 8000b08:	17c8      	asrhi	r0, r1, #31
 8000b0a:	bf38      	it	cc
 8000b0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b10:	bf18      	it	ne
 8000b12:	f040 0001 	orrne.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	d102      	bne.n	8000b24 <__cmpsf2+0x4c>
 8000b1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b22:	d105      	bne.n	8000b30 <__cmpsf2+0x58>
 8000b24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b28:	d1e4      	bne.n	8000af4 <__cmpsf2+0x1c>
 8000b2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b2e:	d0e1      	beq.n	8000af4 <__cmpsf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cfrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	e7ff      	b.n	8000b40 <__aeabi_cfcmpeq>

08000b40 <__aeabi_cfcmpeq>:
 8000b40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b42:	f7ff ffc9 	bl	8000ad8 <__cmpsf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	bf48      	it	mi
 8000b4a:	f110 0f00 	cmnmi.w	r0, #0
 8000b4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b50 <__aeabi_fcmpeq>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff fff4 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b58:	bf0c      	ite	eq
 8000b5a:	2001      	moveq	r0, #1
 8000b5c:	2000      	movne	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_fcmplt>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffea 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b6c:	bf34      	ite	cc
 8000b6e:	2001      	movcc	r0, #1
 8000b70:	2000      	movcs	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_fcmple>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffe0 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fcmpge>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffd2 	bl	8000b38 <__aeabi_cfrcmple>
 8000b94:	bf94      	ite	ls
 8000b96:	2001      	movls	r0, #1
 8000b98:	2000      	movhi	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fcmpgt>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffc8 	bl	8000b38 <__aeabi_cfrcmple>
 8000ba8:	bf34      	ite	cc
 8000baa:	2001      	movcc	r0, #1
 8000bac:	2000      	movcs	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <MPU6050_Init>:
float Ax, Ay, Az, Gx, Gy, Gz;

int error_flag =0 ;

void MPU6050_Init (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2275      	movs	r2, #117	; 0x75
 8000bcc:	21d0      	movs	r1, #208	; 0xd0
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <MPU6050_Init+0xa8>)
 8000bd0:	f002 f87c 	bl	8002ccc <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b68      	cmp	r3, #104	; 0x68
 8000bd8:	d13b      	bne.n	8000c52 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	226b      	movs	r2, #107	; 0x6b
 8000bf0:	21d0      	movs	r1, #208	; 0xd0
 8000bf2:	481a      	ldr	r0, [pc, #104]	; (8000c5c <MPU6050_Init+0xa8>)
 8000bf4:	f001 ff70 	bl	8002ad8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2219      	movs	r2, #25
 8000c0e:	21d0      	movs	r1, #208	; 0xd0
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MPU6050_Init+0xa8>)
 8000c12:	f001 ff61 	bl	8002ad8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	221c      	movs	r2, #28
 8000c2c:	21d0      	movs	r1, #208	; 0xd0
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MPU6050_Init+0xa8>)
 8000c30:	f001 ff52 	bl	8002ad8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	1dbb      	adds	r3, r7, #6
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	221b      	movs	r2, #27
 8000c4a:	21d0      	movs	r1, #208	; 0xd0
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MPU6050_Init+0xa8>)
 8000c4e:	f001 ff43 	bl	8002ad8 <HAL_I2C_Mem_Write>


	}

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000590 	.word	0x20000590

08000c60 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel (void)
{
 8000c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2306      	movs	r3, #6
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	463b      	mov	r3, r7
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	223b      	movs	r2, #59	; 0x3b
 8000c7a:	21d0      	movs	r1, #208	; 0xd0
 8000c7c:	4878      	ldr	r0, [pc, #480]	; (8000e60 <MPU6050_Read_Accel+0x200>)
 8000c7e:	f002 f825 	bl	8002ccc <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000c82:	783b      	ldrb	r3, [r7, #0]
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <MPU6050_Read_Accel+0x204>)
 8000c92:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000c94:	78bb      	ldrb	r3, [r7, #2]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b71      	ldr	r3, [pc, #452]	; (8000e68 <MPU6050_Read_Accel+0x208>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <MPU6050_Read_Accel+0x20c>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000cb8:	4b6a      	ldr	r3, [pc, #424]	; (8000e64 <MPU6050_Read_Accel+0x204>)
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb98 	bl	80003f4 <__aeabi_i2d>
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <MPU6050_Read_Accel+0x210>)
 8000cca:	f7ff fd27 	bl	800071c <__aeabi_ddiv>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff fea7 	bl	8000a28 <__aeabi_d2f>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a65      	ldr	r2, [pc, #404]	; (8000e74 <MPU6050_Read_Accel+0x214>)
 8000cde:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000ce0:	4b61      	ldr	r3, [pc, #388]	; (8000e68 <MPU6050_Read_Accel+0x208>)
 8000ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb84 	bl	80003f4 <__aeabi_i2d>
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <MPU6050_Read_Accel+0x210>)
 8000cf2:	f7ff fd13 	bl	800071c <__aeabi_ddiv>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff fe93 	bl	8000a28 <__aeabi_d2f>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a5c      	ldr	r2, [pc, #368]	; (8000e78 <MPU6050_Read_Accel+0x218>)
 8000d06:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000d08:	4b58      	ldr	r3, [pc, #352]	; (8000e6c <MPU6050_Read_Accel+0x20c>)
 8000d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb70 	bl	80003f4 <__aeabi_i2d>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <MPU6050_Read_Accel+0x210>)
 8000d1a:	f7ff fcff 	bl	800071c <__aeabi_ddiv>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fe7f 	bl	8000a28 <__aeabi_d2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <MPU6050_Read_Accel+0x21c>)
 8000d2e:	6013      	str	r3, [r2, #0]

	Roll_Accelometer  = atan((Ay)/sqrt(pow((Ax),2) + pow((Az),2)))*RAD_TO_DEG;	//pow fonksiyonu Ax in 2 üssünü alır burda.
 8000d30:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <MPU6050_Read_Accel+0x218>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb6f 	bl	8000418 <__aeabi_f2d>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <MPU6050_Read_Accel+0x214>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fb68 	bl	8000418 <__aeabi_f2d>
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	f00a f8dc 	bl	800af0c <pow>
 8000d54:	4680      	mov	r8, r0
 8000d56:	4689      	mov	r9, r1
 8000d58:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <MPU6050_Read_Accel+0x21c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb5b 	bl	8000418 <__aeabi_f2d>
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6a:	f00a f8cf 	bl	800af0c <pow>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4640      	mov	r0, r8
 8000d74:	4649      	mov	r1, r9
 8000d76:	f7ff f9f1 	bl	800015c <__adddf3>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f00a f96f 	bl	800b064 <sqrt>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fcc5 	bl	800071c <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f009 ff29 	bl	800abf0 <atan>
 8000d9e:	a32e      	add	r3, pc, #184	; (adr r3, 8000e58 <MPU6050_Read_Accel+0x1f8>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f7ff fb90 	bl	80004c8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff fe3a 	bl	8000a28 <__aeabi_d2f>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <MPU6050_Read_Accel+0x220>)
 8000db8:	6013      	str	r3, [r2, #0]
	Pitch_Accelometer = atan(-1*(Ax)/sqrt(pow((Ay),2) + pow((Az),2)))*RAD_TO_DEG;
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <MPU6050_Read_Accel+0x214>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb28 	bl	8000418 <__aeabi_f2d>
 8000dc8:	4604      	mov	r4, r0
 8000dca:	460d      	mov	r5, r1
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MPU6050_Read_Accel+0x218>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb21 	bl	8000418 <__aeabi_f2d>
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	f00a f895 	bl	800af0c <pow>
 8000de2:	4680      	mov	r8, r0
 8000de4:	4689      	mov	r9, r1
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MPU6050_Read_Accel+0x21c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb14 	bl	8000418 <__aeabi_f2d>
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	f00a f888 	bl	800af0c <pow>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4640      	mov	r0, r8
 8000e02:	4649      	mov	r1, r9
 8000e04:	f7ff f9aa 	bl	800015c <__adddf3>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00a f928 	bl	800b064 <sqrt>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4620      	mov	r0, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	f7ff fc7e 	bl	800071c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f009 fee2 	bl	800abf0 <atan>
 8000e2c:	a30a      	add	r3, pc, #40	; (adr r3, 8000e58 <MPU6050_Read_Accel+0x1f8>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fb49 	bl	80004c8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fdf3 	bl	8000a28 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MPU6050_Read_Accel+0x224>)
 8000e46:	6013      	str	r3, [r2, #0]


}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	1a63c1f8 	.word	0x1a63c1f8
 8000e5c:	404ca5dc 	.word	0x404ca5dc
 8000e60:	20000590 	.word	0x20000590
 8000e64:	20000306 	.word	0x20000306
 8000e68:	20000308 	.word	0x20000308
 8000e6c:	2000030a 	.word	0x2000030a
 8000e70:	40d00000 	.word	0x40d00000
 8000e74:	20000720 	.word	0x20000720
 8000e78:	20000624 	.word	0x20000624
 8000e7c:	20000754 	.word	0x20000754
 8000e80:	20000758 	.word	0x20000758
 8000e84:	200006b8 	.word	0x200006b8

08000e88 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2306      	movs	r3, #6
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	463b      	mov	r3, r7
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	2243      	movs	r2, #67	; 0x43
 8000ea0:	21d0      	movs	r1, #208	; 0xd0
 8000ea2:	4831      	ldr	r0, [pc, #196]	; (8000f68 <MPU6050_Read_Gyro+0xe0>)
 8000ea4:	f001 ff12 	bl	8002ccc <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ea8:	783b      	ldrb	r3, [r7, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	787b      	ldrb	r3, [r7, #1]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MPU6050_Read_Gyro+0xe4>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MPU6050_Read_Gyro+0xe8>)
 8000eca:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ecc:	793b      	ldrb	r3, [r7, #4]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	797b      	ldrb	r3, [r7, #5]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MPU6050_Read_Gyro+0xec>)
 8000edc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MPU6050_Read_Gyro+0xe4>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fa85 	bl	80003f4 <__aeabi_i2d>
 8000eea:	a31d      	add	r3, pc, #116	; (adr r3, 8000f60 <MPU6050_Read_Gyro+0xd8>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fc14 	bl	800071c <__aeabi_ddiv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f7ff fd94 	bl	8000a28 <__aeabi_d2f>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <MPU6050_Read_Gyro+0xf0>)
 8000f04:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MPU6050_Read_Gyro+0xe8>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fa71 	bl	80003f4 <__aeabi_i2d>
 8000f12:	a313      	add	r3, pc, #76	; (adr r3, 8000f60 <MPU6050_Read_Gyro+0xd8>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fc00 	bl	800071c <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fd80 	bl	8000a28 <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <MPU6050_Read_Gyro+0xf4>)
 8000f2c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MPU6050_Read_Gyro+0xec>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fa5d 	bl	80003f4 <__aeabi_i2d>
 8000f3a:	a309      	add	r3, pc, #36	; (adr r3, 8000f60 <MPU6050_Read_Gyro+0xd8>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fbec 	bl	800071c <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fd6c 	bl	8000a28 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MPU6050_Read_Gyro+0xf8>)
 8000f54:	6013      	str	r3, [r2, #0]

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40606000 	.word	0x40606000
 8000f68:	20000590 	.word	0x20000590
 8000f6c:	2000030c 	.word	0x2000030c
 8000f70:	2000030e 	.word	0x2000030e
 8000f74:	20000310 	.word	0x20000310
 8000f78:	20000544 	.word	0x20000544
 8000f7c:	200006b0 	.word	0x200006b0
 8000f80:	200007ec 	.word	0x200007ec

08000f84 <Parameter_Receive_PC>:

static void Parameter_Receive_PC(void)			//c# üzerinden gelen PID değerlerini alan fonksiyon.
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	if (rx_buffer[0] == 'R')
 8000f88:	4b98      	ldr	r3, [pc, #608]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b52      	cmp	r3, #82	; 0x52
 8000f8e:	d13b      	bne.n	8001008 <Parameter_Receive_PC+0x84>
	{
		recx_kpbytes.bytes[0]=rx_buffer[1];     // union struct yapısı ile gelen verileri 4 byte şekilde alıyoruz.
 8000f90:	4b96      	ldr	r3, [pc, #600]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000f92:	785a      	ldrb	r2, [r3, #1]
 8000f94:	4b96      	ldr	r3, [pc, #600]	; (80011f0 <Parameter_Receive_PC+0x26c>)
 8000f96:	701a      	strb	r2, [r3, #0]
		recx_kpbytes.bytes[1]=rx_buffer[2];		// çünkü float 4 byte bu nedenle 4 byte içinde alıyoruzz.
 8000f98:	4b94      	ldr	r3, [pc, #592]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	4b94      	ldr	r3, [pc, #592]	; (80011f0 <Parameter_Receive_PC+0x26c>)
 8000f9e:	705a      	strb	r2, [r3, #1]
		recx_kpbytes.bytes[2]=rx_buffer[3];
 8000fa0:	4b92      	ldr	r3, [pc, #584]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fa2:	78da      	ldrb	r2, [r3, #3]
 8000fa4:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <Parameter_Receive_PC+0x26c>)
 8000fa6:	709a      	strb	r2, [r3, #2]
		recx_kpbytes.bytes[3]=rx_buffer[4];
 8000fa8:	4b90      	ldr	r3, [pc, #576]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000faa:	791a      	ldrb	r2, [r3, #4]
 8000fac:	4b90      	ldr	r3, [pc, #576]	; (80011f0 <Parameter_Receive_PC+0x26c>)
 8000fae:	70da      	strb	r2, [r3, #3]

		X_kp=recx_kpbytes.data;                 //Dataları birleştirip float cinsindeki kp değişkeninin içine atıyoruz.
 8000fb0:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <Parameter_Receive_PC+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a8f      	ldr	r2, [pc, #572]	; (80011f4 <Parameter_Receive_PC+0x270>)
 8000fb6:	6013      	str	r3, [r2, #0]

		recx_kibytes.bytes[0]=rx_buffer[5];
 8000fb8:	4b8c      	ldr	r3, [pc, #560]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fba:	795a      	ldrb	r2, [r3, #5]
 8000fbc:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <Parameter_Receive_PC+0x274>)
 8000fbe:	701a      	strb	r2, [r3, #0]
		recx_kibytes.bytes[1]=rx_buffer[6];
 8000fc0:	4b8a      	ldr	r3, [pc, #552]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fc2:	799a      	ldrb	r2, [r3, #6]
 8000fc4:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <Parameter_Receive_PC+0x274>)
 8000fc6:	705a      	strb	r2, [r3, #1]
		recx_kibytes.bytes[2]=rx_buffer[7];
 8000fc8:	4b88      	ldr	r3, [pc, #544]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fca:	79da      	ldrb	r2, [r3, #7]
 8000fcc:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <Parameter_Receive_PC+0x274>)
 8000fce:	709a      	strb	r2, [r3, #2]
		recx_kibytes.bytes[3]=rx_buffer[8];
 8000fd0:	4b86      	ldr	r3, [pc, #536]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fd2:	7a1a      	ldrb	r2, [r3, #8]
 8000fd4:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <Parameter_Receive_PC+0x274>)
 8000fd6:	70da      	strb	r2, [r3, #3]

		X_ki=recx_kibytes.data;
 8000fd8:	4b87      	ldr	r3, [pc, #540]	; (80011f8 <Parameter_Receive_PC+0x274>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a87      	ldr	r2, [pc, #540]	; (80011fc <Parameter_Receive_PC+0x278>)
 8000fde:	6013      	str	r3, [r2, #0]

		recx_kdbytes.bytes[0]=rx_buffer[9];
 8000fe0:	4b82      	ldr	r3, [pc, #520]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fe2:	7a5a      	ldrb	r2, [r3, #9]
 8000fe4:	4b86      	ldr	r3, [pc, #536]	; (8001200 <Parameter_Receive_PC+0x27c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		recx_kdbytes.bytes[1]=rx_buffer[10];
 8000fe8:	4b80      	ldr	r3, [pc, #512]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000fea:	7a9a      	ldrb	r2, [r3, #10]
 8000fec:	4b84      	ldr	r3, [pc, #528]	; (8001200 <Parameter_Receive_PC+0x27c>)
 8000fee:	705a      	strb	r2, [r3, #1]
		recx_kdbytes.bytes[2]=rx_buffer[11];
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000ff2:	7ada      	ldrb	r2, [r3, #11]
 8000ff4:	4b82      	ldr	r3, [pc, #520]	; (8001200 <Parameter_Receive_PC+0x27c>)
 8000ff6:	709a      	strb	r2, [r3, #2]
		recx_kdbytes.bytes[3]=rx_buffer[12];
 8000ff8:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <Parameter_Receive_PC+0x268>)
 8000ffa:	7b1a      	ldrb	r2, [r3, #12]
 8000ffc:	4b80      	ldr	r3, [pc, #512]	; (8001200 <Parameter_Receive_PC+0x27c>)
 8000ffe:	70da      	strb	r2, [r3, #3]

		X_kd=recx_kdbytes.data;
 8001000:	4b7f      	ldr	r3, [pc, #508]	; (8001200 <Parameter_Receive_PC+0x27c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7f      	ldr	r2, [pc, #508]	; (8001204 <Parameter_Receive_PC+0x280>)
 8001006:	6013      	str	r3, [r2, #0]
	}

	if (rx_buffer[0] == 'Y')
 8001008:	4b78      	ldr	r3, [pc, #480]	; (80011ec <Parameter_Receive_PC+0x268>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b59      	cmp	r3, #89	; 0x59
 800100e:	d13b      	bne.n	8001088 <Parameter_Receive_PC+0x104>
	{
		recy_kpbytes.bytes[0]=rx_buffer[13];     // union struct yapısı ile gelen verileri 4 byte şekilde alıyoruz.
 8001010:	4b76      	ldr	r3, [pc, #472]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001012:	7b5a      	ldrb	r2, [r3, #13]
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <Parameter_Receive_PC+0x284>)
 8001016:	701a      	strb	r2, [r3, #0]
		recy_kpbytes.bytes[1]=rx_buffer[14];		// çünkü float 4 byte bu nedenle 4 byte içinde alıyoruzz.
 8001018:	4b74      	ldr	r3, [pc, #464]	; (80011ec <Parameter_Receive_PC+0x268>)
 800101a:	7b9a      	ldrb	r2, [r3, #14]
 800101c:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <Parameter_Receive_PC+0x284>)
 800101e:	705a      	strb	r2, [r3, #1]
		recy_kpbytes.bytes[2]=rx_buffer[15];
 8001020:	4b72      	ldr	r3, [pc, #456]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001022:	7bda      	ldrb	r2, [r3, #15]
 8001024:	4b78      	ldr	r3, [pc, #480]	; (8001208 <Parameter_Receive_PC+0x284>)
 8001026:	709a      	strb	r2, [r3, #2]
		recy_kpbytes.bytes[3]=rx_buffer[16];
 8001028:	4b70      	ldr	r3, [pc, #448]	; (80011ec <Parameter_Receive_PC+0x268>)
 800102a:	7c1a      	ldrb	r2, [r3, #16]
 800102c:	4b76      	ldr	r3, [pc, #472]	; (8001208 <Parameter_Receive_PC+0x284>)
 800102e:	70da      	strb	r2, [r3, #3]

		Y_kp=recy_kpbytes.data;                 //Dataları birleştirip float cinsindeki kp değişkeninin içine atıyoruz.
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <Parameter_Receive_PC+0x284>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a75      	ldr	r2, [pc, #468]	; (800120c <Parameter_Receive_PC+0x288>)
 8001036:	6013      	str	r3, [r2, #0]

		recy_kibytes.bytes[0]=rx_buffer[17];
 8001038:	4b6c      	ldr	r3, [pc, #432]	; (80011ec <Parameter_Receive_PC+0x268>)
 800103a:	7c5a      	ldrb	r2, [r3, #17]
 800103c:	4b74      	ldr	r3, [pc, #464]	; (8001210 <Parameter_Receive_PC+0x28c>)
 800103e:	701a      	strb	r2, [r3, #0]
		recy_kibytes.bytes[1]=rx_buffer[18];
 8001040:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001042:	7c9a      	ldrb	r2, [r3, #18]
 8001044:	4b72      	ldr	r3, [pc, #456]	; (8001210 <Parameter_Receive_PC+0x28c>)
 8001046:	705a      	strb	r2, [r3, #1]
		recy_kibytes.bytes[2]=rx_buffer[19];
 8001048:	4b68      	ldr	r3, [pc, #416]	; (80011ec <Parameter_Receive_PC+0x268>)
 800104a:	7cda      	ldrb	r2, [r3, #19]
 800104c:	4b70      	ldr	r3, [pc, #448]	; (8001210 <Parameter_Receive_PC+0x28c>)
 800104e:	709a      	strb	r2, [r3, #2]
		recy_kibytes.bytes[3]=rx_buffer[20];
 8001050:	4b66      	ldr	r3, [pc, #408]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001052:	7d1a      	ldrb	r2, [r3, #20]
 8001054:	4b6e      	ldr	r3, [pc, #440]	; (8001210 <Parameter_Receive_PC+0x28c>)
 8001056:	70da      	strb	r2, [r3, #3]

		Y_ki=recy_kibytes.data;
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <Parameter_Receive_PC+0x28c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a6d      	ldr	r2, [pc, #436]	; (8001214 <Parameter_Receive_PC+0x290>)
 800105e:	6013      	str	r3, [r2, #0]

		recy_kdbytes.bytes[0]=rx_buffer[21];
 8001060:	4b62      	ldr	r3, [pc, #392]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001062:	7d5a      	ldrb	r2, [r3, #21]
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <Parameter_Receive_PC+0x294>)
 8001066:	701a      	strb	r2, [r3, #0]
		recy_kdbytes.bytes[1]=rx_buffer[22];
 8001068:	4b60      	ldr	r3, [pc, #384]	; (80011ec <Parameter_Receive_PC+0x268>)
 800106a:	7d9a      	ldrb	r2, [r3, #22]
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <Parameter_Receive_PC+0x294>)
 800106e:	705a      	strb	r2, [r3, #1]
		recy_kdbytes.bytes[2]=rx_buffer[23];
 8001070:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001072:	7dda      	ldrb	r2, [r3, #23]
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <Parameter_Receive_PC+0x294>)
 8001076:	709a      	strb	r2, [r3, #2]
		recy_kdbytes.bytes[3]=rx_buffer[24];
 8001078:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <Parameter_Receive_PC+0x268>)
 800107a:	7e1a      	ldrb	r2, [r3, #24]
 800107c:	4b66      	ldr	r3, [pc, #408]	; (8001218 <Parameter_Receive_PC+0x294>)
 800107e:	70da      	strb	r2, [r3, #3]

		Y_kd=recy_kdbytes.data;
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <Parameter_Receive_PC+0x294>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <Parameter_Receive_PC+0x298>)
 8001086:	6013      	str	r3, [r2, #0]
	}

	if (rx_buffer[0] == 'L')
 8001088:	4b58      	ldr	r3, [pc, #352]	; (80011ec <Parameter_Receive_PC+0x268>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b4c      	cmp	r3, #76	; 0x4c
 800108e:	d140      	bne.n	8001112 <Parameter_Receive_PC+0x18e>
	{
		recz_kpbytes.bytes[0]=rx_buffer[25];     // union struct yapısı ile gelen verileri 4 byte şekilde alıyoruz.
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001092:	7e5a      	ldrb	r2, [r3, #25]
 8001094:	4b62      	ldr	r3, [pc, #392]	; (8001220 <Parameter_Receive_PC+0x29c>)
 8001096:	701a      	strb	r2, [r3, #0]
		recz_kpbytes.bytes[1]=rx_buffer[26];		// çünkü float 4 byte bu nedenle 4 byte içinde alıyoruzz.
 8001098:	4b54      	ldr	r3, [pc, #336]	; (80011ec <Parameter_Receive_PC+0x268>)
 800109a:	7e9a      	ldrb	r2, [r3, #26]
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <Parameter_Receive_PC+0x29c>)
 800109e:	705a      	strb	r2, [r3, #1]
		recz_kpbytes.bytes[2]=rx_buffer[27];
 80010a0:	4b52      	ldr	r3, [pc, #328]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010a2:	7eda      	ldrb	r2, [r3, #27]
 80010a4:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <Parameter_Receive_PC+0x29c>)
 80010a6:	709a      	strb	r2, [r3, #2]
		recz_kpbytes.bytes[3]=rx_buffer[28];
 80010a8:	4b50      	ldr	r3, [pc, #320]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010aa:	7f1a      	ldrb	r2, [r3, #28]
 80010ac:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <Parameter_Receive_PC+0x29c>)
 80010ae:	70da      	strb	r2, [r3, #3]

		Z_kp=recz_kpbytes.data;                 //Dataları birleştirip float cinsindeki kp değişkeninin içine atıyoruz.
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <Parameter_Receive_PC+0x29c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <Parameter_Receive_PC+0x2a0>)
 80010b6:	6013      	str	r3, [r2, #0]

		recz_kibytes.bytes[0]=rx_buffer[29];
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010ba:	7f5a      	ldrb	r2, [r3, #29]
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <Parameter_Receive_PC+0x2a4>)
 80010be:	701a      	strb	r2, [r3, #0]
		recz_kibytes.bytes[1]=rx_buffer[30];
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010c2:	7f9a      	ldrb	r2, [r3, #30]
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <Parameter_Receive_PC+0x2a4>)
 80010c6:	705a      	strb	r2, [r3, #1]
		recz_kibytes.bytes[2]=rx_buffer[31];
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010ca:	7fda      	ldrb	r2, [r3, #31]
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <Parameter_Receive_PC+0x2a4>)
 80010ce:	709a      	strb	r2, [r3, #2]
		recz_kibytes.bytes[3]=rx_buffer[32];
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <Parameter_Receive_PC+0x2a4>)
 80010d8:	70da      	strb	r2, [r3, #3]

		Z_ki=recz_kibytes.data;
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <Parameter_Receive_PC+0x2a4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <Parameter_Receive_PC+0x2a8>)
 80010e0:	6013      	str	r3, [r2, #0]

		recz_kdbytes.bytes[0]=rx_buffer[33];
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010e4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80010e8:	4b51      	ldr	r3, [pc, #324]	; (8001230 <Parameter_Receive_PC+0x2ac>)
 80010ea:	701a      	strb	r2, [r3, #0]
		recz_kdbytes.bytes[1]=rx_buffer[34];
 80010ec:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <Parameter_Receive_PC+0x2ac>)
 80010f4:	705a      	strb	r2, [r3, #1]
		recz_kdbytes.bytes[2]=rx_buffer[35];
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <Parameter_Receive_PC+0x268>)
 80010f8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80010fc:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <Parameter_Receive_PC+0x2ac>)
 80010fe:	709a      	strb	r2, [r3, #2]
		recz_kdbytes.bytes[3]=rx_buffer[36];
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001102:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <Parameter_Receive_PC+0x2ac>)
 8001108:	70da      	strb	r2, [r3, #3]

		Z_kd=recz_kdbytes.data;
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <Parameter_Receive_PC+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <Parameter_Receive_PC+0x2b0>)
 8001110:	6013      	str	r3, [r2, #0]
	}
	if (rx_buffer[0] == 'F')
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b46      	cmp	r3, #70	; 0x46
 8001118:	d15b      	bne.n	80011d2 <Parameter_Receive_PC+0x24e>
	{

		 otolat1.bytes[0] = rx_buffer[37];
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <Parameter_Receive_PC+0x268>)
 800111c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 8001122:	701a      	strb	r2, [r3, #0]
		 otolat1.bytes[1] = rx_buffer[38];
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001126:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800112a:	4b43      	ldr	r3, [pc, #268]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 800112c:	705a      	strb	r2, [r3, #1]
		 otolat1.bytes[2] = rx_buffer[39];
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001130:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 8001136:	709a      	strb	r2, [r3, #2]
		 otolat1.bytes[3] = rx_buffer[40];
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <Parameter_Receive_PC+0x268>)
 800113a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 8001140:	70da      	strb	r2, [r3, #3]
		 otolat1.bytes[4] = rx_buffer[41];
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001144:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 800114a:	711a      	strb	r2, [r3, #4]
		 otolat1.bytes[5] = rx_buffer[42];
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <Parameter_Receive_PC+0x268>)
 800114e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 8001154:	715a      	strb	r2, [r3, #5]
		 otolat1.bytes[6] = rx_buffer[43];
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001158:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 800115e:	719a      	strb	r2, [r3, #6]
		 otolat1.bytes[7] = rx_buffer[44];
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001162:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 8001168:	71da      	strb	r2, [r3, #7]


		 otogpslat1=otolat1.data;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <Parameter_Receive_PC+0x2b4>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	4932      	ldr	r1, [pc, #200]	; (800123c <Parameter_Receive_PC+0x2b8>)
 8001172:	e9c1 2300 	strd	r2, r3, [r1]

		 otolng1.bytes[0] = rx_buffer[45];
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001178:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 800117e:	701a      	strb	r2, [r3, #0]
		 otolng1.bytes[1] = rx_buffer[46];
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001182:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 8001188:	705a      	strb	r2, [r3, #1]
		 otolng1.bytes[2] = rx_buffer[47];
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <Parameter_Receive_PC+0x268>)
 800118c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 8001192:	709a      	strb	r2, [r3, #2]
		 otolng1.bytes[3] = rx_buffer[48];
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <Parameter_Receive_PC+0x268>)
 8001196:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 800119c:	70da      	strb	r2, [r3, #3]
		 otolng1.bytes[4] = rx_buffer[49];
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011a0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 80011a6:	711a      	strb	r2, [r3, #4]
		 otolng1.bytes[5] = rx_buffer[50];
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011aa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 80011b0:	715a      	strb	r2, [r3, #5]
		 otolng1.bytes[6] = rx_buffer[51];
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011b4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 80011ba:	719a      	strb	r2, [r3, #6]
		 otolng1.bytes[7] = rx_buffer[52];
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 80011c4:	71da      	strb	r2, [r3, #7]

		 otogpslng1=otolng1.data;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <Parameter_Receive_PC+0x2bc>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	491d      	ldr	r1, [pc, #116]	; (8001244 <Parameter_Receive_PC+0x2c0>)
 80011ce:	e9c1 2300 	strd	r2, r3, [r1]

	}
	if (rx_buffer[0] == 'D')
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b44      	cmp	r3, #68	; 0x44
 80011d8:	d148      	bne.n	800126c <Parameter_Receive_PC+0x2e8>
		{

			 DroneKontrol_Dizi.bytes[0] = rx_buffer[53];
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011dc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <Parameter_Receive_PC+0x2c4>)
 80011e2:	701a      	strb	r2, [r3, #0]
			 DroneKontrol_Dizi.bytes[1] = rx_buffer[54];
 80011e4:	4b01      	ldr	r3, [pc, #4]	; (80011ec <Parameter_Receive_PC+0x268>)
 80011e6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80011ea:	e02f      	b.n	800124c <Parameter_Receive_PC+0x2c8>
 80011ec:	20000630 	.word	0x20000630
 80011f0:	200007f4 	.word	0x200007f4
 80011f4:	20000018 	.word	0x20000018
 80011f8:	200006bc 	.word	0x200006bc
 80011fc:	2000001c 	.word	0x2000001c
 8001200:	200006e0 	.word	0x200006e0
 8001204:	20000020 	.word	0x20000020
 8001208:	200005fc 	.word	0x200005fc
 800120c:	20000024 	.word	0x20000024
 8001210:	20000620 	.word	0x20000620
 8001214:	20000028 	.word	0x20000028
 8001218:	20000728 	.word	0x20000728
 800121c:	2000002c 	.word	0x2000002c
 8001220:	200006f0 	.word	0x200006f0
 8001224:	20000030 	.word	0x20000030
 8001228:	2000072c 	.word	0x2000072c
 800122c:	20000034 	.word	0x20000034
 8001230:	20000748 	.word	0x20000748
 8001234:	20000038 	.word	0x20000038
 8001238:	20000578 	.word	0x20000578
 800123c:	200007c0 	.word	0x200007c0
 8001240:	20000570 	.word	0x20000570
 8001244:	20000558 	.word	0x20000558
 8001248:	2000075c 	.word	0x2000075c
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <Parameter_Receive_PC+0x2f0>)
 800124e:	705a      	strb	r2, [r3, #1]
			 DroneKontrol_Dizi.bytes[2] = rx_buffer[55];
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <Parameter_Receive_PC+0x2f4>)
 8001252:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Parameter_Receive_PC+0x2f0>)
 8001258:	709a      	strb	r2, [r3, #2]
			 DroneKontrol_Dizi.bytes[3] = rx_buffer[56];
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <Parameter_Receive_PC+0x2f4>)
 800125c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <Parameter_Receive_PC+0x2f0>)
 8001262:	70da      	strb	r2, [r3, #3]



			 Dronekomut_dizi_float=DroneKontrol_Dizi.data;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <Parameter_Receive_PC+0x2f0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <Parameter_Receive_PC+0x2f8>)
 800126a:	6013      	str	r3, [r2, #0]

		}



}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	2000075c 	.word	0x2000075c
 8001278:	20000630 	.word	0x20000630
 800127c:	20000568 	.word	0x20000568

08001280 <Parameter_Transmit_PC>:

static void Parameter_Transmit_PC(void)				//Parametleri gönderdiğimiz fonksiyon.
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0


	All_Parameters_Send_Tekseferde(); //tek paketle yollamak için.
 8001284:	f000 f80c 	bl	80012a0 <All_Parameters_Send_Tekseferde>



	CDC_Transmit_FS(tx_Send_OnePacket, SIZE_OF_OnePacket_BUFFER);
 8001288:	217d      	movs	r1, #125	; 0x7d
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <Parameter_Transmit_PC+0x1c>)
 800128c:	f009 f890 	bl	800a3b0 <CDC_Transmit_FS>
	HAL_Delay(200);
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f000 ffdf 	bl	8002254 <HAL_Delay>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000280 	.word	0x20000280

080012a0 <All_Parameters_Send_Tekseferde>:
static void All_Parameters_Send_Tekseferde(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0


		X_kpbytes.data=X_kp;
 80012a4:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <All_Parameters_Send_Tekseferde+0x238>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a8c      	ldr	r2, [pc, #560]	; (80014dc <All_Parameters_Send_Tekseferde+0x23c>)
 80012aa:	6013      	str	r3, [r2, #0]
		X_kibytes.data=X_ki;
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <All_Parameters_Send_Tekseferde+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a8c      	ldr	r2, [pc, #560]	; (80014e4 <All_Parameters_Send_Tekseferde+0x244>)
 80012b2:	6013      	str	r3, [r2, #0]
		X_kdbytes.data=X_kd;
 80012b4:	4b8c      	ldr	r3, [pc, #560]	; (80014e8 <All_Parameters_Send_Tekseferde+0x248>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a8c      	ldr	r2, [pc, #560]	; (80014ec <All_Parameters_Send_Tekseferde+0x24c>)
 80012ba:	6013      	str	r3, [r2, #0]

		Y_kpbytes.data=Y_kp;
 80012bc:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <All_Parameters_Send_Tekseferde+0x250>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a8c      	ldr	r2, [pc, #560]	; (80014f4 <All_Parameters_Send_Tekseferde+0x254>)
 80012c2:	6013      	str	r3, [r2, #0]
		Y_kibytes.data=Y_ki;
 80012c4:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <All_Parameters_Send_Tekseferde+0x258>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a8c      	ldr	r2, [pc, #560]	; (80014fc <All_Parameters_Send_Tekseferde+0x25c>)
 80012ca:	6013      	str	r3, [r2, #0]
		Y_kdbytes.data=Y_kd;
 80012cc:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <All_Parameters_Send_Tekseferde+0x260>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a8c      	ldr	r2, [pc, #560]	; (8001504 <All_Parameters_Send_Tekseferde+0x264>)
 80012d2:	6013      	str	r3, [r2, #0]

		Z_kpbytes.data = Z_kp;
 80012d4:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <All_Parameters_Send_Tekseferde+0x268>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a8c      	ldr	r2, [pc, #560]	; (800150c <All_Parameters_Send_Tekseferde+0x26c>)
 80012da:	6013      	str	r3, [r2, #0]
		Z_kibytes.data=Z_ki;
 80012dc:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <All_Parameters_Send_Tekseferde+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a8c      	ldr	r2, [pc, #560]	; (8001514 <All_Parameters_Send_Tekseferde+0x274>)
 80012e2:	6013      	str	r3, [r2, #0]
		Z_kdbytes.data=Z_kd;
 80012e4:	4b8c      	ldr	r3, [pc, #560]	; (8001518 <All_Parameters_Send_Tekseferde+0x278>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a8c      	ldr	r2, [pc, #560]	; (800151c <All_Parameters_Send_Tekseferde+0x27c>)
 80012ea:	6013      	str	r3, [r2, #0]


		gyro_xbytes.data=gyrox;     // ana karttan gelen gyrox verilerini bytlerına ayırıyoruz.
 80012ec:	4b8c      	ldr	r3, [pc, #560]	; (8001520 <All_Parameters_Send_Tekseferde+0x280>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a8c      	ldr	r2, [pc, #560]	; (8001524 <All_Parameters_Send_Tekseferde+0x284>)
 80012f2:	6013      	str	r3, [r2, #0]
		gyro_ybytes.data=gyroy;
 80012f4:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <All_Parameters_Send_Tekseferde+0x288>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a8c      	ldr	r2, [pc, #560]	; (800152c <All_Parameters_Send_Tekseferde+0x28c>)
 80012fa:	6013      	str	r3, [r2, #0]
		gyro_zbytes.data=gyroz;
 80012fc:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <All_Parameters_Send_Tekseferde+0x290>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a8c      	ldr	r2, [pc, #560]	; (8001534 <All_Parameters_Send_Tekseferde+0x294>)
 8001302:	6013      	str	r3, [r2, #0]

		gyrox_errorbytes.data=gyrox_error;
 8001304:	4b8c      	ldr	r3, [pc, #560]	; (8001538 <All_Parameters_Send_Tekseferde+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a8c      	ldr	r2, [pc, #560]	; (800153c <All_Parameters_Send_Tekseferde+0x29c>)
 800130a:	6013      	str	r3, [r2, #0]
		gyroy_errorbytes.data=gyroy_error;
 800130c:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <All_Parameters_Send_Tekseferde+0x2a0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a8c      	ldr	r2, [pc, #560]	; (8001544 <All_Parameters_Send_Tekseferde+0x2a4>)
 8001312:	6013      	str	r3, [r2, #0]
		gyroz_errorbytes.data=gyroz_error;
 8001314:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <All_Parameters_Send_Tekseferde+0x2a8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a8c      	ldr	r2, [pc, #560]	; (800154c <All_Parameters_Send_Tekseferde+0x2ac>)
 800131a:	6013      	str	r3, [r2, #0]

		Barometer_Altitude.data=Barometer_altitude;     // ana karttan gelen Barometre verilerini bytlerına ayırıyoruz.
 800131c:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <All_Parameters_Send_Tekseferde+0x2b0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a8c      	ldr	r2, [pc, #560]	; (8001554 <All_Parameters_Send_Tekseferde+0x2b4>)
 8001322:	6013      	str	r3, [r2, #0]


		Pitch_intgral.data=Pitch_integral_float;
 8001324:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <All_Parameters_Send_Tekseferde+0x2b8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a8c      	ldr	r2, [pc, #560]	; (800155c <All_Parameters_Send_Tekseferde+0x2bc>)
 800132a:	6013      	str	r3, [r2, #0]
		Roll_intgral.data=Roll_integral_float;
 800132c:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <All_Parameters_Send_Tekseferde+0x2c0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a8c      	ldr	r2, [pc, #560]	; (8001564 <All_Parameters_Send_Tekseferde+0x2c4>)
 8001332:	6013      	str	r3, [r2, #0]
		Yaw_intgral.data=Yaw_integral_float;
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <All_Parameters_Send_Tekseferde+0x2c8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a8c      	ldr	r2, [pc, #560]	; (800156c <All_Parameters_Send_Tekseferde+0x2cc>)
 800133a:	6013      	str	r3, [r2, #0]

		Pitch_ControlSignal.data=Pitch_ControlSignal_float;
 800133c:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <All_Parameters_Send_Tekseferde+0x2d0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a8c      	ldr	r2, [pc, #560]	; (8001574 <All_Parameters_Send_Tekseferde+0x2d4>)
 8001342:	6013      	str	r3, [r2, #0]
		Roll_ControlSignal.data=Roll_ControlSignal_float;
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <All_Parameters_Send_Tekseferde+0x2d8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a8c      	ldr	r2, [pc, #560]	; (800157c <All_Parameters_Send_Tekseferde+0x2dc>)
 800134a:	6013      	str	r3, [r2, #0]
		Yaw_ControlSignal.data=Yaw_ControlSignal_float;
 800134c:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <All_Parameters_Send_Tekseferde+0x2e0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a8c      	ldr	r2, [pc, #560]	; (8001584 <All_Parameters_Send_Tekseferde+0x2e4>)
 8001352:	6013      	str	r3, [r2, #0]

		Altitude_ControlSignal.data = Altitude_ControlSignal_float;
 8001354:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <All_Parameters_Send_Tekseferde+0x2e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a8c      	ldr	r2, [pc, #560]	; (800158c <All_Parameters_Send_Tekseferde+0x2ec>)
 800135a:	6013      	str	r3, [r2, #0]
		Altitude_integral.data = Altitude_integral_float;
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <All_Parameters_Send_Tekseferde+0x2f0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a8c      	ldr	r2, [pc, #560]	; (8001594 <All_Parameters_Send_Tekseferde+0x2f4>)
 8001362:	6013      	str	r3, [r2, #0]

		Heading.data=Heading_float;
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <All_Parameters_Send_Tekseferde+0x2f8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <All_Parameters_Send_Tekseferde+0x2fc>)
 800136a:	6013      	str	r3, [r2, #0]

		tx_Send_OnePacket[0]=packet_header_s1_char;  //65
 800136c:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <All_Parameters_Send_Tekseferde+0x300>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001372:	701a      	strb	r2, [r3, #0]
		tx_Send_OnePacket[1]=packet_header_s2_char; // 66 olmalı !!
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <All_Parameters_Send_Tekseferde+0x308>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b8a      	ldr	r3, [pc, #552]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800137a:	705a      	strb	r2, [r3, #1]




		tx_Send_OnePacket[2] =gyro_xbytes.bytes[0];  		// burada da 4 byte şeklinde c# a gönderiyoruz.
 800137c:	4b69      	ldr	r3, [pc, #420]	; (8001524 <All_Parameters_Send_Tekseferde+0x284>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001382:	709a      	strb	r2, [r3, #2]
		tx_Send_OnePacket[3] =gyro_xbytes.bytes[1];
 8001384:	4b67      	ldr	r3, [pc, #412]	; (8001524 <All_Parameters_Send_Tekseferde+0x284>)
 8001386:	785a      	ldrb	r2, [r3, #1]
 8001388:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800138a:	70da      	strb	r2, [r3, #3]
		tx_Send_OnePacket[4] =gyro_xbytes.bytes[2];
 800138c:	4b65      	ldr	r3, [pc, #404]	; (8001524 <All_Parameters_Send_Tekseferde+0x284>)
 800138e:	789a      	ldrb	r2, [r3, #2]
 8001390:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001392:	711a      	strb	r2, [r3, #4]
		tx_Send_OnePacket[5] =gyro_xbytes.bytes[3];
 8001394:	4b63      	ldr	r3, [pc, #396]	; (8001524 <All_Parameters_Send_Tekseferde+0x284>)
 8001396:	78da      	ldrb	r2, [r3, #3]
 8001398:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800139a:	715a      	strb	r2, [r3, #5]

		tx_Send_OnePacket[6]  =gyro_ybytes.bytes[0];
 800139c:	4b63      	ldr	r3, [pc, #396]	; (800152c <All_Parameters_Send_Tekseferde+0x28c>)
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013a2:	719a      	strb	r2, [r3, #6]
		tx_Send_OnePacket[7]  =gyro_ybytes.bytes[1];
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <All_Parameters_Send_Tekseferde+0x28c>)
 80013a6:	785a      	ldrb	r2, [r3, #1]
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013aa:	71da      	strb	r2, [r3, #7]
		tx_Send_OnePacket[8]  =gyro_ybytes.bytes[2];
 80013ac:	4b5f      	ldr	r3, [pc, #380]	; (800152c <All_Parameters_Send_Tekseferde+0x28c>)
 80013ae:	789a      	ldrb	r2, [r3, #2]
 80013b0:	4b7c      	ldr	r3, [pc, #496]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013b2:	721a      	strb	r2, [r3, #8]
		tx_Send_OnePacket[9] =gyro_ybytes.bytes[3];
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <All_Parameters_Send_Tekseferde+0x28c>)
 80013b6:	78da      	ldrb	r2, [r3, #3]
 80013b8:	4b7a      	ldr	r3, [pc, #488]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013ba:	725a      	strb	r2, [r3, #9]

		tx_Send_OnePacket[10] =gyro_zbytes.bytes[0];
 80013bc:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <All_Parameters_Send_Tekseferde+0x294>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013c2:	729a      	strb	r2, [r3, #10]
		tx_Send_OnePacket[11] =gyro_zbytes.bytes[1];
 80013c4:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <All_Parameters_Send_Tekseferde+0x294>)
 80013c6:	785a      	ldrb	r2, [r3, #1]
 80013c8:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013ca:	72da      	strb	r2, [r3, #11]
		tx_Send_OnePacket[12] =gyro_zbytes.bytes[2];
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <All_Parameters_Send_Tekseferde+0x294>)
 80013ce:	789a      	ldrb	r2, [r3, #2]
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013d2:	731a      	strb	r2, [r3, #12]
		tx_Send_OnePacket[13] =gyro_zbytes.bytes[3];
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <All_Parameters_Send_Tekseferde+0x294>)
 80013d6:	78da      	ldrb	r2, [r3, #3]
 80013d8:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013da:	735a      	strb	r2, [r3, #13]

		tx_Send_OnePacket[14] =X_kpbytes.bytes[0];		//Xpıd
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <All_Parameters_Send_Tekseferde+0x23c>)
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013e2:	739a      	strb	r2, [r3, #14]
		tx_Send_OnePacket[15] =X_kpbytes.bytes[1];
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <All_Parameters_Send_Tekseferde+0x23c>)
 80013e6:	785a      	ldrb	r2, [r3, #1]
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013ea:	73da      	strb	r2, [r3, #15]
		tx_Send_OnePacket[16] =X_kpbytes.bytes[2];
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <All_Parameters_Send_Tekseferde+0x23c>)
 80013ee:	789a      	ldrb	r2, [r3, #2]
 80013f0:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013f2:	741a      	strb	r2, [r3, #16]
		tx_Send_OnePacket[17] =X_kpbytes.bytes[3];
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <All_Parameters_Send_Tekseferde+0x23c>)
 80013f6:	78da      	ldrb	r2, [r3, #3]
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80013fa:	745a      	strb	r2, [r3, #17]

		tx_Send_OnePacket[18] =X_kibytes.bytes[0];
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <All_Parameters_Send_Tekseferde+0x244>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001402:	749a      	strb	r2, [r3, #18]
		tx_Send_OnePacket[19] =X_kibytes.bytes[1];
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <All_Parameters_Send_Tekseferde+0x244>)
 8001406:	785a      	ldrb	r2, [r3, #1]
 8001408:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800140a:	74da      	strb	r2, [r3, #19]
		tx_Send_OnePacket[20] =X_kibytes.bytes[2];
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <All_Parameters_Send_Tekseferde+0x244>)
 800140e:	789a      	ldrb	r2, [r3, #2]
 8001410:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001412:	751a      	strb	r2, [r3, #20]
		tx_Send_OnePacket[21] =X_kibytes.bytes[3];
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <All_Parameters_Send_Tekseferde+0x244>)
 8001416:	78da      	ldrb	r2, [r3, #3]
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800141a:	755a      	strb	r2, [r3, #21]

		tx_Send_OnePacket[22] =X_kdbytes.bytes[0];
 800141c:	4b33      	ldr	r3, [pc, #204]	; (80014ec <All_Parameters_Send_Tekseferde+0x24c>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001422:	759a      	strb	r2, [r3, #22]
		tx_Send_OnePacket[23] =X_kdbytes.bytes[1];
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <All_Parameters_Send_Tekseferde+0x24c>)
 8001426:	785a      	ldrb	r2, [r3, #1]
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800142a:	75da      	strb	r2, [r3, #23]
		tx_Send_OnePacket[24] =X_kdbytes.bytes[2];
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <All_Parameters_Send_Tekseferde+0x24c>)
 800142e:	789a      	ldrb	r2, [r3, #2]
 8001430:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001432:	761a      	strb	r2, [r3, #24]
		tx_Send_OnePacket[25] =X_kdbytes.bytes[3];
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <All_Parameters_Send_Tekseferde+0x24c>)
 8001436:	78da      	ldrb	r2, [r3, #3]
 8001438:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800143a:	765a      	strb	r2, [r3, #25]

		tx_Send_OnePacket[26] =Y_kpbytes.bytes[0];   //ypıd
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <All_Parameters_Send_Tekseferde+0x254>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001442:	769a      	strb	r2, [r3, #26]
		tx_Send_OnePacket[27] =Y_kpbytes.bytes[1];
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <All_Parameters_Send_Tekseferde+0x254>)
 8001446:	785a      	ldrb	r2, [r3, #1]
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800144a:	76da      	strb	r2, [r3, #27]
		tx_Send_OnePacket[28] =Y_kpbytes.bytes[2];
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <All_Parameters_Send_Tekseferde+0x254>)
 800144e:	789a      	ldrb	r2, [r3, #2]
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001452:	771a      	strb	r2, [r3, #28]
		tx_Send_OnePacket[29] =Y_kpbytes.bytes[3];
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <All_Parameters_Send_Tekseferde+0x254>)
 8001456:	78da      	ldrb	r2, [r3, #3]
 8001458:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800145a:	775a      	strb	r2, [r3, #29]

		tx_Send_OnePacket[30]  =Y_kibytes.bytes[0];
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <All_Parameters_Send_Tekseferde+0x25c>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001462:	779a      	strb	r2, [r3, #30]
		tx_Send_OnePacket[31]  =Y_kibytes.bytes[1];
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <All_Parameters_Send_Tekseferde+0x25c>)
 8001466:	785a      	ldrb	r2, [r3, #1]
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800146a:	77da      	strb	r2, [r3, #31]
		tx_Send_OnePacket[32]  =Y_kibytes.bytes[2];
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <All_Parameters_Send_Tekseferde+0x25c>)
 800146e:	789a      	ldrb	r2, [r3, #2]
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001472:	f883 2020 	strb.w	r2, [r3, #32]
		tx_Send_OnePacket[33] =Y_kibytes.bytes[3];
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <All_Parameters_Send_Tekseferde+0x25c>)
 8001478:	78da      	ldrb	r2, [r3, #3]
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800147c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		tx_Send_OnePacket[34] =Y_kdbytes.bytes[0];
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <All_Parameters_Send_Tekseferde+0x264>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001486:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		tx_Send_OnePacket[35] =Y_kdbytes.bytes[1];
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <All_Parameters_Send_Tekseferde+0x264>)
 800148c:	785a      	ldrb	r2, [r3, #1]
 800148e:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 8001490:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		tx_Send_OnePacket[36] =Y_kdbytes.bytes[2];
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <All_Parameters_Send_Tekseferde+0x264>)
 8001496:	789a      	ldrb	r2, [r3, #2]
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		tx_Send_OnePacket[37] =Y_kdbytes.bytes[3];
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <All_Parameters_Send_Tekseferde+0x264>)
 80014a0:	78da      	ldrb	r2, [r3, #3]
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		tx_Send_OnePacket[38] = Z_kpbytes.bytes[0];			//zpıd
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <All_Parameters_Send_Tekseferde+0x26c>)
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80014ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		tx_Send_OnePacket[39] = Z_kpbytes.bytes[1];
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <All_Parameters_Send_Tekseferde+0x26c>)
 80014b4:	785a      	ldrb	r2, [r3, #1]
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80014b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		tx_Send_OnePacket[40] = Z_kpbytes.bytes[2];
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <All_Parameters_Send_Tekseferde+0x26c>)
 80014be:	789a      	ldrb	r2, [r3, #2]
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80014c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		tx_Send_OnePacket[41] = Z_kpbytes.bytes[3];
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <All_Parameters_Send_Tekseferde+0x26c>)
 80014c8:	78da      	ldrb	r2, [r3, #3]
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <All_Parameters_Send_Tekseferde+0x304>)
 80014cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

		tx_Send_OnePacket[42] =Z_kibytes.bytes[0];
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <All_Parameters_Send_Tekseferde+0x274>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	e06a      	b.n	80015ac <All_Parameters_Send_Tekseferde+0x30c>
 80014d6:	bf00      	nop
 80014d8:	20000018 	.word	0x20000018
 80014dc:	200005ec 	.word	0x200005ec
 80014e0:	2000001c 	.word	0x2000001c
 80014e4:	200006c8 	.word	0x200006c8
 80014e8:	20000020 	.word	0x20000020
 80014ec:	20000738 	.word	0x20000738
 80014f0:	20000024 	.word	0x20000024
 80014f4:	20000700 	.word	0x20000700
 80014f8:	20000028 	.word	0x20000028
 80014fc:	200006cc 	.word	0x200006cc
 8001500:	2000002c 	.word	0x2000002c
 8001504:	20000718 	.word	0x20000718
 8001508:	20000030 	.word	0x20000030
 800150c:	200005e8 	.word	0x200005e8
 8001510:	20000034 	.word	0x20000034
 8001514:	20000740 	.word	0x20000740
 8001518:	20000038 	.word	0x20000038
 800151c:	2000074c 	.word	0x2000074c
 8001520:	200007e0 	.word	0x200007e0
 8001524:	200005e4 	.word	0x200005e4
 8001528:	200007fc 	.word	0x200007fc
 800152c:	200007d8 	.word	0x200007d8
 8001530:	2000003c 	.word	0x2000003c
 8001534:	2000062c 	.word	0x2000062c
 8001538:	20000040 	.word	0x20000040
 800153c:	200006b4 	.word	0x200006b4
 8001540:	20000044 	.word	0x20000044
 8001544:	20000618 	.word	0x20000618
 8001548:	20000048 	.word	0x20000048
 800154c:	20000580 	.word	0x20000580
 8001550:	2000000c 	.word	0x2000000c
 8001554:	200007d0 	.word	0x200007d0
 8001558:	2000004c 	.word	0x2000004c
 800155c:	200006d8 	.word	0x200006d8
 8001560:	20000050 	.word	0x20000050
 8001564:	20000730 	.word	0x20000730
 8001568:	20000054 	.word	0x20000054
 800156c:	2000061c 	.word	0x2000061c
 8001570:	20000058 	.word	0x20000058
 8001574:	20000550 	.word	0x20000550
 8001578:	2000005c 	.word	0x2000005c
 800157c:	200006d4 	.word	0x200006d4
 8001580:	20000060 	.word	0x20000060
 8001584:	200007b4 	.word	0x200007b4
 8001588:	20000068 	.word	0x20000068
 800158c:	200006c0 	.word	0x200006c0
 8001590:	2000006c 	.word	0x2000006c
 8001594:	2000073c 	.word	0x2000073c
 8001598:	20000064 	.word	0x20000064
 800159c:	200007f8 	.word	0x200007f8
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000280 	.word	0x20000280
 80015a8:	20000001 	.word	0x20000001
 80015ac:	4b9d      	ldr	r3, [pc, #628]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		tx_Send_OnePacket[43] =Z_kibytes.bytes[1];
 80015b2:	4b9d      	ldr	r3, [pc, #628]	; (8001828 <All_Parameters_Send_Tekseferde+0x588>)
 80015b4:	785a      	ldrb	r2, [r3, #1]
 80015b6:	4b9b      	ldr	r3, [pc, #620]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		tx_Send_OnePacket[44] =Z_kibytes.bytes[2];
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <All_Parameters_Send_Tekseferde+0x588>)
 80015be:	789a      	ldrb	r2, [r3, #2]
 80015c0:	4b98      	ldr	r3, [pc, #608]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		tx_Send_OnePacket[45] =Z_kibytes.bytes[3];
 80015c6:	4b98      	ldr	r3, [pc, #608]	; (8001828 <All_Parameters_Send_Tekseferde+0x588>)
 80015c8:	78da      	ldrb	r2, [r3, #3]
 80015ca:	4b96      	ldr	r3, [pc, #600]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		tx_Send_OnePacket[46] =Z_kdbytes.bytes[0];
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <All_Parameters_Send_Tekseferde+0x58c>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b93      	ldr	r3, [pc, #588]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		tx_Send_OnePacket[47] =Z_kdbytes.bytes[1];
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <All_Parameters_Send_Tekseferde+0x58c>)
 80015dc:	785a      	ldrb	r2, [r3, #1]
 80015de:	4b91      	ldr	r3, [pc, #580]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		tx_Send_OnePacket[48] =Z_kdbytes.bytes[2];
 80015e4:	4b91      	ldr	r3, [pc, #580]	; (800182c <All_Parameters_Send_Tekseferde+0x58c>)
 80015e6:	789a      	ldrb	r2, [r3, #2]
 80015e8:	4b8e      	ldr	r3, [pc, #568]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		tx_Send_OnePacket[49] =Z_kdbytes.bytes[3];
 80015ee:	4b8f      	ldr	r3, [pc, #572]	; (800182c <All_Parameters_Send_Tekseferde+0x58c>)
 80015f0:	78da      	ldrb	r2, [r3, #3]
 80015f2:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80015f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		tx_Send_OnePacket[50] =(uint8_t)Motor1_Duty;
 80015f8:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <All_Parameters_Send_Tekseferde+0x590>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b89      	ldr	r3, [pc, #548]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001600:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tx_Send_OnePacket[51] =(uint8_t)(Motor1_Duty >> 8) ;
 8001604:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <All_Parameters_Send_Tekseferde+0x590>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b29b      	uxth	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001610:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		tx_Send_OnePacket[52] =(uint8_t)Motor2_Duty;
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <All_Parameters_Send_Tekseferde+0x594>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b82      	ldr	r3, [pc, #520]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		tx_Send_OnePacket[53] =(uint8_t)(Motor2_Duty >> 8) ;
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <All_Parameters_Send_Tekseferde+0x594>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	b29b      	uxth	r3, r3
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		tx_Send_OnePacket[54] =(uint8_t)Motor3_Duty;
 8001630:	4b81      	ldr	r3, [pc, #516]	; (8001838 <All_Parameters_Send_Tekseferde+0x598>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001638:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tx_Send_OnePacket[55] =(uint8_t)(Motor3_Duty >> 8) ;
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <All_Parameters_Send_Tekseferde+0x598>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001648:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tx_Send_OnePacket[56] =(uint8_t)Motor4_Duty;
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <All_Parameters_Send_Tekseferde+0x59c>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		tx_Send_OnePacket[57]=(uint8_t)(Motor4_Duty >> 8);
 8001658:	4b78      	ldr	r3, [pc, #480]	; (800183c <All_Parameters_Send_Tekseferde+0x59c>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	b29b      	uxth	r3, r3
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b70      	ldr	r3, [pc, #448]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		tx_Send_OnePacket[58] =Barometer_Altitude.bytes[0];
 8001668:	4b75      	ldr	r3, [pc, #468]	; (8001840 <All_Parameters_Send_Tekseferde+0x5a0>)
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800166e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		tx_Send_OnePacket[59] =Barometer_Altitude.bytes[1];
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <All_Parameters_Send_Tekseferde+0x5a0>)
 8001674:	785a      	ldrb	r2, [r3, #1]
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001678:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		tx_Send_OnePacket[60] =Barometer_Altitude.bytes[2];
 800167c:	4b70      	ldr	r3, [pc, #448]	; (8001840 <All_Parameters_Send_Tekseferde+0x5a0>)
 800167e:	789a      	ldrb	r2, [r3, #2]
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		tx_Send_OnePacket[61] =Barometer_Altitude.bytes[3];
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <All_Parameters_Send_Tekseferde+0x5a0>)
 8001688:	78da      	ldrb	r2, [r3, #3]
 800168a:	4b66      	ldr	r3, [pc, #408]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


		tx_Send_OnePacket[62] =(uint8_t)GPS_Lattitude;
 8001690:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <All_Parameters_Send_Tekseferde+0x5a4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		tx_Send_OnePacket[63] =(uint8_t)(GPS_Lattitude >> 8);
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <All_Parameters_Send_Tekseferde+0x5a4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		tx_Send_OnePacket[64] =(uint8_t)(GPS_Lattitude >> 16);
 80016aa:	4b66      	ldr	r3, [pc, #408]	; (8001844 <All_Parameters_Send_Tekseferde+0x5a4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		tx_Send_OnePacket[65] =(uint8_t)(GPS_Lattitude >> 24);
 80016b8:	4b62      	ldr	r3, [pc, #392]	; (8001844 <All_Parameters_Send_Tekseferde+0x5a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0e1b      	lsrs	r3, r3, #24
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b58      	ldr	r3, [pc, #352]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


		tx_Send_OnePacket[66] =(uint8_t)GPS_Longtitude;
 80016c6:	4b60      	ldr	r3, [pc, #384]	; (8001848 <All_Parameters_Send_Tekseferde+0x5a8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		tx_Send_OnePacket[67] =(uint8_t)(GPS_Longtitude >> 8);
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <All_Parameters_Send_Tekseferde+0x5a8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		tx_Send_OnePacket[68] =(uint8_t)(GPS_Longtitude >> 16);
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <All_Parameters_Send_Tekseferde+0x5a8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		tx_Send_OnePacket[69] =(uint8_t)(GPS_Longtitude >> 24);
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <All_Parameters_Send_Tekseferde+0x5a8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0e1b      	lsrs	r3, r3, #24
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80016f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45


		tx_Send_OnePacket[70] =gyrox_errorbytes.bytes[0];  		// burada da 4 byte şeklinde c# a gönderiyoruz.
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <All_Parameters_Send_Tekseferde+0x5ac>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		tx_Send_OnePacket[71] =gyrox_errorbytes.bytes[1];
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <All_Parameters_Send_Tekseferde+0x5ac>)
 8001708:	785a      	ldrb	r2, [r3, #1]
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800170c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		tx_Send_OnePacket[72] =gyrox_errorbytes.bytes[2];
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <All_Parameters_Send_Tekseferde+0x5ac>)
 8001712:	789a      	ldrb	r2, [r3, #2]
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001716:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		tx_Send_OnePacket[73] =gyrox_errorbytes.bytes[3];
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <All_Parameters_Send_Tekseferde+0x5ac>)
 800171c:	78da      	ldrb	r2, [r3, #3]
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001720:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		tx_Send_OnePacket[74]  =gyroy_errorbytes.bytes[0];
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <All_Parameters_Send_Tekseferde+0x5b0>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800172a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		tx_Send_OnePacket[75]  =gyroy_errorbytes.bytes[1];
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <All_Parameters_Send_Tekseferde+0x5b0>)
 8001730:	785a      	ldrb	r2, [r3, #1]
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001734:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		tx_Send_OnePacket[76]  =gyroy_errorbytes.bytes[2];
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <All_Parameters_Send_Tekseferde+0x5b0>)
 800173a:	789a      	ldrb	r2, [r3, #2]
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800173e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		tx_Send_OnePacket[77]  =gyroy_errorbytes.bytes[3];
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <All_Parameters_Send_Tekseferde+0x5b0>)
 8001744:	78da      	ldrb	r2, [r3, #3]
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001748:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

		tx_Send_OnePacket[78] =gyroz_errorbytes.bytes[0];
 800174c:	4b41      	ldr	r3, [pc, #260]	; (8001854 <All_Parameters_Send_Tekseferde+0x5b4>)
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001752:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		tx_Send_OnePacket[79] =gyroz_errorbytes.bytes[1];
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <All_Parameters_Send_Tekseferde+0x5b4>)
 8001758:	785a      	ldrb	r2, [r3, #1]
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800175c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		tx_Send_OnePacket[80] =gyroz_errorbytes.bytes[2];
 8001760:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <All_Parameters_Send_Tekseferde+0x5b4>)
 8001762:	789a      	ldrb	r2, [r3, #2]
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		tx_Send_OnePacket[81] =gyroz_errorbytes.bytes[3];
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <All_Parameters_Send_Tekseferde+0x5b4>)
 800176c:	78da      	ldrb	r2, [r3, #3]
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51



		tx_Send_OnePacket[82] =Pitch_intgral.bytes[0];
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <All_Parameters_Send_Tekseferde+0x5b8>)
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800177a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		tx_Send_OnePacket[83] =Pitch_intgral.bytes[1];
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <All_Parameters_Send_Tekseferde+0x5b8>)
 8001780:	785a      	ldrb	r2, [r3, #1]
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001784:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		tx_Send_OnePacket[84] =Pitch_intgral.bytes[2];
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <All_Parameters_Send_Tekseferde+0x5b8>)
 800178a:	789a      	ldrb	r2, [r3, #2]
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800178e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_Send_OnePacket[85] =Pitch_intgral.bytes[3];
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <All_Parameters_Send_Tekseferde+0x5b8>)
 8001794:	78da      	ldrb	r2, [r3, #3]
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001798:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		tx_Send_OnePacket[86] =Roll_intgral.bytes[0];
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <All_Parameters_Send_Tekseferde+0x5bc>)
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		tx_Send_OnePacket[87] =Roll_intgral.bytes[1];
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <All_Parameters_Send_Tekseferde+0x5bc>)
 80017a8:	785a      	ldrb	r2, [r3, #1]
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017ac:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		tx_Send_OnePacket[88] =Roll_intgral.bytes[2];
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <All_Parameters_Send_Tekseferde+0x5bc>)
 80017b2:	789a      	ldrb	r2, [r3, #2]
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		tx_Send_OnePacket[89] =Roll_intgral.bytes[3];
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <All_Parameters_Send_Tekseferde+0x5bc>)
 80017bc:	78da      	ldrb	r2, [r3, #3]
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

		tx_Send_OnePacket[90] =Yaw_intgral.bytes[0];
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <All_Parameters_Send_Tekseferde+0x5c0>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017ca:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		tx_Send_OnePacket[91] =Yaw_intgral.bytes[1];
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <All_Parameters_Send_Tekseferde+0x5c0>)
 80017d0:	785a      	ldrb	r2, [r3, #1]
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017d4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		tx_Send_OnePacket[92] =Yaw_intgral.bytes[2];
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <All_Parameters_Send_Tekseferde+0x5c0>)
 80017da:	789a      	ldrb	r2, [r3, #2]
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		tx_Send_OnePacket[93] =Yaw_intgral.bytes[3];
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <All_Parameters_Send_Tekseferde+0x5c0>)
 80017e4:	78da      	ldrb	r2, [r3, #3]
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d



		tx_Send_OnePacket[94] =Pitch_ControlSignal.bytes[0];
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <All_Parameters_Send_Tekseferde+0x5c4>)
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		tx_Send_OnePacket[95] =Pitch_ControlSignal.bytes[1];
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <All_Parameters_Send_Tekseferde+0x5c4>)
 80017f8:	785a      	ldrb	r2, [r3, #1]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 80017fc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
		tx_Send_OnePacket[96] =Pitch_ControlSignal.bytes[2];
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <All_Parameters_Send_Tekseferde+0x5c4>)
 8001802:	789a      	ldrb	r2, [r3, #2]
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001806:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		tx_Send_OnePacket[97] =Pitch_ControlSignal.bytes[3];
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <All_Parameters_Send_Tekseferde+0x5c4>)
 800180c:	78da      	ldrb	r2, [r3, #3]
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 8001810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61


		tx_Send_OnePacket[98] =Roll_ControlSignal.bytes[0];
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <All_Parameters_Send_Tekseferde+0x5c8>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <All_Parameters_Send_Tekseferde+0x584>)
 800181a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		tx_Send_OnePacket[99] =Roll_ControlSignal.bytes[1];
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <All_Parameters_Send_Tekseferde+0x5c8>)
 8001820:	785a      	ldrb	r2, [r3, #1]
 8001822:	e023      	b.n	800186c <All_Parameters_Send_Tekseferde+0x5cc>
 8001824:	20000280 	.word	0x20000280
 8001828:	20000740 	.word	0x20000740
 800182c:	2000074c 	.word	0x2000074c
 8001830:	20000002 	.word	0x20000002
 8001834:	20000004 	.word	0x20000004
 8001838:	20000006 	.word	0x20000006
 800183c:	20000008 	.word	0x20000008
 8001840:	200007d0 	.word	0x200007d0
 8001844:	20000010 	.word	0x20000010
 8001848:	20000014 	.word	0x20000014
 800184c:	200006b4 	.word	0x200006b4
 8001850:	20000618 	.word	0x20000618
 8001854:	20000580 	.word	0x20000580
 8001858:	200006d8 	.word	0x200006d8
 800185c:	20000730 	.word	0x20000730
 8001860:	2000061c 	.word	0x2000061c
 8001864:	20000550 	.word	0x20000550
 8001868:	200006d4 	.word	0x200006d4
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800186e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		tx_Send_OnePacket[100] =Roll_ControlSignal.bytes[2];
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <All_Parameters_Send_Tekseferde+0x6f8>)
 8001874:	789a      	ldrb	r2, [r3, #2]
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001878:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		tx_Send_OnePacket[101] =Roll_ControlSignal.bytes[3];
 800187c:	4b46      	ldr	r3, [pc, #280]	; (8001998 <All_Parameters_Send_Tekseferde+0x6f8>)
 800187e:	78da      	ldrb	r2, [r3, #3]
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001882:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

		tx_Send_OnePacket[102] =Yaw_ControlSignal.bytes[0];
 8001886:	4b45      	ldr	r3, [pc, #276]	; (800199c <All_Parameters_Send_Tekseferde+0x6fc>)
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800188c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		tx_Send_OnePacket[103] =Yaw_ControlSignal.bytes[1];
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <All_Parameters_Send_Tekseferde+0x6fc>)
 8001892:	785a      	ldrb	r2, [r3, #1]
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001896:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		tx_Send_OnePacket[104] =Yaw_ControlSignal.bytes[2];
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <All_Parameters_Send_Tekseferde+0x6fc>)
 800189c:	789a      	ldrb	r2, [r3, #2]
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		tx_Send_OnePacket[105] =Yaw_ControlSignal.bytes[3];
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <All_Parameters_Send_Tekseferde+0x6fc>)
 80018a6:	78da      	ldrb	r2, [r3, #3]
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69


		tx_Send_OnePacket[106] =Heading.bytes[0];
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <All_Parameters_Send_Tekseferde+0x700>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	4b38      	ldr	r3, [pc, #224]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		tx_Send_OnePacket[107] =Heading.bytes[1];
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <All_Parameters_Send_Tekseferde+0x700>)
 80018ba:	785a      	ldrb	r2, [r3, #1]
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018be:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
		tx_Send_OnePacket[108] =Heading.bytes[2];
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <All_Parameters_Send_Tekseferde+0x700>)
 80018c4:	789a      	ldrb	r2, [r3, #2]
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		tx_Send_OnePacket[109] =Heading.bytes[3];
 80018cc:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <All_Parameters_Send_Tekseferde+0x700>)
 80018ce:	78da      	ldrb	r2, [r3, #3]
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018d2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

		tx_Send_OnePacket[110] =(uint8_t)KumandaOnOff;
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <All_Parameters_Send_Tekseferde+0x704>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018e0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		tx_Send_OnePacket[111] =(uint8_t)(KumandaOnOff >> 8 );
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <All_Parameters_Send_Tekseferde+0x704>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	121b      	asrs	r3, r3, #8
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 80018f2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

		tx_Send_OnePacket[112] =(uint8_t)KumandaFailsafe;
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <All_Parameters_Send_Tekseferde+0x708>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		tx_Send_OnePacket[113] =(uint8_t)(KumandaFailsafe >> 8 );
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <All_Parameters_Send_Tekseferde+0x708>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	121b      	asrs	r3, r3, #8
 800190c:	b21b      	sxth	r3, r3
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001912:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

		tx_Send_OnePacket[114] =Altitude_ControlSignal.bytes[0];
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <All_Parameters_Send_Tekseferde+0x70c>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800191c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		tx_Send_OnePacket[115] =Altitude_ControlSignal.bytes[1];
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <All_Parameters_Send_Tekseferde+0x70c>)
 8001922:	785a      	ldrb	r2, [r3, #1]
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001926:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		tx_Send_OnePacket[116] =Altitude_ControlSignal.bytes[2];
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <All_Parameters_Send_Tekseferde+0x70c>)
 800192c:	789a      	ldrb	r2, [r3, #2]
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		tx_Send_OnePacket[117] =Altitude_ControlSignal.bytes[3];
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <All_Parameters_Send_Tekseferde+0x70c>)
 8001936:	78da      	ldrb	r2, [r3, #3]
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800193a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

		tx_Send_OnePacket[118] =Altitude_integral.bytes[0];
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <All_Parameters_Send_Tekseferde+0x710>)
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001944:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tx_Send_OnePacket[119] =Altitude_integral.bytes[1];
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <All_Parameters_Send_Tekseferde+0x710>)
 800194a:	785a      	ldrb	r2, [r3, #1]
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800194e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tx_Send_OnePacket[120] =Altitude_integral.bytes[2];
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <All_Parameters_Send_Tekseferde+0x710>)
 8001954:	789a      	ldrb	r2, [r3, #2]
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		tx_Send_OnePacket[121] =Altitude_integral.bytes[3];
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <All_Parameters_Send_Tekseferde+0x710>)
 800195e:	78da      	ldrb	r2, [r3, #3]
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001962:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

		tx_Send_OnePacket[122] = error_flag;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <All_Parameters_Send_Tekseferde+0x714>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800196e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		tx_Send_OnePacket[123] = error_flag >> 8 ;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <All_Parameters_Send_Tekseferde+0x714>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	121b      	asrs	r3, r3, #8
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 800197c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

		tx_Send_OnePacket[124]= packet_header_end_char;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <All_Parameters_Send_Tekseferde+0x718>)
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <All_Parameters_Send_Tekseferde+0x6f4>)
 8001986:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c


}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000280 	.word	0x20000280
 8001998:	200006d4 	.word	0x200006d4
 800199c:	200007b4 	.word	0x200007b4
 80019a0:	200007f8 	.word	0x200007f8
 80019a4:	20000070 	.word	0x20000070
 80019a8:	20000072 	.word	0x20000072
 80019ac:	200006c0 	.word	0x200006c0
 80019b0:	2000073c 	.word	0x2000073c
 80019b4:	20000314 	.word	0x20000314
 80019b8:	2000027c 	.word	0x2000027c

080019bc <Error_Flag_Function>:
static void Error_Flag_Function(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0


			if(sayac == 0)
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <Error_Flag_Function+0x14>
			{
				Error_Flag_Buffer1 = gyrox;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <Error_Flag_Function+0x90>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <Error_Flag_Function+0x94>)
 80019ce:	6013      	str	r3, [r2, #0]

			}
			if(sayac == 1)
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <Error_Flag_Function+0x24>
			{
				Error_Flag_Buffer2 = gyrox;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <Error_Flag_Function+0x90>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <Error_Flag_Function+0x98>)
 80019de:	6013      	str	r3, [r2, #0]

			}
			sayac++;
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019ea:	701a      	strb	r2, [r3, #0]
			if(sayac == 3)
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d106      	bne.n	8001a02 <Error_Flag_Function+0x46>
			{
				Error_Flag_Buffer3 = gyrox;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <Error_Flag_Function+0x90>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <Error_Flag_Function+0x9c>)
 80019fa:	6013      	str	r3, [r2, #0]
				sayac = 0 ;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <Error_Flag_Function+0x8c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
			}
			if (Error_Flag_Buffer3 == Error_Flag_Buffer1)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <Error_Flag_Function+0x9c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <Error_Flag_Function+0x94>)
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f89f 	bl	8000b50 <__aeabi_fcmpeq>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <Error_Flag_Function+0x68>
			{
				Error_Flag = 1 ;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <Error_Flag_Function+0xa0>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	801a      	strh	r2, [r3, #0]
				error_flag = 1 ;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <Error_Flag_Function+0xa4>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
			}
			if (Error_Flag_Buffer3 != Error_Flag_Buffer1 )
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <Error_Flag_Function+0x9c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <Error_Flag_Function+0x94>)
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f88e 	bl	8000b50 <__aeabi_fcmpeq>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d000      	beq.n	8001a3c <Error_Flag_Function+0x80>
			{
				error_flag = 0;
			}

}
 8001a3a:	e002      	b.n	8001a42 <Error_Flag_Function+0x86>
				error_flag = 0;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <Error_Flag_Function+0xa4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000304 	.word	0x20000304
 8001a4c:	200007e0 	.word	0x200007e0
 8001a50:	20000300 	.word	0x20000300
 8001a54:	20000074 	.word	0x20000074
 8001a58:	20000078 	.word	0x20000078
 8001a5c:	200002fe 	.word	0x200002fe
 8001a60:	20000314 	.word	0x20000314

08001a64 <Button_Kontrol_Function>:
static void Button_Kontrol_Function(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	button_valueon= HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8001a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6c:	482b      	ldr	r0, [pc, #172]	; (8001b1c <Button_Kontrol_Function+0xb8>)
 8001a6e:	f000 fea7 	bl	80027c0 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <Button_Kontrol_Function+0xbc>)
 8001a78:	601a      	str	r2, [r3, #0]
		  	button_valuesag=HAL_GPIO_ReadPin(button_sag_GPIO_Port,button_sag_Pin);
 8001a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7e:	4827      	ldr	r0, [pc, #156]	; (8001b1c <Button_Kontrol_Function+0xb8>)
 8001a80:	f000 fe9e 	bl	80027c0 <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <Button_Kontrol_Function+0xc0>)
 8001a8a:	601a      	str	r2, [r3, #0]
		  	button_valuesol=HAL_GPIO_ReadPin(button_sol_GPIO_Port,button_sol_Pin);
 8001a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a90:	4822      	ldr	r0, [pc, #136]	; (8001b1c <Button_Kontrol_Function+0xb8>)
 8001a92:	f000 fe95 	bl	80027c0 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <Button_Kontrol_Function+0xc4>)
 8001a9c:	601a      	str	r2, [r3, #0]
		  	button_valuearka=HAL_GPIO_ReadPin(button_geri_GPIO_Port,button_geri_Pin);
 8001a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa2:	4822      	ldr	r0, [pc, #136]	; (8001b2c <Button_Kontrol_Function+0xc8>)
 8001aa4:	f000 fe8c 	bl	80027c0 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <Button_Kontrol_Function+0xcc>)
 8001aae:	601a      	str	r2, [r3, #0]
		  	if (button_valueon == 1)
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <Button_Kontrol_Function+0xbc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <Button_Kontrol_Function+0x66>
		  	{
		  		GPS_Lattitude += + 1000;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <Button_Kontrol_Function+0xd0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <Button_Kontrol_Function+0xd0>)
 8001ac2:	6013      	str	r3, [r2, #0]
		  		HAL_Delay(100);
 8001ac4:	2064      	movs	r0, #100	; 0x64
 8001ac6:	f000 fbc5 	bl	8002254 <HAL_Delay>
		  	}

		  	if (button_valuesag == 1)
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <Button_Kontrol_Function+0xc0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <Button_Kontrol_Function+0x80>
				{
					GPS_Longtitude += + 1000;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <Button_Kontrol_Function+0xd4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <Button_Kontrol_Function+0xd4>)
 8001adc:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 8001ade:	2064      	movs	r0, #100	; 0x64
 8001ae0:	f000 fbb8 	bl	8002254 <HAL_Delay>
				}

		  	if (button_valuesol == 1)
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <Button_Kontrol_Function+0xc4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <Button_Kontrol_Function+0x9a>
				{
					GPS_Longtitude += - 1000;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <Button_Kontrol_Function+0xd4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <Button_Kontrol_Function+0xd4>)
 8001af6:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 8001af8:	2064      	movs	r0, #100	; 0x64
 8001afa:	f000 fbab 	bl	8002254 <HAL_Delay>
				}
		  	if (button_valuearka == 1)
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <Button_Kontrol_Function+0xcc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <Button_Kontrol_Function+0xb4>
				{
		  			GPS_Lattitude += - 1000;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <Button_Kontrol_Function+0xd0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <Button_Kontrol_Function+0xd0>)
 8001b10:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f000 fb9e 	bl	8002254 <HAL_Delay>
				}

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40010800 	.word	0x40010800
 8001b20:	20000764 	.word	0x20000764
 8001b24:	200007b8 	.word	0x200007b8
 8001b28:	200007b0 	.word	0x200007b0
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	200007d4 	.word	0x200007d4
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000014 	.word	0x20000014

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f000 fb26 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b44:	f000 f86c 	bl	8001c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b48:	f000 f990 	bl	8001e6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001b4c:	f008 fb68 	bl	800a220 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001b50:	f000 f8c6 	bl	8001ce0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001b54:	f000 f8f2 	bl	8001d3c <MX_RTC_Init>
  MX_TIM2_Init();
 8001b58:	f000 f93a 	bl	8001dd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  	HAL_TIM_Base_Start_IT(&htim2);
 8001b5c:	4822      	ldr	r0, [pc, #136]	; (8001be8 <main+0xac>)
 8001b5e:	f004 fb87 	bl	8006270 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	Error_Flag_Function();
 8001b62:	f7ff ff2b 	bl	80019bc <Error_Flag_Function>

	  	if(Error_Flag)
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <main+0xb0>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <main+0x3c>
	  	{
	  		MX_I2C1_Init();
 8001b6e:	f000 f8b7 	bl	8001ce0 <MX_I2C1_Init>
	  		Error_Flag = 0;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <main+0xb0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	801a      	strh	r2, [r3, #0]
	  	}



	  	MPU6050_Init();
 8001b78:	f7ff f81c 	bl	8000bb4 <MPU6050_Init>
	  	MPU6050_Read_Accel();
 8001b7c:	f7ff f870 	bl	8000c60 <MPU6050_Read_Accel>
	  	MPU6050_Read_Gyro();
 8001b80:	f7ff f982 	bl	8000e88 <MPU6050_Read_Gyro>

		gyrox=Roll_Accelometer;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <main+0xb4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <main+0xb8>)
 8001b8a:	6013      	str	r3, [r2, #0]
		gyroy=Pitch_Accelometer;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <main+0xbc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <main+0xc0>)
 8001b92:	6013      	str	r3, [r2, #0]


		packet_header_end_char = ((packet_header_s1_char * packet_header_s2_char) + (KumandaOnOff * KumandaFailsafe) + (21+07+97)  + (Motor1_Duty + Motor3_Duty)) / 100 ;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <main+0xc4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <main+0xc8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <main+0xcc>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <main+0xd0>)
 8001bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb0:	fb03 f301 	mul.w	r3, r3, r1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <main+0xd4>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <main+0xd8>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	440b      	add	r3, r1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <main+0xdc>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1152      	asrs	r2, r2, #5
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <main+0xe0>)
 8001bd8:	701a      	strb	r2, [r3, #0]




		Button_Kontrol_Function();
 8001bda:	f7ff ff43 	bl	8001a64 <Button_Kontrol_Function>
	  	Parameter_Receive_PC();				//PID değerlerini c# üzerinden alan fonksiyon.
 8001bde:	f7ff f9d1 	bl	8000f84 <Parameter_Receive_PC>
	  	Parameter_Transmit_PC();			//Parametreleri Transmit eden fonksiyon.
 8001be2:	f7ff fb4d 	bl	8001280 <Parameter_Transmit_PC>
	  	Error_Flag_Function();
 8001be6:	e7bc      	b.n	8001b62 <main+0x26>
 8001be8:	20000768 	.word	0x20000768
 8001bec:	200002fe 	.word	0x200002fe
 8001bf0:	20000758 	.word	0x20000758
 8001bf4:	200007e0 	.word	0x200007e0
 8001bf8:	200006b8 	.word	0x200006b8
 8001bfc:	200007fc 	.word	0x200007fc
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000001 	.word	0x20000001
 8001c08:	20000070 	.word	0x20000070
 8001c0c:	20000072 	.word	0x20000072
 8001c10:	20000002 	.word	0x20000002
 8001c14:	20000006 	.word	0x20000006
 8001c18:	51eb851f 	.word	0x51eb851f
 8001c1c:	2000027c 	.word	0x2000027c

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b094      	sub	sp, #80	; 0x50
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	2228      	movs	r2, #40	; 0x28
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f008 ffd4 	bl	800abdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c50:	2309      	movs	r3, #9
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c62:	2301      	movs	r3, #1
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c66:	2302      	movs	r3, #2
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 f986 	bl	8004f8c <HAL_RCC_OscConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c86:	f000 f957 	bl	8001f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fbf0 	bl	800548c <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cb2:	f000 f941 	bl	8001f38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8001cb6:	2311      	movs	r3, #17
 8001cb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fd7a 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001cd2:	f000 f931 	bl	8001f38 <Error_Handler>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3750      	adds	r7, #80	; 0x50
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <MX_I2C1_Init+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_I2C1_Init+0x58>)
 8001cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d1e:	f000 fd97 	bl	8002850 <HAL_I2C_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d28:	f000 f906 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000590 	.word	0x20000590
 8001d34:	40005400 	.word	0x40005400
 8001d38:	00061a80 	.word	0x00061a80

08001d3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2100      	movs	r1, #0
 8001d46:	460a      	mov	r2, r1
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <MX_RTC_Init+0x90>)
 8001d56:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d66:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d68:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001d6a:	f003 fea3 	bl	8005ab4 <HAL_RTC_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001d74:	f000 f8e0 	bl	8001f38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8001d78:	230d      	movs	r3, #13
 8001d7a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 17;
 8001d7c:	2311      	movs	r3, #17
 8001d7e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001d8c:	f003 ff28 	bl	8005be0 <HAL_RTC_SetTime>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001d96:	f000 f8cf 	bl	8001f38 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 28;
 8001da2:	231c      	movs	r3, #28
 8001da4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 8001da6:	2315      	movs	r3, #21
 8001da8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_RTC_Init+0x8c>)
 8001db2:	f003 ffad 	bl	8005d10 <HAL_RTC_SetDate>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001dbc:	f000 f8bc 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000704 	.word	0x20000704
 8001dcc:	40002800 	.word	0x40002800

08001dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e18:	f004 f9da 	bl	80061d0 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e22:	f000 f889 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e34:	f004 fb76 	bl	8006524 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e3e:	f000 f87b 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e50:	f004 fd52 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e5a:	f000 f86d 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000768 	.word	0x20000768

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001e86:	f043 0320 	orr.w	r3, r3, #32
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001eb6:	f043 0308 	orr.w	r3, r3, #8
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <MX_GPIO_Init+0xc0>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2106      	movs	r1, #6
 8001ecc:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_GPIO_Init+0xc4>)
 8001ece:	f000 fc8e 	bl	80027ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4811      	ldr	r0, [pc, #68]	; (8001f30 <MX_GPIO_Init+0xc4>)
 8001eea:	f000 fae5 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_geri_Pin */
  GPIO_InitStruct.Pin = button_geri_Pin;
 8001eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_geri_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_GPIO_Init+0xc8>)
 8001f04:	f000 fad8 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_Pin button_sol_Pin button_sag_Pin */
  GPIO_InitStruct.Pin = button_Pin|button_sol_Pin|button_sag_Pin;
 8001f08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <MX_GPIO_Init+0xc4>)
 8001f1e:	f000 facb 	bl	80024b8 <HAL_GPIO_Init>

}
 8001f22:	bf00      	nop
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <Error_Handler+0x8>
	...

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6193      	str	r3, [r2, #24]
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_MspInit+0x60>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_MspInit+0x60>)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_I2C_MspInit+0x70>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d123      	bne.n	8002010 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_I2C_MspInit+0x74>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_I2C_MspInit+0x74>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_I2C_MspInit+0x74>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <HAL_I2C_MspInit+0x78>)
 8001ff4:	f000 fa60 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_I2C_MspInit+0x74>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_I2C_MspInit+0x74>)
 8001ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002002:	61d3      	str	r3, [r2, #28]
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_I2C_MspInit+0x74>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40005400 	.word	0x40005400
 800201c:	40021000 	.word	0x40021000
 8002020:	40010c00 	.word	0x40010c00

08002024 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RTC_MspInit+0x3c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d110      	bne.n	8002058 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002036:	f002 ff9d 	bl	8004f74 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RTC_MspInit+0x40>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RTC_MspInit+0x40>)
 8002040:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_RTC_MspInit+0x40>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RTC_MspInit+0x44>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40002800 	.word	0x40002800
 8002064:	40021000 	.word	0x40021000
 8002068:	4242043c 	.word	0x4242043c

0800206c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d113      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_TIM_Base_MspInit+0x44>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <HAL_TIM_Base_MspInit+0x44>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_TIM_Base_MspInit+0x44>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	201c      	movs	r0, #28
 800209c:	f000 f9d5 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a0:	201c      	movs	r0, #28
 80020a2:	f000 f9ee 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <NMI_Handler+0x4>

080020ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <MemManage_Handler+0x4>

080020c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
	//MPU6050_Init();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fa:	f000 f88f 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //MPU6050_Init();

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800210a:	f001 fcd2 	bl	8003ab2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20001498 	.word	0x20001498

08002118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <TIM2_IRQHandler+0x18>)
 800211e:	f004 f8f9 	bl	8006314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //MPU6050_Init();
  //MPU6050_Read_Accel();
  //MPU6050_Read_Gyro();

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002122:	2102      	movs	r1, #2
 8002124:	4803      	ldr	r0, [pc, #12]	; (8002134 <TIM2_IRQHandler+0x1c>)
 8002126:	f000 fb7a 	bl	800281e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000768 	.word	0x20000768
 8002134:	40010800 	.word	0x40010800

08002138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <Reset_Handler>:
 8002144:	2100      	movs	r1, #0
 8002146:	e003      	b.n	8002150 <LoopCopyDataInit>

08002148 <CopyDataInit>:
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <LoopFillZerobss+0x14>)
 800214a:	585b      	ldr	r3, [r3, r1]
 800214c:	5043      	str	r3, [r0, r1]
 800214e:	3104      	adds	r1, #4

08002150 <LoopCopyDataInit>:
 8002150:	480a      	ldr	r0, [pc, #40]	; (800217c <LoopFillZerobss+0x18>)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <LoopFillZerobss+0x1c>)
 8002154:	1842      	adds	r2, r0, r1
 8002156:	429a      	cmp	r2, r3
 8002158:	d3f6      	bcc.n	8002148 <CopyDataInit>
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <LoopFillZerobss+0x20>)
 800215c:	e002      	b.n	8002164 <LoopFillZerobss>

0800215e <FillZerobss>:
 800215e:	2300      	movs	r3, #0
 8002160:	f842 3b04 	str.w	r3, [r2], #4

08002164 <LoopFillZerobss>:
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <LoopFillZerobss+0x24>)
 8002166:	429a      	cmp	r2, r3
 8002168:	d3f9      	bcc.n	800215e <FillZerobss>
 800216a:	f7ff ffe5 	bl	8002138 <SystemInit>
 800216e:	f008 fd03 	bl	800ab78 <__libc_init_array>
 8002172:	f7ff fce3 	bl	8001b3c <main>
 8002176:	4770      	bx	lr
 8002178:	0800bfa8 	.word	0x0800bfa8
 800217c:	20000000 	.word	0x20000000
 8002180:	20000260 	.word	0x20000260
 8002184:	20000260 	.word	0x20000260
 8002188:	20001784 	.word	0x20001784

0800218c <ADC1_2_IRQHandler>:
 800218c:	e7fe      	b.n	800218c <ADC1_2_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x28>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f947 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff feca 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f95f 	bl	800249e <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 f927 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000007c 	.word	0x2000007c
 8002214:	20000084 	.word	0x20000084
 8002218:	20000080 	.word	0x20000080

0800221c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_IncTick+0x1c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_IncTick+0x20>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a03      	ldr	r2, [pc, #12]	; (800223c <HAL_IncTick+0x20>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000084 	.word	0x20000084
 800223c:	20000800 	.word	0x20000800

08002240 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b02      	ldr	r3, [pc, #8]	; (8002250 <HAL_GetTick+0x10>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000800 	.word	0x20000800

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fff0 	bl	8002240 <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffe0 	bl	8002240 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000084 	.word	0x20000084

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <__NVIC_EnableIRQ+0x34>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff2d 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff42 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff35 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e169      	b.n	80027a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024cc:	2201      	movs	r2, #1
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8158 	bne.w	800279a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a9a      	ldr	r2, [pc, #616]	; (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 80024f4:	4a98      	ldr	r2, [pc, #608]	; (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d875      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 80024fa:	4a98      	ldr	r2, [pc, #608]	; (800275c <HAL_GPIO_Init+0x2a4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d058      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002500:	4a96      	ldr	r2, [pc, #600]	; (800275c <HAL_GPIO_Init+0x2a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d86f      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002506:	4a96      	ldr	r2, [pc, #600]	; (8002760 <HAL_GPIO_Init+0x2a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d052      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 800250c:	4a94      	ldr	r2, [pc, #592]	; (8002760 <HAL_GPIO_Init+0x2a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d869      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002512:	4a94      	ldr	r2, [pc, #592]	; (8002764 <HAL_GPIO_Init+0x2ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04c      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002518:	4a92      	ldr	r2, [pc, #584]	; (8002764 <HAL_GPIO_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d863      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800251e:	4a92      	ldr	r2, [pc, #584]	; (8002768 <HAL_GPIO_Init+0x2b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d046      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002524:	4a90      	ldr	r2, [pc, #576]	; (8002768 <HAL_GPIO_Init+0x2b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d85d      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800252a:	2b12      	cmp	r3, #18
 800252c:	d82a      	bhi.n	8002584 <HAL_GPIO_Init+0xcc>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d859      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_GPIO_Init+0x80>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	080025b3 	.word	0x080025b3
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800259f 	.word	0x0800259f
 8002544:	080025e1 	.word	0x080025e1
 8002548:	080025e7 	.word	0x080025e7
 800254c:	080025e7 	.word	0x080025e7
 8002550:	080025e7 	.word	0x080025e7
 8002554:	080025e7 	.word	0x080025e7
 8002558:	080025e7 	.word	0x080025e7
 800255c:	080025e7 	.word	0x080025e7
 8002560:	080025e7 	.word	0x080025e7
 8002564:	080025e7 	.word	0x080025e7
 8002568:	080025e7 	.word	0x080025e7
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025e7 	.word	0x080025e7
 8002574:	080025e7 	.word	0x080025e7
 8002578:	080025e7 	.word	0x080025e7
 800257c:	08002595 	.word	0x08002595
 8002580:	080025a9 	.word	0x080025a9
 8002584:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_GPIO_Init+0x2b4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258a:	e02c      	b.n	80025e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e029      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	3304      	adds	r3, #4
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e024      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e01f      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	330c      	adds	r3, #12
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e01a      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ba:	2304      	movs	r3, #4
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e013      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	611a      	str	r2, [r3, #16]
          break;
 80025d2:	e009      	b.n	80025e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d4:	2308      	movs	r3, #8
 80025d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	615a      	str	r2, [r3, #20]
          break;
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          break;
 80025e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2bff      	cmp	r3, #255	; 0xff
 80025ec:	d801      	bhi.n	80025f2 <HAL_GPIO_Init+0x13a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_Init+0x13e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d802      	bhi.n	8002604 <HAL_GPIO_Init+0x14c>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x152>
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3b08      	subs	r3, #8
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	210f      	movs	r1, #15
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b1 	beq.w	800279a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002638:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2bc>)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <HAL_GPIO_Init+0x2c0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3f      	ldr	r2, [pc, #252]	; (800277c <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <HAL_GPIO_Init+0x2c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <HAL_GPIO_Init+0x2cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1e0>
 8002694:	2303      	movs	r3, #3
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 8002698:	2304      	movs	r3, #4
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a4:	2300      	movs	r3, #0
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b6:	492f      	ldr	r1, [pc, #188]	; (8002774 <HAL_GPIO_Init+0x2bc>)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	492c      	ldr	r1, [pc, #176]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4928      	ldr	r1, [pc, #160]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4922      	ldr	r1, [pc, #136]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	491e      	ldr	r1, [pc, #120]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002710:	4013      	ands	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4918      	ldr	r1, [pc, #96]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	43db      	mvns	r3, r3
 8002736:	4914      	ldr	r1, [pc, #80]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002738:	4013      	ands	r3, r2
 800273a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d021      	beq.n	800278c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
 8002754:	e021      	b.n	800279a <HAL_GPIO_Init+0x2e2>
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40011400 	.word	0x40011400
 8002788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_GPIO_Init+0x304>)
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	43db      	mvns	r3, r3
 8002794:	4909      	ldr	r1, [pc, #36]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002796:	4013      	ands	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	3301      	adds	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f ae8e 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	372c      	adds	r7, #44	; 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e001      	b.n	80027e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]
 80027fa:	4613      	mov	r3, r2
 80027fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fe:	787b      	ldrb	r3, [r7, #1]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002804:	887a      	ldrh	r2, [r7, #2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800280a:	e003      	b.n	8002814 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	041a      	lsls	r2, r3, #16
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43d9      	mvns	r1, r3
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	400b      	ands	r3, r1
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e12b      	b.n	8002aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fb96 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b4:	f002 ff3e 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a81      	ldr	r2, [pc, #516]	; (8002ac4 <HAL_I2C_Init+0x274>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d807      	bhi.n	80028d4 <HAL_I2C_Init+0x84>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_I2C_Init+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x92>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7d      	ldr	r2, [pc, #500]	; (8002acc <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e7      	b.n	8002aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <HAL_I2C_Init+0x280>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_I2C_Init+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d802      	bhi.n	8002924 <HAL_I2C_Init+0xd4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	e009      	b.n	8002938 <HAL_I2C_Init+0xe8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_I2C_Init+0x284>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_I2C_Init+0x274>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d819      	bhi.n	800298c <HAL_I2C_Init+0x13c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e59      	subs	r1, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb1 f3f3 	udiv	r3, r1, r3
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800296c:	400b      	ands	r3, r1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_I2C_Init+0x138>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	e051      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e04f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_I2C_Init+0x168>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_I2C_Init+0x18e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x196>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_Init+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e58      	subs	r0, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6911      	ldr	r1, [r2, #16]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	000186a0 	.word	0x000186a0
 8002ac8:	001e847f 	.word	0x001e847f
 8002acc:	003d08ff 	.word	0x003d08ff
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af2:	f7ff fba5 	bl	8002240 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 80d9 	bne.w	8002cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	496d      	ldr	r1, [pc, #436]	; (8002cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fcc1 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0cc      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Mem_Write+0x56>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0c5      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d007      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2221      	movs	r2, #33	; 0x21
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 faf8 	bl	800319c <I2C_RequestMemoryWrite>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d052      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e081      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fd42 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_I2C_Mem_Write+0x180>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1aa      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fd2e 	bl	80036c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e016      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	00100002 	.word	0x00100002
 8002cc8:	ffff0000 	.word	0xffff0000

08002ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7ff faa9 	bl	8002240 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 8244 	bne.w	8003186 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2319      	movs	r3, #25
 8002d04:	2201      	movs	r2, #1
 8002d06:	4982      	ldr	r1, [pc, #520]	; (8002f10 <HAL_I2C_Mem_Read+0x244>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fbc5 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
 8002d16:	e237      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x5a>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e230      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d007      	beq.n	8002d4c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2222      	movs	r2, #34	; 0x22
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a62      	ldr	r2, [pc, #392]	; (8002f14 <HAL_I2C_Mem_Read+0x248>)
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d8e:	88f8      	ldrh	r0, [r7, #6]
 8002d90:	893a      	ldrh	r2, [r7, #8]
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fa92 	bl	80032c8 <I2C_RequestMemoryRead>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1ec      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e1c0      	b.n	8003160 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d11e      	bne.n	8002e24 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002df6:	b672      	cpsid	i
}
 8002df8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e20:	b662      	cpsie	i
}
 8002e22:	e035      	b.n	8002e90 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d11e      	bne.n	8002e6a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e66:	b662      	cpsie	i
}
 8002e68:	e012      	b.n	8002e90 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e90:	e166      	b.n	8003160 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	f200 811f 	bhi.w	80030da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d123      	bne.n	8002eec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fc4d 	bl	8003748 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e167      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eea:	e139      	b.n	8003160 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d152      	bne.n	8002f9a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	2200      	movs	r2, #0
 8002efc:	4906      	ldr	r1, [pc, #24]	; (8002f18 <HAL_I2C_Mem_Read+0x24c>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 faca 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e13c      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
 8002f0e:	bf00      	nop
 8002f10:	00100002 	.word	0x00100002
 8002f14:	ffff0000 	.word	0xffff0000
 8002f18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f62:	b662      	cpsie	i
}
 8002f64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f98:	e0e2      	b.n	8003160 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	497b      	ldr	r1, [pc, #492]	; (8003190 <HAL_I2C_Mem_Read+0x4c4>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fa77 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0e9      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc4:	b672      	cpsid	i
}
 8002fc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ffa:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_I2C_Mem_Read+0x4c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	08db      	lsrs	r3, r3, #3
 8003000:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_I2C_Mem_Read+0x4cc>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0a1a      	lsrs	r2, r3, #8
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00da      	lsls	r2, r3, #3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	3b01      	subs	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d118      	bne.n	8003052 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003042:	b662      	cpsie	i
}
 8003044:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e09a      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d1d9      	bne.n	8003014 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030a2:	b662      	cpsie	i
}
 80030a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d8:	e042      	b.n	8003160 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fb32 	bl	8003748 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e04c      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d118      	bne.n	8003160 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f ae94 	bne.w	8002e92 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010004 	.word	0x00010004
 8003194:	2000007c 	.word	0x2000007c
 8003198:	14f8b589 	.word	0x14f8b589

0800319c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f960 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ec:	d103      	bne.n	80031f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e05f      	b.n	80032ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	492d      	ldr	r1, [pc, #180]	; (80032c4 <I2C_RequestMemoryWrite+0x128>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f998 	bl	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04c      	b.n	80032ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa02 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02b      	b.n	80032ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003268:	893b      	ldrh	r3, [r7, #8]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	e021      	b.n	80032b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003274:	893b      	ldrh	r3, [r7, #8]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29b      	uxth	r3, r3
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9dc 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e005      	b.n	80032ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ae:	893b      	ldrh	r3, [r7, #8]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	00010002 	.word	0x00010002

080032c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2200      	movs	r2, #0
 800330a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f8c2 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003328:	d103      	bne.n	8003332 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0aa      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	4952      	ldr	r1, [pc, #328]	; (8003494 <I2C_RequestMemoryRead+0x1cc>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f8fa 	bl	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e097      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f964 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e076      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	e021      	b.n	80033f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b0:	893b      	ldrh	r3, [r7, #8]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	6a39      	ldr	r1, [r7, #32]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f93e 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d107      	bne.n	80033e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e050      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f923 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e035      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2200      	movs	r2, #0
 8003438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f82b 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	d103      	bne.n	8003460 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e013      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	4906      	ldr	r1, [pc, #24]	; (8003494 <I2C_RequestMemoryRead+0x1cc>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f863 	bl	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	00010002 	.word	0x00010002

08003498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a8:	e025      	b.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d021      	beq.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe fec5 	bl	8002240 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d116      	bne.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e023      	b.n	800353e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10d      	bne.n	800351c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	43da      	mvns	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	e00c      	b.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d0b6      	beq.n	80034aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003554:	e051      	b.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003564:	d123      	bne.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0204 	orr.w	r2, r3, #4
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e046      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d021      	beq.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe fe43 	bl	8002240 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e020      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10c      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e00b      	b.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d18d      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003650:	e02d      	b.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8ce 	bl	80037f4 <I2C_IsAcknowledgeFailed>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e02d      	b.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d021      	beq.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fde9 	bl	8002240 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d1ca      	bne.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d2:	e02d      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f88d 	bl	80037f4 <I2C_IsAcknowledgeFailed>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e02d      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d021      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe fda8 	bl	8002240 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d1ca      	bne.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003754:	e042      	b.n	80037dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b10      	cmp	r3, #16
 8003762:	d119      	bne.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0210 	mvn.w	r2, #16
 800376c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e029      	b.n	80037ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fe fd52 	bl	8002240 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d1b5      	bne.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d11b      	bne.n	8003844 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003814:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b08b      	sub	sp, #44	; 0x2c
 8003854:	af06      	add	r7, sp, #24
 8003856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0fd      	b.n	8003a5e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f006 fece 	bl	800a618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f003 f8cb 	bl	8006a24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	687e      	ldr	r6, [r7, #4]
 8003896:	466d      	mov	r5, sp
 8003898:	f106 0410 	add.w	r4, r6, #16
 800389c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	1d33      	adds	r3, r6, #4
 80038a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f003 f895 	bl	80069d8 <USB_CoreInit>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0ce      	b.n	8003a5e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 f8c6 	bl	8006a58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e04c      	b.n	800396c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	440b      	add	r3, r1
 80038e2:	3301      	adds	r3, #1
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	440b      	add	r3, r1
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	b298      	uxth	r0, r3
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	3336      	adds	r3, #54	; 0x36
 8003910:	4602      	mov	r2, r0
 8003912:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	3303      	adds	r3, #3
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	3338      	adds	r3, #56	; 0x38
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	333c      	adds	r3, #60	; 0x3c
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	3340      	adds	r3, #64	; 0x40
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	3301      	adds	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3ad      	bcc.n	80038d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	3301      	adds	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3b5      	bcc.n	800397c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	687e      	ldr	r6, [r7, #4]
 8003a18:	466d      	mov	r5, sp
 8003a1a:	f106 0410 	add.w	r4, r6, #16
 8003a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	1d33      	adds	r3, r6, #4
 8003a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	f003 f820 	bl	8006a70 <USB_DevInit>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00d      	b.n	8003a5e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 ffba 	bl	80089d0 <USB_DevDisconnect>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_PCD_Start+0x16>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e016      	b.n	8003aaa <HAL_PCD_Start+0x44>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f002 ffb5 	bl	80069f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003a8e:	2101      	movs	r1, #1
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f007 f834 	bl	800aafe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 ff8e 	bl	80089bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 ff90 	bl	80089e4 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ace:	d102      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fb61 	bl	8004198 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 ff82 	bl	80089e4 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d112      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	b292      	uxth	r2, r2
 8003b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f006 fe02 	bl	800a70e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f925 	bl	8003d5c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 ff64 	bl	80089e4 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b26:	d10b      	bne.n	8003b40 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 ff4d 	bl	80089e4 <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d10b      	bne.n	8003b6e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 ff36 	bl	80089e4 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d126      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	b292      	uxth	r2, r2
 8003b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0208 	bic.w	r2, r2, #8
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f006 fde3 	bl	800a780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 ff04 	bl	80089e4 <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be6:	f040 8084 	bne.w	8003cf2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e011      	b.n	8003c14 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	441a      	add	r2, r3
 8003bfc:	7ffb      	ldrb	r3, [r7, #31]
 8003bfe:	8812      	ldrh	r2, [r2, #0]
 8003c00:	b292      	uxth	r2, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f107 0120 	add.w	r1, r7, #32
 8003c08:	440b      	add	r3, r1
 8003c0a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
 8003c10:	3301      	adds	r3, #1
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b07      	cmp	r3, #7
 8003c18:	d9ea      	bls.n	8003bf0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	b292      	uxth	r2, r2
 8003c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c4a:	bf00      	nop
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f6      	beq.n	8003c4c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c70:	b292      	uxth	r2, r2
 8003c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e010      	b.n	8003c9e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	4611      	mov	r1, r2
 8003c84:	7ffa      	ldrb	r2, [r7, #31]
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	440a      	add	r2, r1
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f107 0120 	add.w	r1, r7, #32
 8003c90:	440b      	add	r3, r1
 8003c92:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003c96:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d9eb      	bls.n	8003c7c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0204 	orr.w	r2, r2, #4
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f006 fd2d 	bl	800a74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fe74 	bl	80089e4 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d06:	d10e      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f006 fce6 	bl	800a6f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 fe5a 	bl	80089e4 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	d10b      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003d54:	bf00      	nop
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_PCD_SetAddress+0x1a>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e013      	b.n	8003d9e <HAL_PCD_SetAddress+0x42>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 fe01 	bl	8008996 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	4608      	mov	r0, r1
 8003db0:	4611      	mov	r1, r2
 8003db2:	461a      	mov	r2, r3
 8003db4:	4603      	mov	r3, r0
 8003db6:	70fb      	strb	r3, [r7, #3]
 8003db8:	460b      	mov	r3, r1
 8003dba:	803b      	strh	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	da0e      	bge.n	8003dea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	705a      	strb	r2, [r3, #1]
 8003de8:	e00e      	b.n	8003e08 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 0207 	and.w	r2, r3, #7
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e14:	883a      	ldrh	r2, [r7, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	78ba      	ldrb	r2, [r7, #2]
 8003e1e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e32:	78bb      	ldrb	r3, [r7, #2]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d102      	bne.n	8003e3e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_PCD_EP_Open+0xa6>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e00e      	b.n	8003e6a <HAL_PCD_EP_Open+0xc4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fe28 	bl	8006ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da0e      	bge.n	8003ea4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00e      	b.n	8003ec2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 0207 	and.w	r2, r3, #7
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_Close+0x6a>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_Close+0x88>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 f94a 	bl	8007184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f003 0207 	and.w	r2, r3, #7
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f003 fafc 	bl	800755c <USB_EPStartXfer>
 8003f64:	e005      	b.n	8003f72 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 faf5 	bl	800755c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	4618      	mov	r0, r3
 8004014:	f003 faa2 	bl	800755c <USB_EPStartXfer>
 8004018:	e005      	b.n	8004026 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	4618      	mov	r0, r3
 8004022:	f003 fa9b 	bl	800755c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 0207 	and.w	r2, r3, #7
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d901      	bls.n	800404e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e04c      	b.n	80040e8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800404e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	da0e      	bge.n	8004074 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	705a      	strb	r2, [r3, #1]
 8004072:	e00c      	b.n	800408e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_EP_SetStall+0x7e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e01c      	b.n	80040e8 <HAL_PCD_EP_SetStall+0xb8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 fb6d 	bl	800879c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f004 fc92 	bl	8008a02 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d901      	bls.n	800410e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e040      	b.n	8004190 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800410e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da0e      	bge.n	8004134 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	705a      	strb	r2, [r3, #1]
 8004132:	e00e      	b.n	8004152 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 0207 	and.w	r2, r3, #7
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_PCD_EP_ClrStall+0x82>
 800416e:	2302      	movs	r3, #2
 8004170:	e00e      	b.n	8004190 <HAL_PCD_EP_ClrStall+0xa0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fb5b 	bl	800883c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041a0:	e2df      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041aa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80041b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8158 	bne.w	8004472 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d152      	bne.n	8004272 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	81fb      	strh	r3, [r7, #14]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3328      	adds	r3, #40	; 0x28
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fe:	b29b      	uxth	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	3302      	adds	r3, #2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	441a      	add	r2, r3
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004230:	2100      	movs	r1, #0
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f006 fa43 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 828e 	beq.w	8004762 <PCD_EP_ISR_Handler+0x5ca>
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8289 	bne.w	8004762 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800425c:	b2da      	uxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b292      	uxth	r2, r2
 8004264:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004270:	e277      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004288:	2b00      	cmp	r3, #0
 800428a:	d034      	beq.n	80042f6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	3306      	adds	r3, #6
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f004 fbe9 	bl	8008aa2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042dc:	4013      	ands	r3, r2
 80042de:	823b      	strh	r3, [r7, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	8a3a      	ldrh	r2, [r7, #16]
 80042e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ea:	b292      	uxth	r2, r2
 80042ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f006 f9b8 	bl	800a664 <HAL_PCD_SetupStageCallback>
 80042f4:	e235      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f280 8231 	bge.w	8004762 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29a      	uxth	r2, r3
 8004308:	f640 738f 	movw	r3, #3983	; 0xf8f
 800430c:	4013      	ands	r3, r2
 800430e:	83bb      	strh	r3, [r7, #28]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	8bba      	ldrh	r2, [r7, #28]
 8004316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800431a:	b292      	uxth	r2, r2
 800431c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	3306      	adds	r3, #6
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d019      	beq.n	8004386 <PCD_EP_ISR_Handler+0x1ee>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d015      	beq.n	8004386 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	6959      	ldr	r1, [r3, #20]
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800436a:	b29b      	uxth	r3, r3
 800436c:	f004 fb99 	bl	8008aa2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	441a      	add	r2, r3
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f006 f981 	bl	800a688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d112      	bne.n	80043d4 <PCD_EP_ISR_Handler+0x23c>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	e02f      	b.n	8004434 <PCD_EP_ISR_Handler+0x29c>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b3e      	cmp	r3, #62	; 0x3e
 80043da:	d813      	bhi.n	8004404 <PCD_EP_ISR_Handler+0x26c>
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <PCD_EP_ISR_Handler+0x25e>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	3301      	adds	r3, #1
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e017      	b.n	8004434 <PCD_EP_ISR_Handler+0x29c>
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <PCD_EP_ISR_Handler+0x286>
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	3b01      	subs	r3, #1
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	b29b      	uxth	r3, r3
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	b29b      	uxth	r3, r3
 8004426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442e:	b29a      	uxth	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004444:	827b      	strh	r3, [r7, #18]
 8004446:	8a7b      	ldrh	r3, [r7, #18]
 8004448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800444c:	827b      	strh	r3, [r7, #18]
 800444e:	8a7b      	ldrh	r3, [r7, #18]
 8004450:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004454:	827b      	strh	r3, [r7, #18]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	8a7b      	ldrh	r3, [r7, #18]
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
 8004470:	e177      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004484:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004488:	2b00      	cmp	r3, #0
 800448a:	f280 80ea 	bge.w	8004662 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044a4:	4013      	ands	r3, r2
 80044a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80044b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044bc:	b292      	uxth	r2, r2
 80044be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044c0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	7b1b      	ldrb	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d122      	bne.n	8004524 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	3306      	adds	r3, #6
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004506:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8087 	beq.w	800461e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	6959      	ldr	r1, [r3, #20]
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	88da      	ldrh	r2, [r3, #6]
 800451c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800451e:	f004 fac0 	bl	8008aa2 <USB_ReadPMA>
 8004522:	e07c      	b.n	800461e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	78db      	ldrb	r3, [r3, #3]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d108      	bne.n	800453e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800452c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800452e:	461a      	mov	r2, r3
 8004530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f923 	bl	800477e <HAL_PCD_EP_DB_Receive>
 8004538:	4603      	mov	r3, r0
 800453a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800453c:	e06f      	b.n	800461e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	847b      	strh	r3, [r7, #34]	; 0x22
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004576:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d021      	beq.n	80045dc <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	3302      	adds	r3, #2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80045c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02a      	beq.n	800461e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	6959      	ldr	r1, [r3, #20]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	891a      	ldrh	r2, [r3, #8]
 80045d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045d6:	f004 fa64 	bl	8008aa2 <USB_ReadPMA>
 80045da:	e020      	b.n	800461e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	3306      	adds	r3, #6
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004604:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	6959      	ldr	r1, [r3, #20]
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	895a      	ldrh	r2, [r3, #10]
 8004618:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800461a:	f004 fa42 	bl	8008aa2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004624:	441a      	add	r2, r3
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004630:	441a      	add	r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <PCD_EP_ISR_Handler+0x4b0>
 800463e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d206      	bcs.n	8004656 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f006 f81a 	bl	800a688 <HAL_PCD_DataOutStageCallback>
 8004654:	e005      	b.n	8004662 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800465c:	4618      	mov	r0, r3
 800465e:	f002 ff7d 	bl	800755c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004662:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d07a      	beq.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800466c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	843b      	strh	r3, [r7, #32]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	8c3b      	ldrh	r3, [r7, #32]
 80046ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	78db      	ldrb	r3, [r3, #3]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d108      	bne.n	80046d2 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d146      	bne.n	8004756 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80046c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d141      	bne.n	8004756 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	3302      	adds	r3, #2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046fa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	8bfb      	ldrh	r3, [r7, #30]
 8004702:	429a      	cmp	r2, r3
 8004704:	d906      	bls.n	8004714 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	8bfb      	ldrh	r3, [r7, #30]
 800470c:	1ad2      	subs	r2, r2, r3
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	619a      	str	r2, [r3, #24]
 8004712:	e002      	b.n	800471a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	2200      	movs	r2, #0
 8004718:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f005 ffc8 	bl	800a6be <HAL_PCD_DataInStageCallback>
 800472e:	e018      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	441a      	add	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	8bfb      	ldrh	r3, [r7, #30]
 8004742:	441a      	add	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474e:	4618      	mov	r0, r3
 8004750:	f002 ff04 	bl	800755c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004754:	e005      	b.n	8004762 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004758:	461a      	mov	r2, r3
 800475a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f91b 	bl	8004998 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800476a:	b29b      	uxth	r3, r3
 800476c:	b21b      	sxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	f6ff ad17 	blt.w	80041a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3738      	adds	r7, #56	; 0x38
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d07e      	beq.n	8004894 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	3302      	adds	r3, #2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	8b7b      	ldrh	r3, [r7, #26]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d306      	bcc.n	80047d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	8b7b      	ldrh	r3, [r7, #26]
 80047d0:	1ad2      	subs	r2, r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e002      	b.n	80047de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d123      	bne.n	800482e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	833b      	strh	r3, [r7, #24]
 8004802:	8b3b      	ldrh	r3, [r7, #24]
 8004804:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004808:	833b      	strh	r3, [r7, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	8b3b      	ldrh	r3, [r7, #24]
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01f      	beq.n	8004878 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	82fb      	strh	r3, [r7, #22]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004878:	8b7b      	ldrh	r3, [r7, #26]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8087 	beq.w	800498e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	891a      	ldrh	r2, [r3, #8]
 800488c:	8b7b      	ldrh	r3, [r7, #26]
 800488e:	f004 f908 	bl	8008aa2 <USB_ReadPMA>
 8004892:	e07c      	b.n	800498e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489c:	b29b      	uxth	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	3306      	adds	r3, #6
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	8b7b      	ldrh	r3, [r7, #26]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d306      	bcc.n	80048d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	8b7b      	ldrh	r3, [r7, #26]
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	e002      	b.n	80048dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d123      	bne.n	800492c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	83fb      	strh	r3, [r7, #30]
 8004900:	8bfb      	ldrh	r3, [r7, #30]
 8004902:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004906:	83fb      	strh	r3, [r7, #30]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	8bfb      	ldrh	r3, [r7, #30]
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11f      	bne.n	8004976 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	83bb      	strh	r3, [r7, #28]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	8bbb      	ldrh	r3, [r7, #28]
 8004962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004976:	8b7b      	ldrh	r3, [r7, #26]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6959      	ldr	r1, [r3, #20]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	895a      	ldrh	r2, [r3, #10]
 8004988:	8b7b      	ldrh	r3, [r7, #26]
 800498a:	f004 f88a 	bl	8008aa2 <USB_ReadPMA>
    }
  }

  return count;
 800498e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b094      	sub	sp, #80	; 0x50
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8138 	beq.w	8004c22 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	3302      	adds	r3, #2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d907      	bls.n	80049fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049f2:	1ad2      	subs	r2, r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	619a      	str	r2, [r3, #24]
 80049f8:	e002      	b.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d12c      	bne.n	8004a62 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f005 fe55 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 823a 	beq.w	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	82fb      	strh	r3, [r7, #22]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	8afb      	ldrh	r3, [r7, #22]
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]
 8004a60:	e218      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01f      	beq.n	8004aac <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	f040 81ee 	bne.w	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ace:	441a      	add	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d309      	bcc.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aec:	1ad2      	subs	r2, r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	621a      	str	r2, [r3, #32]
 8004af2:	e015      	b.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004afc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b0a:	e009      	b.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d155      	bne.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d112      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	801a      	strh	r2, [r3, #0]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e047      	b.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x274>
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b80:	d811      	bhi.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x20e>
 8004b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x200>
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	3301      	adds	r3, #1
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e032      	b.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x274>
 8004ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x224>
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e01b      	b.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x274>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d117      	bne.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x274>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	4413      	add	r3, r2
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	011a      	lsls	r2, r3, #4
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6959      	ldr	r1, [r3, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	891a      	ldrh	r2, [r3, #8]
 8004c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f003 fefc 	bl	8008a18 <USB_WritePMA>
 8004c20:	e138      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	3306      	adds	r3, #6
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d307      	bcc.n	8004c6a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	619a      	str	r2, [r3, #24]
 8004c68:	e002      	b.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d12e      	bne.n	8004cd6 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f005 fd1d 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 8102 	bne.w	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]
 8004cd4:	e0de      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11f      	bne.n	8004d20 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	867b      	strh	r3, [r7, #50]	; 0x32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	f040 80b4 	bne.w	8004e94 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d34:	441a      	add	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d42:	441a      	add	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d309      	bcc.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	1ad2      	subs	r2, r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	621a      	str	r2, [r3, #32]
 8004d66:	e015      	b.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004d70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d7e:	e009      	b.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d155      	bne.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	4413      	add	r3, r2
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d112      	bne.n	8004df6 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e044      	b.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfa:	d811      	bhi.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x488>
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	3301      	adds	r3, #1
 8004e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	029b      	lsls	r3, r3, #10
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e02f      	b.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_EP_DB_Transmit+0x49e>
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	3b01      	subs	r3, #1
 8004e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e018      	b.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d114      	bne.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e64:	4413      	add	r3, r2
 8004e66:	643b      	str	r3, [r7, #64]	; 0x40
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	011a      	lsls	r2, r3, #4
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6959      	ldr	r1, [r3, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	895a      	ldrh	r2, [r3, #10]
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f003 fdc2 	bl	8008a18 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eae:	82bb      	strh	r3, [r7, #20]
 8004eb0:	8abb      	ldrh	r3, [r7, #20]
 8004eb2:	f083 0310 	eor.w	r3, r3, #16
 8004eb6:	82bb      	strh	r3, [r7, #20]
 8004eb8:	8abb      	ldrh	r3, [r7, #20]
 8004eba:	f083 0320 	eor.w	r3, r3, #32
 8004ebe:	82bb      	strh	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	8abb      	ldrh	r3, [r7, #20]
 8004ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3750      	adds	r7, #80	; 0x50
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
 8004efc:	4613      	mov	r3, r2
 8004efe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f00:	897b      	ldrh	r3, [r7, #10]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0c:	897b      	ldrh	r3, [r7, #10]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e009      	b.n	8004f38 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f24:	897a      	ldrh	r2, [r7, #10]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f38:	893b      	ldrh	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	80da      	strh	r2, [r3, #6]
 8004f4c:	e00b      	b.n	8004f66 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2201      	movs	r2, #1
 8004f52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	420e0020 	.word	0x420e0020

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e26c      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8087 	beq.w	80050ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fac:	4b92      	ldr	r3, [pc, #584]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d00c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fb8:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d112      	bne.n	8004fea <HAL_RCC_OscConfig+0x5e>
 8004fc4:	4b8c      	ldr	r3, [pc, #560]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d10b      	bne.n	8004fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd2:	4b89      	ldr	r3, [pc, #548]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d06c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x12c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d168      	bne.n	80050b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e246      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x76>
 8004ff4:	4b80      	ldr	r3, [pc, #512]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a7f      	ldr	r2, [pc, #508]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e02e      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7a      	ldr	r2, [pc, #488]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800501c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e01d      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0xbc>
 800502e:	4b72      	ldr	r3, [pc, #456]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a71      	ldr	r2, [pc, #452]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b6f      	ldr	r3, [pc, #444]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6e      	ldr	r2, [pc, #440]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005048:	4b6b      	ldr	r3, [pc, #428]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a67      	ldr	r2, [pc, #412]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd f8ea 	bl	8002240 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fd f8e6 	bl	8002240 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e1fa      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b5d      	ldr	r3, [pc, #372]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0xe4>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fd f8d6 	bl	8002240 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fd f8d2 	bl	8002240 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e1e6      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x10c>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d063      	beq.n	800518e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c6:	4b4c      	ldr	r3, [pc, #304]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050d2:	4b49      	ldr	r3, [pc, #292]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d11c      	bne.n	8005118 <HAL_RCC_OscConfig+0x18c>
 80050de:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d116      	bne.n	8005118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ea:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_RCC_OscConfig+0x176>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d001      	beq.n	8005102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e1ba      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4939      	ldr	r1, [pc, #228]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005116:	e03a      	b.n	800518e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d020      	beq.n	8005162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005120:	4b36      	ldr	r3, [pc, #216]	; (80051fc <HAL_RCC_OscConfig+0x270>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005126:	f7fd f88b 	bl	8002240 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512e:	f7fd f887 	bl	8002240 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e19b      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4927      	ldr	r1, [pc, #156]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	600b      	str	r3, [r1, #0]
 8005160:	e015      	b.n	800518e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_RCC_OscConfig+0x270>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fd f86a 	bl	8002240 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005170:	f7fd f866 	bl	8002240 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e17a      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d03a      	beq.n	8005210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d019      	beq.n	80051d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a2:	4b17      	ldr	r3, [pc, #92]	; (8005200 <HAL_RCC_OscConfig+0x274>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7fd f84a 	bl	8002240 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b0:	f7fd f846 	bl	8002240 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e15a      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051ce:	2001      	movs	r0, #1
 80051d0:	f000 fad8 	bl	8005784 <RCC_Delay>
 80051d4:	e01c      	b.n	8005210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_OscConfig+0x274>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fd f830 	bl	8002240 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e2:	e00f      	b.n	8005204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e4:	f7fd f82c 	bl	8002240 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d908      	bls.n	8005204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e140      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	42420000 	.word	0x42420000
 8005200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005204:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e9      	bne.n	80051e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80a6 	beq.w	800536a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005222:	4b97      	ldr	r3, [pc, #604]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10d      	bne.n	800524a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800522e:	4b94      	ldr	r3, [pc, #592]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4a93      	ldr	r2, [pc, #588]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005238:	61d3      	str	r3, [r2, #28]
 800523a:	4b91      	ldr	r3, [pc, #580]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	4b8e      	ldr	r3, [pc, #568]	; (8005484 <HAL_RCC_OscConfig+0x4f8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d118      	bne.n	8005288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005256:	4b8b      	ldr	r3, [pc, #556]	; (8005484 <HAL_RCC_OscConfig+0x4f8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a8a      	ldr	r2, [pc, #552]	; (8005484 <HAL_RCC_OscConfig+0x4f8>)
 800525c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005262:	f7fc ffed 	bl	8002240 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800526a:	f7fc ffe9 	bl	8002240 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b64      	cmp	r3, #100	; 0x64
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0fd      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	4b81      	ldr	r3, [pc, #516]	; (8005484 <HAL_RCC_OscConfig+0x4f8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d106      	bne.n	800529e <HAL_RCC_OscConfig+0x312>
 8005290:	4b7b      	ldr	r3, [pc, #492]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a7a      	ldr	r2, [pc, #488]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	e02d      	b.n	80052fa <HAL_RCC_OscConfig+0x36e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x334>
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	6213      	str	r3, [r2, #32]
 80052b2:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a72      	ldr	r2, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	e01c      	b.n	80052fa <HAL_RCC_OscConfig+0x36e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCC_OscConfig+0x356>
 80052c8:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4a6c      	ldr	r2, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	6213      	str	r3, [r2, #32]
 80052d4:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a69      	ldr	r2, [pc, #420]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	e00b      	b.n	80052fa <HAL_RCC_OscConfig+0x36e>
 80052e2:	4b67      	ldr	r3, [pc, #412]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4a66      	ldr	r2, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6213      	str	r3, [r2, #32]
 80052ee:	4b64      	ldr	r3, [pc, #400]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d015      	beq.n	800532e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005302:	f7fc ff9d 	bl	8002240 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc ff99 	bl	8002240 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0ab      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	4b57      	ldr	r3, [pc, #348]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ee      	beq.n	800530a <HAL_RCC_OscConfig+0x37e>
 800532c:	e014      	b.n	8005358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532e:	f7fc ff87 	bl	8002240 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005334:	e00a      	b.n	800534c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fc ff83 	bl	8002240 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	; 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e095      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534c:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ee      	bne.n	8005336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	4a47      	ldr	r2, [pc, #284]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8081 	beq.w	8005476 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b08      	cmp	r3, #8
 800537e:	d061      	beq.n	8005444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d146      	bne.n	8005416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <HAL_RCC_OscConfig+0x4fc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fc ff57 	bl	8002240 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fc ff53 	bl	8002240 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e067      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d108      	bne.n	80053d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053be:	4b30      	ldr	r3, [pc, #192]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	492d      	ldr	r1, [pc, #180]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a19      	ldr	r1, [r3, #32]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	430b      	orrs	r3, r1
 80053e2:	4927      	ldr	r1, [pc, #156]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x4fc>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fc ff27 	bl	8002240 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fc ff23 	bl	8002240 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e037      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x46a>
 8005414:	e02f      	b.n	8005476 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005416:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <HAL_RCC_OscConfig+0x4fc>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fc ff10 	bl	8002240 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fc ff0c 	bl	8002240 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e020      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x498>
 8005442:	e018      	b.n	8005476 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e013      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x4f4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	429a      	cmp	r2, r3
 8005462:	d106      	bne.n	8005472 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d001      	beq.n	8005476 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	40007000 	.word	0x40007000
 8005488:	42420060 	.word	0x42420060

0800548c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d0      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a0:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d910      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b67      	ldr	r3, [pc, #412]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	4965      	ldr	r1, [pc, #404]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b63      	ldr	r3, [pc, #396]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0b8      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a58      	ldr	r2, [pc, #352]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005500:	4b53      	ldr	r3, [pc, #332]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a52      	ldr	r2, [pc, #328]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800550a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550c:	4b50      	ldr	r3, [pc, #320]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	494d      	ldr	r1, [pc, #308]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	4313      	orrs	r3, r2
 800551c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d040      	beq.n	80055ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d115      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554a:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e073      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06b      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4936      	ldr	r1, [pc, #216]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800557c:	f7fc fe60 	bl	8002240 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	e00a      	b.n	800559a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005584:	f7fc fe5c 	bl	8002240 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e053      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 020c 	and.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1eb      	bne.n	8005584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ac:	4b27      	ldr	r3, [pc, #156]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d210      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 0207 	bic.w	r2, r3, #7
 80055c2:	4922      	ldr	r1, [pc, #136]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e032      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4916      	ldr	r1, [pc, #88]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	490e      	ldr	r1, [pc, #56]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800561a:	f000 f821 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 800561e:	4602      	mov	r2, r0
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_ClockConfig+0x1cc>)
 8005634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_ClockConfig+0x1d0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fc fdbe 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	0800befc 	.word	0x0800befc
 8005658:	2000007c 	.word	0x2000007c
 800565c:	20000080 	.word	0x20000080

08005660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	b490      	push	{r4, r7}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005666:	4b2a      	ldr	r3, [pc, #168]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005668:	1d3c      	adds	r4, r7, #4
 800566a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800566c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005670:	f240 2301 	movw	r3, #513	; 0x201
 8005674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <HAL_RCC_GetSysClockFreq+0xb4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d002      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x40>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x46>
 800569e:	e02d      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a2:	623b      	str	r3, [r7, #32]
      break;
 80056a4:	e02d      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056b2:	4413      	add	r3, r2
 80056b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d013      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c5b      	lsrs	r3, r3, #17
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056d2:	4413      	add	r3, r2
 80056d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056de:	fb02 f203 	mul.w	r2, r2, r3
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e004      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4a0b      	ldr	r2, [pc, #44]	; (800571c <HAL_RCC_GetSysClockFreq+0xbc>)
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	623b      	str	r3, [r7, #32]
      break;
 80056fa:	e002      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056fe:	623b      	str	r3, [r7, #32]
      break;
 8005700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005702:	6a3b      	ldr	r3, [r7, #32]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3728      	adds	r7, #40	; 0x28
 8005708:	46bd      	mov	sp, r7
 800570a:	bc90      	pop	{r4, r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	0800be98 	.word	0x0800be98
 8005714:	40021000 	.word	0x40021000
 8005718:	007a1200 	.word	0x007a1200
 800571c:	003d0900 	.word	0x003d0900

08005720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <HAL_RCC_GetHCLKFreq+0x10>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	2000007c 	.word	0x2000007c

08005734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005738:	f7ff fff2 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4903      	ldr	r1, [pc, #12]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	0800bf0c 	.word	0x0800bf0c

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005760:	f7ff ffde 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	0adb      	lsrs	r3, r3, #11
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	; (8005780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000
 8005780:	0800bf0c 	.word	0x0800bf0c

08005784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <RCC_Delay+0x34>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <RCC_Delay+0x38>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0a5b      	lsrs	r3, r3, #9
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057a0:	bf00      	nop
  }
  while (Delay --);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	60fa      	str	r2, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f9      	bne.n	80057a0 <RCC_Delay+0x1c>
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	2000007c 	.word	0x2000007c
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d07d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80057dc:	2300      	movs	r3, #0
 80057de:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e0:	4b4f      	ldr	r3, [pc, #316]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10d      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	4a4b      	ldr	r2, [pc, #300]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	61d3      	str	r3, [r2, #28]
 80057f8:	4b49      	ldr	r3, [pc, #292]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005808:	4b46      	ldr	r3, [pc, #280]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d118      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005814:	4b43      	ldr	r3, [pc, #268]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a42      	ldr	r2, [pc, #264]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800581a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005820:	f7fc fd0e 	bl	8002240 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	e008      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005828:	f7fc fd0a 	bl	8002240 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e06d      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02e      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d027      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005864:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800587a:	4a29      	ldr	r2, [pc, #164]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d014      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fc fcd9 	bl	8002240 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc fcd5 	bl	8002240 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e036      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4917      	ldr	r1, [pc, #92]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d105      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058cc:	4b14      	ldr	r3, [pc, #80]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4a13      	ldr	r2, [pc, #76]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	490b      	ldr	r1, [pc, #44]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4904      	ldr	r1, [pc, #16]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
 8005928:	42420440 	.word	0x42420440

0800592c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b08d      	sub	sp, #52	; 0x34
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005934:	4b5a      	ldr	r3, [pc, #360]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005936:	f107 040c 	add.w	r4, r7, #12
 800593a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800593c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005940:	f240 2301 	movw	r3, #513	; 0x201
 8005944:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	2300      	movs	r3, #0
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	2300      	movs	r3, #0
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b10      	cmp	r3, #16
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b10      	cmp	r3, #16
 8005964:	f200 8091 	bhi.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d04c      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d07c      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005974:	e089      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8005976:	4b4b      	ldr	r3, [pc, #300]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8082 	beq.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	0c9b      	lsrs	r3, r3, #18
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005996:	4413      	add	r3, r2
 8005998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800599c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d018      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059a8:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c5b      	lsrs	r3, r3, #17
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059b6:	4413      	add	r3, r2
 80059b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80059c8:	4a37      	ldr	r2, [pc, #220]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d8:	e004      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	4a33      	ldr	r2, [pc, #204]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059e4:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f0:	d102      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80059f6:	e04a      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a06:	e042      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005a08:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a18:	d108      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	e01f      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a36:	d109      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005a38:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005a44:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4a:	e00f      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a56:	d11c      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005a58:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d016      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005a64:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a6a:	e012      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005a6c:	e011      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a6e:	f7ff fe75 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8005a72:	4602      	mov	r2, r0
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	0b9b      	lsrs	r3, r3, #14
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a88:	e004      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a92:	bf00      	nop
    }
  }
  return (frequency);
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3734      	adds	r7, #52	; 0x34
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd90      	pop	{r4, r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	0800bea8 	.word	0x0800bea8
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	007a1200 	.word	0x007a1200
 8005aac:	003d0900 	.word	0x003d0900
 8005ab0:	aaaaaaab 	.word	0xaaaaaaab

08005ab4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e084      	b.n	8005bd4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7c5b      	ldrb	r3, [r3, #17]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fc faa2 	bl	8002024 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f9c8 	bl	8005e7c <HAL_RTC_WaitForSynchro>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e06b      	b.n	8005bd4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa81 	bl	8006004 <RTC_EnterInitMode>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e060      	b.n	8005bd4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0207 	bic.w	r2, r2, #7
 8005b20:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <HAL_RTC_Init+0x128>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	4a2b      	ldr	r2, [pc, #172]	; (8005bdc <HAL_RTC_Init+0x128>)
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_RTC_Init+0x128>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4926      	ldr	r1, [pc, #152]	; (8005bdc <HAL_RTC_Init+0x128>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d003      	beq.n	8005b5a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e00e      	b.n	8005b78 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f7ff fee6 	bl	800592c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b60:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e030      	b.n	8005bd4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f023 010f 	bic.w	r1, r3, #15
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	0c1a      	lsrs	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	b291      	uxth	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fa55 	bl	8006054 <RTC_ExitInitMode>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e00c      	b.n	8005bd4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40006c00 	.word	0x40006c00

08005be0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_RTC_SetTime+0x20>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e080      	b.n	8005d06 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	7c1b      	ldrb	r3, [r3, #16]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_RTC_SetTime+0x30>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e07a      	b.n	8005d06 <HAL_RTC_SetTime+0x126>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d113      	bne.n	8005c4a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c2c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	4619      	mov	r1, r3
 8005c36:	460b      	mov	r3, r1
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c3e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c44:	4413      	add	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	e01e      	b.n	8005c88 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa28 	bl	80060a4 <RTC_Bcd2ToByte>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c5c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fa1d 	bl	80060a4 <RTC_Bcd2ToByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005c76:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fa11 	bl	80060a4 <RTC_Bcd2ToByte>
 8005c82:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005c84:	4423      	add	r3, r4
 8005c86:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f953 	bl	8005f36 <RTC_WriteTimeCounter>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e02f      	b.n	8005d06 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0205 	bic.w	r2, r2, #5
 8005cb4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f964 	bl	8005f84 <RTC_ReadAlarmCounter>
 8005cbc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d018      	beq.n	8005cf8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d214      	bcs.n	8005cf8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005cd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005cd8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f96a 	bl	8005fb6 <RTC_WriteAlarmCounter>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2204      	movs	r2, #4
 8005cec:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e006      	b.n	8005d06 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
	...

08005d10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_RTC_SetDate+0x24>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e097      	b.n	8005e68 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	7c1b      	ldrb	r3, [r3, #16]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_RTC_SetDate+0x34>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e091      	b.n	8005e68 <HAL_RTC_SetDate+0x158>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	78da      	ldrb	r2, [r3, #3]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	785a      	ldrb	r2, [r3, #1]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	789a      	ldrb	r2, [r3, #2]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	739a      	strb	r2, [r3, #14]
 8005d6e:	e01a      	b.n	8005da6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f995 	bl	80060a4 <RTC_Bcd2ToByte>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f98c 	bl	80060a4 <RTC_Bcd2ToByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	789b      	ldrb	r3, [r3, #2]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f983 	bl	80060a4 <RTC_Bcd2ToByte>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	7bdb      	ldrb	r3, [r3, #15]
 8005daa:	4618      	mov	r0, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	7b59      	ldrb	r1, [r3, #13]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	7b9b      	ldrb	r3, [r3, #14]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f000 f993 	bl	80060e0 <RTC_WeekDayNum>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	7b1a      	ldrb	r2, [r3, #12]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f883 	bl	8005ed6 <RTC_ReadTimeCounter>
 8005dd0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <HAL_RTC_SetDate+0x160>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	0adb      	lsrs	r3, r3, #11
 8005ddc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b18      	cmp	r3, #24
 8005de2:	d93a      	bls.n	8005e5a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <HAL_RTC_SetDate+0x164>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_RTC_SetDate+0x168>)
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f89a 	bl	8005f36 <RTC_WriteTimeCounter>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e027      	b.n	8005e68 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f8b3 	bl	8005f84 <RTC_ReadAlarmCounter>
 8005e1e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d018      	beq.n	8005e5a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d214      	bcs.n	8005e5a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005e36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005e3a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f8b9 	bl	8005fb6 <RTC_WriteAlarmCounter>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e006      	b.n	8005e68 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	91a2b3c5 	.word	0x91a2b3c5
 8005e74:	aaaaaaab 	.word	0xaaaaaaab
 8005e78:	00015180 	.word	0x00015180

08005e7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e01d      	b.n	8005ece <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0208 	bic.w	r2, r2, #8
 8005ea0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005ea2:	f7fc f9cd 	bl	8002240 <HAL_GetTick>
 8005ea6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005ea8:	e009      	b.n	8005ebe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005eaa:	f7fc f9c9 	bl	8002240 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb8:	d901      	bls.n	8005ebe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e007      	b.n	8005ece <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0ee      	beq.n	8005eaa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	827b      	strh	r3, [r7, #18]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	823b      	strh	r3, [r7, #16]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005f06:	8a7a      	ldrh	r2, [r7, #18]
 8005f08:	8a3b      	ldrh	r3, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d008      	beq.n	8005f20 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005f0e:	8a3b      	ldrh	r3, [r7, #16]
 8005f10:	041a      	lsls	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e004      	b.n	8005f2a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	041a      	lsls	r2, r3, #16
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr

08005f36 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f85d 	bl	8006004 <RTC_EnterInitMode>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e011      	b.n	8005f7a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	0c12      	lsrs	r2, r2, #16
 8005f5e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	b292      	uxth	r2, r2
 8005f68:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f872 	bl	8006054 <RTC_ExitInitMode>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	81fb      	strh	r3, [r7, #14]
 8005f90:	2300      	movs	r3, #0
 8005f92:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	041a      	lsls	r2, r3, #16
 8005fa8:	89bb      	ldrh	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f81d 	bl	8006004 <RTC_EnterInitMode>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
 8005fd4:	e011      	b.n	8005ffa <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	0c12      	lsrs	r2, r2, #16
 8005fde:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f832 	bl	8006054 <RTC_ExitInitMode>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006010:	f7fc f916 	bl	8002240 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006016:	e009      	b.n	800602c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006018:	f7fc f912 	bl	8002240 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006026:	d901      	bls.n	800602c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e00f      	b.n	800604c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0ee      	beq.n	8006018 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0210 	orr.w	r2, r2, #16
 8006048:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0210 	bic.w	r2, r2, #16
 800606e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006070:	f7fc f8e6 	bl	8002240 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006076:	e009      	b.n	800608c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006078:	f7fc f8e2 	bl	8002240 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006086:	d901      	bls.n	800608c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e007      	b.n	800609c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0ee      	beq.n	8006078 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	b2db      	uxtb	r3, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr
	...

080060e0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
 80060ec:	4613      	mov	r3, r2
 80060ee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80060fe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d82d      	bhi.n	8006162 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	4613      	mov	r3, r2
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <RTC_WeekDayNum+0xe4>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	085a      	lsrs	r2, r3, #1
 800611a:	78bb      	ldrb	r3, [r7, #2]
 800611c:	441a      	add	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	441a      	add	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3b01      	subs	r3, #1
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	3b01      	subs	r3, #1
 800612e:	4926      	ldr	r1, [pc, #152]	; (80061c8 <RTC_WeekDayNum+0xe8>)
 8006130:	fba1 1303 	umull	r1, r3, r1, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3b01      	subs	r3, #1
 800613c:	4922      	ldr	r1, [pc, #136]	; (80061c8 <RTC_WeekDayNum+0xe8>)
 800613e:	fba1 1303 	umull	r1, r3, r1, r3
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	4413      	add	r3, r2
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	4b20      	ldr	r3, [pc, #128]	; (80061cc <RTC_WeekDayNum+0xec>)
 800614a:	fba3 1302 	umull	r1, r3, r3, r2
 800614e:	1ad1      	subs	r1, r2, r3
 8006150:	0849      	lsrs	r1, r1, #1
 8006152:	440b      	add	r3, r1
 8006154:	0899      	lsrs	r1, r3, #2
 8006156:	460b      	mov	r3, r1
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	1a5b      	subs	r3, r3, r1
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e029      	b.n	80061b6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	4613      	mov	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <RTC_WeekDayNum+0xe4>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	085a      	lsrs	r2, r3, #1
 8006176:	78bb      	ldrb	r3, [r7, #2]
 8006178:	441a      	add	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	441a      	add	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	089b      	lsrs	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4910      	ldr	r1, [pc, #64]	; (80061c8 <RTC_WeekDayNum+0xe8>)
 8006188:	fba1 1303 	umull	r1, r3, r1, r3
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	490d      	ldr	r1, [pc, #52]	; (80061c8 <RTC_WeekDayNum+0xe8>)
 8006194:	fba1 1303 	umull	r1, r3, r1, r3
 8006198:	09db      	lsrs	r3, r3, #7
 800619a:	4413      	add	r3, r2
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <RTC_WeekDayNum+0xec>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	1ad1      	subs	r1, r2, r3
 80061a6:	0849      	lsrs	r1, r1, #1
 80061a8:	440b      	add	r3, r1
 80061aa:	0899      	lsrs	r1, r3, #2
 80061ac:	460b      	mov	r3, r1
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	1a5b      	subs	r3, r3, r1
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	b2db      	uxtb	r3, r3
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr
 80061c4:	38e38e39 	.word	0x38e38e39
 80061c8:	51eb851f 	.word	0x51eb851f
 80061cc:	24924925 	.word	0x24924925

080061d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e041      	b.n	8006266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb ff38 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fa7a 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d001      	beq.n	8006288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e03a      	b.n	80062fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a18      	ldr	r2, [pc, #96]	; (8006308 <HAL_TIM_Base_Start_IT+0x98>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d009      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a14      	ldr	r2, [pc, #80]	; (800630c <HAL_TIM_Base_Start_IT+0x9c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_TIM_Base_Start_IT+0xa0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d111      	bne.n	80062ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d010      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0201 	orr.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	e007      	b.n	80062fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800

08006314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b02      	cmp	r3, #2
 8006328:	d122      	bne.n	8006370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b02      	cmp	r3, #2
 8006336:	d11b      	bne.n	8006370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f06f 0202 	mvn.w	r2, #2
 8006340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9ba 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 800635c:	e005      	b.n	800636a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9ad 	bl	80066be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f9bc 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b04      	cmp	r3, #4
 800637c:	d122      	bne.n	80063c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d11b      	bne.n	80063c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0204 	mvn.w	r2, #4
 8006394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f990 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 80063b0:	e005      	b.n	80063be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f983 	bl	80066be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f992 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d122      	bne.n	8006418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0208 	mvn.w	r2, #8
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2204      	movs	r2, #4
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f966 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f959 	bl	80066be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f968 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b10      	cmp	r3, #16
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b10      	cmp	r3, #16
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0210 	mvn.w	r2, #16
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2208      	movs	r2, #8
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f93c 	bl	80066d0 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f92f 	bl	80066be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f93e 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10e      	bne.n	8006498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d107      	bne.n	8006498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0201 	mvn.w	r2, #1
 8006490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f90a 	bl	80066ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d10e      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d107      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa81 	bl	80069c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d10e      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f902 	bl	80066f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b20      	cmp	r3, #32
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0220 	mvn.w	r2, #32
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa4c 	bl	80069b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIM_ConfigClockSource+0x18>
 8006538:	2302      	movs	r3, #2
 800653a:	e0b3      	b.n	80066a4 <HAL_TIM_ConfigClockSource+0x180>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800655a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006574:	d03e      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0xd0>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	f200 8087 	bhi.w	800668c <HAL_TIM_ConfigClockSource+0x168>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	f000 8085 	beq.w	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d87f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d01a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0xa2>
 8006590:	2b70      	cmp	r3, #112	; 0x70
 8006592:	d87b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d050      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x116>
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d877      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d03c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xf6>
 80065a0:	2b50      	cmp	r3, #80	; 0x50
 80065a2:	d873      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d058      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x136>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d86f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d064      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x156>
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d86b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d060      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x156>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d867      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x168>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05c      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x156>
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d05a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065c4:	e062      	b.n	800668c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f000 f970 	bl	80068ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	609a      	str	r2, [r3, #8]
      break;
 80065f2:	e04e      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6899      	ldr	r1, [r3, #8]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f000 f959 	bl	80068ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e03b      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	461a      	mov	r2, r3
 8006628:	f000 f8d0 	bl	80067cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2150      	movs	r1, #80	; 0x50
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f927 	bl	8006886 <TIM_ITRx_SetConfig>
      break;
 8006638:	e02b      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	461a      	mov	r2, r3
 8006648:	f000 f8ee 	bl	8006828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2160      	movs	r1, #96	; 0x60
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f917 	bl	8006886 <TIM_ITRx_SetConfig>
      break;
 8006658:	e01b      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	461a      	mov	r2, r3
 8006668:	f000 f8b0 	bl	80067cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f907 	bl	8006886 <TIM_ITRx_SetConfig>
      break;
 8006678:	e00b      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 f8fe 	bl	8006886 <TIM_ITRx_SetConfig>
        break;
 800668a:	e002      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800668c:	bf00      	nop
 800668e:	e000      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
	...

08006708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <TIM_Base_SetConfig+0xb8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x30>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x30>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <TIM_Base_SetConfig+0xbc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x30>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <TIM_Base_SetConfig+0xc0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a1c      	ldr	r2, [pc, #112]	; (80067c0 <TIM_Base_SetConfig+0xb8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_Base_SetConfig+0x62>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d007      	beq.n	800676a <TIM_Base_SetConfig+0x62>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <TIM_Base_SetConfig+0xbc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_Base_SetConfig+0x62>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <TIM_Base_SetConfig+0xc0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d108      	bne.n	800677c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a07      	ldr	r2, [pc, #28]	; (80067c0 <TIM_Base_SetConfig+0xb8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d103      	bne.n	80067b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	615a      	str	r2, [r3, #20]
}
 80067b6:	bf00      	nop
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800

080067cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 030a 	bic.w	r3, r3, #10
 8006808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f023 0210 	bic.w	r2, r3, #16
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006852:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	031b      	lsls	r3, r3, #12
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f043 0307 	orr.w	r3, r3, #7
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	021a      	lsls	r2, r3, #8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	431a      	orrs	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	609a      	str	r2, [r3, #8]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e046      	b.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d009      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a12      	ldr	r2, [pc, #72]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d10c      	bne.n	800698c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4313      	orrs	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800

080069b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069d8:	b084      	sub	sp, #16
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	f107 0014 	add.w	r0, r7, #20
 80069e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr

080069f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4013      	ands	r3, r2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a70:	b084      	sub	sp, #16
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	f107 0014 	add.w	r0, r7, #20
 8006a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr

08006ab0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b09b      	sub	sp, #108	; 0x6c
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d81f      	bhi.n	8006b22 <USB_ActivateEndpoint+0x72>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <USB_ActivateEndpoint+0x38>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b2b 	.word	0x08006b2b
 8006af4:	08006b07 	.word	0x08006b07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006af8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b04:	e012      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006b06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006b0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b12:	e00b      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b20:	e004      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006b28:	e000      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
      break;
 8006b2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	7b1b      	ldrb	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8149 	bne.w	8006e30 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8084 	beq.w	8006cb0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	88db      	ldrh	r3, [r3, #6]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	81fb      	strh	r3, [r7, #14]
 8006bea:	89fb      	ldrh	r3, [r7, #14]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <USB_ActivateEndpoint+0x17c>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	81bb      	strh	r3, [r7, #12]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	89bb      	ldrh	r3, [r7, #12]
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	78db      	ldrb	r3, [r3, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d020      	beq.n	8006c76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4a:	813b      	strh	r3, [r7, #8]
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	f083 0320 	eor.w	r3, r3, #32
 8006c52:	813b      	strh	r3, [r7, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	893b      	ldrh	r3, [r7, #8]
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
 8006c74:	e27f      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8c:	817b      	strh	r3, [r7, #10]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	897b      	ldrh	r3, [r7, #10]
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
 8006cae:	e262      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	4413      	add	r3, r2
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	011a      	lsls	r2, r3, #4
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	88db      	ldrh	r3, [r3, #6]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	4413      	add	r3, r2
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <USB_ActivateEndpoint+0x286>
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e02f      	b.n	8006d96 <USB_ActivateEndpoint+0x2e6>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3c:	d813      	bhi.n	8006d66 <USB_ActivateEndpoint+0x2b6>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <USB_ActivateEndpoint+0x2a8>
 8006d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d54:	3301      	adds	r3, #1
 8006d56:	663b      	str	r3, [r7, #96]	; 0x60
 8006d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e017      	b.n	8006d96 <USB_ActivateEndpoint+0x2e6>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <USB_ActivateEndpoint+0x2d0>
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	83fb      	strh	r3, [r7, #30]
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01b      	beq.n	8006de6 <USB_ActivateEndpoint+0x336>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	83bb      	strh	r3, [r7, #28]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	8bbb      	ldrh	r3, [r7, #28]
 8006dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	837b      	strh	r3, [r7, #26]
 8006dfe:	8b7b      	ldrh	r3, [r7, #26]
 8006e00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e04:	837b      	strh	r3, [r7, #26]
 8006e06:	8b7b      	ldrh	r3, [r7, #26]
 8006e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e0c:	837b      	strh	r3, [r7, #26]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	8b7b      	ldrh	r3, [r7, #26]
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
 8006e2e:	e1a2      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e7c:	4413      	add	r3, r2
 8006e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	011a      	lsls	r2, r3, #4
 8006e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb0:	4413      	add	r3, r2
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	011a      	lsls	r2, r3, #4
 8006eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 8091 	bne.w	8007000 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006eec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <USB_ActivateEndpoint+0x47e>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01b      	beq.n	8006f7e <USB_ActivateEndpoint+0x4ce>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fa4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fdc:	867b      	strh	r3, [r7, #50]	; 0x32
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]
 8006ffe:	e0ba      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01d      	beq.n	8007058 <USB_ActivateEndpoint+0x5a8>
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29b      	uxth	r3, r3
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007068:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01d      	beq.n	80070b0 <USB_ActivateEndpoint+0x600>
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	78db      	ldrb	r3, [r3, #3]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d024      	beq.n	8007102 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070d6:	f083 0320 	eor.w	r3, r3, #32
 80070da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]
 8007100:	e01d      	b.n	800713e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007118:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	b29b      	uxth	r3, r3
 8007174:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800717a:	4618      	mov	r0, r3
 800717c:	376c      	adds	r7, #108	; 0x6c
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007184:	b480      	push	{r7}
 8007186:	b08d      	sub	sp, #52	; 0x34
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	7b1b      	ldrb	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 808e 	bne.w	80072b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d044      	beq.n	800722a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	81bb      	strh	r3, [r7, #12]
 80071ae:	89bb      	ldrh	r3, [r7, #12]
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01b      	beq.n	80071f0 <USB_DeactivateEndpoint+0x6c>
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007206:	813b      	strh	r3, [r7, #8]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e192      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	827b      	strh	r3, [r7, #18]
 8007238:	8a7b      	ldrh	r3, [r7, #18]
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01b      	beq.n	800727a <USB_DeactivateEndpoint+0xf6>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	823b      	strh	r3, [r7, #16]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	8a3b      	ldrh	r3, [r7, #16]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	81fb      	strh	r3, [r7, #14]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]
 80072b2:	e14d      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 80a5 	bne.w	8007408 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	843b      	strh	r3, [r7, #32]
 80072cc:	8c3b      	ldrh	r3, [r7, #32]
 80072ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01b      	beq.n	800730e <USB_DeactivateEndpoint+0x18a>
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	83fb      	strh	r3, [r7, #30]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	8bfb      	ldrh	r3, [r7, #30]
 80072fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	b29b      	uxth	r3, r3
 800730c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	83bb      	strh	r3, [r7, #28]
 800731c:	8bbb      	ldrh	r3, [r7, #28]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01b      	beq.n	800735e <USB_DeactivateEndpoint+0x1da>
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	837b      	strh	r3, [r7, #26]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	441a      	add	r2, r3
 8007348:	8b7b      	ldrh	r3, [r7, #26]
 800734a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800735a:	b29b      	uxth	r3, r3
 800735c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007374:	833b      	strh	r3, [r7, #24]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	8b3b      	ldrh	r3, [r7, #24]
 8007382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	82fb      	strh	r3, [r7, #22]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	441a      	add	r2, r3
 80073b8:	8afb      	ldrh	r3, [r7, #22]
 80073ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e4:	82bb      	strh	r3, [r7, #20]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	8abb      	ldrh	r3, [r7, #20]
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
 8007406:	e0a3      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <USB_DeactivateEndpoint+0x2d4>
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	b29b      	uxth	r3, r3
 8007456:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <USB_DeactivateEndpoint+0x324>
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	853b      	strh	r3, [r7, #40]	; 0x28
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074dc:	b29b      	uxth	r3, r3
 80074de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800753c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754c:	b29b      	uxth	r3, r3
 800754e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3734      	adds	r7, #52	; 0x34
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b0c4      	sub	sp, #272	; 0x110
 8007560:	af00      	add	r7, sp, #0
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	6018      	str	r0, [r3, #0]
 8007566:	463b      	mov	r3, r7
 8007568:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	f040 8557 	bne.w	8008024 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007576:	463b      	mov	r3, r7
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d905      	bls.n	8007592 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007586:	463b      	mov	r3, r7
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007590:	e004      	b.n	800759c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d12c      	bne.n	8007600 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075a6:	463b      	mov	r3, r7
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6959      	ldr	r1, [r3, #20]
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	88da      	ldrh	r2, [r3, #6]
 80075b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	1d38      	adds	r0, r7, #4
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	f001 fa2c 	bl	8008a18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	4413      	add	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	011a      	lsls	r2, r3, #4
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	4413      	add	r3, r2
 80075e4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075e8:	f107 0310 	add.w	r3, r7, #16
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f107 0310 	add.w	r3, r7, #16
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	f000 bcdd 	b.w	8007fba <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	78db      	ldrb	r3, [r3, #3]
 8007606:	2b02      	cmp	r3, #2
 8007608:	f040 8347 	bne.w	8007c9a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6a1a      	ldr	r2, [r3, #32]
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	429a      	cmp	r2, r3
 800761a:	f240 82eb 	bls.w	8007bf4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	463b      	mov	r3, r7
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800763c:	1d3b      	adds	r3, r7, #4
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	463b      	mov	r3, r7
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007656:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800765a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007662:	463b      	mov	r3, r7
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	463b      	mov	r3, r7
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	463b      	mov	r3, r7
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8159 	beq.w	8007942 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007690:	1d3b      	adds	r3, r7, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
 8007696:	463b      	mov	r3, r7
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d164      	bne.n	800776a <USB_EPStartXfer+0x20e>
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	4413      	add	r3, r2
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b8:	463b      	mov	r3, r7
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	011a      	lsls	r2, r3, #4
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	4413      	add	r3, r2
 80076c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d112      	bne.n	80076f8 <USB_EPStartXfer+0x19c>
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	e054      	b.n	80077a2 <USB_EPStartXfer+0x246>
 80076f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076fc:	2b3e      	cmp	r3, #62	; 0x3e
 80076fe:	d817      	bhi.n	8007730 <USB_EPStartXfer+0x1d4>
 8007700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800770a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USB_EPStartXfer+0x1c4>
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771a:	3301      	adds	r3, #1
 800771c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007724:	b29b      	uxth	r3, r3
 8007726:	029b      	lsls	r3, r3, #10
 8007728:	b29a      	uxth	r2, r3
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e038      	b.n	80077a2 <USB_EPStartXfer+0x246>
 8007730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800773a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <USB_EPStartXfer+0x1f4>
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774a:	3b01      	subs	r3, #1
 800774c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	b29b      	uxth	r3, r3
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	b29b      	uxth	r3, r3
 800775a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007762:	b29a      	uxth	r2, r3
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	e01b      	b.n	80077a2 <USB_EPStartXfer+0x246>
 800776a:	463b      	mov	r3, r7
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d116      	bne.n	80077a2 <USB_EPStartXfer+0x246>
 8007774:	1d3b      	adds	r3, r7, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	4413      	add	r3, r2
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
 8007786:	463b      	mov	r3, r7
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	011a      	lsls	r2, r3, #4
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	4413      	add	r3, r2
 8007792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007796:	633b      	str	r3, [r7, #48]	; 0x30
 8007798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779c:	b29a      	uxth	r2, r3
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077a2:	463b      	mov	r3, r7
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	895b      	ldrh	r3, [r3, #10]
 80077a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6959      	ldr	r1, [r3, #20]
 80077b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80077bc:	1d38      	adds	r0, r7, #4
 80077be:	6800      	ldr	r0, [r0, #0]
 80077c0:	f001 f92a 	bl	8008a18 <USB_WritePMA>
            ep->xfer_buff += len;
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ce:	441a      	add	r2, r3
 80077d0:	463b      	mov	r3, r7
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d909      	bls.n	80077fa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	463b      	mov	r3, r7
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	621a      	str	r2, [r3, #32]
 80077f8:	e008      	b.n	800780c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007804:	463b      	mov	r3, r7
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2200      	movs	r2, #0
 800780a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d164      	bne.n	80078e0 <USB_EPStartXfer+0x384>
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007824:	b29b      	uxth	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	463b      	mov	r3, r7
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d112      	bne.n	800786e <USB_EPStartXfer+0x312>
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007852:	b29a      	uxth	r2, r3
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007866:	b29a      	uxth	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e057      	b.n	800791e <USB_EPStartXfer+0x3c2>
 800786e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007872:	2b3e      	cmp	r3, #62	; 0x3e
 8007874:	d817      	bhi.n	80078a6 <USB_EPStartXfer+0x34a>
 8007876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USB_EPStartXfer+0x33a>
 800788c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29a      	uxth	r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	e03b      	b.n	800791e <USB_EPStartXfer+0x3c2>
 80078a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b4:	f003 031f 	and.w	r3, r3, #31
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <USB_EPStartXfer+0x36a>
 80078bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078c0:	3b01      	subs	r3, #1
 80078c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	029b      	lsls	r3, r3, #10
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d8:	b29a      	uxth	r2, r3
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e01e      	b.n	800791e <USB_EPStartXfer+0x3c2>
 80078e0:	463b      	mov	r3, r7
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d119      	bne.n	800791e <USB_EPStartXfer+0x3c2>
 80078ea:	1d3b      	adds	r3, r7, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	1d3b      	adds	r3, r7, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	4413      	add	r3, r2
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
 8007902:	463b      	mov	r3, r7
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	011a      	lsls	r2, r3, #4
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	4413      	add	r3, r2
 800790e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007912:	623b      	str	r3, [r7, #32]
 8007914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007918:	b29a      	uxth	r2, r3
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	891b      	ldrh	r3, [r3, #8]
 8007924:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007928:	463b      	mov	r3, r7
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6959      	ldr	r1, [r3, #20]
 800792e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007932:	b29b      	uxth	r3, r3
 8007934:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007938:	1d38      	adds	r0, r7, #4
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f001 f86c 	bl	8008a18 <USB_WritePMA>
 8007940:	e33b      	b.n	8007fba <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d164      	bne.n	8007a16 <USB_EPStartXfer+0x4ba>
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795a:	b29b      	uxth	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007960:	4413      	add	r3, r2
 8007962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007964:	463b      	mov	r3, r7
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	011a      	lsls	r2, r3, #4
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	4413      	add	r3, r2
 8007970:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007974:	64bb      	str	r3, [r7, #72]	; 0x48
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d112      	bne.n	80079a4 <USB_EPStartXfer+0x448>
 800797e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007988:	b29a      	uxth	r2, r3
 800798a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e057      	b.n	8007a54 <USB_EPStartXfer+0x4f8>
 80079a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a8:	2b3e      	cmp	r3, #62	; 0x3e
 80079aa:	d817      	bhi.n	80079dc <USB_EPStartXfer+0x480>
 80079ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <USB_EPStartXfer+0x470>
 80079c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079c6:	3301      	adds	r3, #1
 80079c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e03b      	b.n	8007a54 <USB_EPStartXfer+0x4f8>
 80079dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <USB_EPStartXfer+0x4a0>
 80079f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f6:	3b01      	subs	r3, #1
 80079f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e01e      	b.n	8007a54 <USB_EPStartXfer+0x4f8>
 8007a16:	463b      	mov	r3, r7
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d119      	bne.n	8007a54 <USB_EPStartXfer+0x4f8>
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
 8007a26:	1d3b      	adds	r3, r7, #4
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a34:	4413      	add	r3, r2
 8007a36:	657b      	str	r3, [r7, #84]	; 0x54
 8007a38:	463b      	mov	r3, r7
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	011a      	lsls	r2, r3, #4
 8007a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
 8007a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a54:	463b      	mov	r3, r7
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	891b      	ldrh	r3, [r3, #8]
 8007a5a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6959      	ldr	r1, [r3, #20]
 8007a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007a6e:	1d38      	adds	r0, r7, #4
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	f000 ffd1 	bl	8008a18 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a76:	463b      	mov	r3, r7
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a80:	441a      	add	r2, r3
 8007a82:	463b      	mov	r3, r7
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	463b      	mov	r3, r7
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d909      	bls.n	8007aac <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007a98:	463b      	mov	r3, r7
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	621a      	str	r2, [r3, #32]
 8007aaa:	e008      	b.n	8007abe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007aac:	463b      	mov	r3, r7
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d164      	bne.n	8007b98 <USB_EPStartXfer+0x63c>
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	4413      	add	r3, r2
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	011a      	lsls	r2, r3, #4
 8007aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af0:	4413      	add	r3, r2
 8007af2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d112      	bne.n	8007b26 <USB_EPStartXfer+0x5ca>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	e054      	b.n	8007bd0 <USB_EPStartXfer+0x674>
 8007b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2c:	d817      	bhi.n	8007b5e <USB_EPStartXfer+0x602>
 8007b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <USB_EPStartXfer+0x5f2>
 8007b44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	029b      	lsls	r3, r3, #10
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e038      	b.n	8007bd0 <USB_EPStartXfer+0x674>
 8007b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USB_EPStartXfer+0x622>
 8007b74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e01b      	b.n	8007bd0 <USB_EPStartXfer+0x674>
 8007b98:	463b      	mov	r3, r7
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d116      	bne.n	8007bd0 <USB_EPStartXfer+0x674>
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb0:	4413      	add	r3, r2
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	011a      	lsls	r2, r3, #4
 8007bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	895b      	ldrh	r3, [r3, #10]
 8007bd6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6959      	ldr	r1, [r3, #20]
 8007be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007bea:	1d38      	adds	r0, r7, #4
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f000 ff13 	bl	8008a18 <USB_WritePMA>
 8007bf2:	e1e2      	b.n	8007fba <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007bfe:	1d3b      	adds	r3, r7, #4
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	463b      	mov	r3, r7
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	463b      	mov	r3, r7
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	663b      	str	r3, [r7, #96]	; 0x60
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c56:	4413      	add	r3, r2
 8007c58:	663b      	str	r3, [r7, #96]	; 0x60
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	891b      	ldrh	r3, [r3, #8]
 8007c7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6959      	ldr	r1, [r3, #20]
 8007c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007c90:	1d38      	adds	r0, r7, #4
 8007c92:	6800      	ldr	r0, [r0, #0]
 8007c94:	f000 fec0 	bl	8008a18 <USB_WritePMA>
 8007c98:	e18f      	b.n	8007fba <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c9a:	1d3b      	adds	r3, r7, #4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 808f 	beq.w	8007dd4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d164      	bne.n	8007d90 <USB_EPStartXfer+0x834>
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ccc:	1d3b      	adds	r3, r7, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cda:	4413      	add	r3, r2
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	011a      	lsls	r2, r3, #4
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d112      	bne.n	8007d1e <USB_EPStartXfer+0x7c2>
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	801a      	strh	r2, [r3, #0]
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e054      	b.n	8007dc8 <USB_EPStartXfer+0x86c>
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d22:	2b3e      	cmp	r3, #62	; 0x3e
 8007d24:	d817      	bhi.n	8007d56 <USB_EPStartXfer+0x7fa>
 8007d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_EPStartXfer+0x7ea>
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	029b      	lsls	r3, r3, #10
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e038      	b.n	8007dc8 <USB_EPStartXfer+0x86c>
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <USB_EPStartXfer+0x81a>
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	3b01      	subs	r3, #1
 8007d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e01b      	b.n	8007dc8 <USB_EPStartXfer+0x86c>
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d116      	bne.n	8007dc8 <USB_EPStartXfer+0x86c>
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da8:	4413      	add	r3, r2
 8007daa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dac:	463b      	mov	r3, r7
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	011a      	lsls	r2, r3, #4
 8007db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db6:	4413      	add	r3, r2
 8007db8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8007dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007dc8:	463b      	mov	r3, r7
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007dd2:	e097      	b.n	8007f04 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d168      	bne.n	8007eb0 <USB_EPStartXfer+0x954>
 8007dde:	1d3b      	adds	r3, r7, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007df6:	4413      	add	r3, r2
 8007df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	011a      	lsls	r2, r3, #4
 8007e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e08:	4413      	add	r3, r2
 8007e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d112      	bne.n	8007e3e <USB_EPStartXfer+0x8e2>
 8007e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e26:	801a      	strh	r2, [r3, #0]
 8007e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e05d      	b.n	8007efa <USB_EPStartXfer+0x99e>
 8007e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e42:	2b3e      	cmp	r3, #62	; 0x3e
 8007e44:	d817      	bhi.n	8007e76 <USB_EPStartXfer+0x91a>
 8007e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <USB_EPStartXfer+0x90a>
 8007e5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e60:	3301      	adds	r3, #1
 8007e62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	029b      	lsls	r3, r3, #10
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e041      	b.n	8007efa <USB_EPStartXfer+0x99e>
 8007e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <USB_EPStartXfer+0x93a>
 8007e8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	029b      	lsls	r3, r3, #10
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	e024      	b.n	8007efa <USB_EPStartXfer+0x99e>
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d11f      	bne.n	8007efa <USB_EPStartXfer+0x99e>
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ed8:	463b      	mov	r3, r7
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	011a      	lsls	r2, r3, #4
 8007ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ef8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007efa:	463b      	mov	r3, r7
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	891b      	ldrh	r3, [r3, #8]
 8007f00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f04:	463b      	mov	r3, r7
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6959      	ldr	r1, [r3, #20]
 8007f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f14:	1d38      	adds	r0, r7, #4
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	f000 fd7e 	bl	8008a18 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d122      	bne.n	8007f6c <USB_EPStartXfer+0xa10>
 8007f26:	1d3b      	adds	r3, r7, #4
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	463b      	mov	r3, r7
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	441a      	add	r2, r3
 8007f52:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	8013      	strh	r3, [r2, #0]
 8007f6a:	e026      	b.n	8007fba <USB_EPStartXfer+0xa5e>
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d121      	bne.n	8007fba <USB_EPStartXfer+0xa5e>
 8007f76:	1d3b      	adds	r3, r7, #4
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f90:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	463b      	mov	r3, r7
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	441a      	add	r2, r3
 8007fa2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007fba:	1d3b      	adds	r3, r7, #4
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f107 020e 	add.w	r2, r7, #14
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd8:	8013      	strh	r3, [r2, #0]
 8007fda:	f107 030e 	add.w	r3, r7, #14
 8007fde:	f107 020e 	add.w	r2, r7, #14
 8007fe2:	8812      	ldrh	r2, [r2, #0]
 8007fe4:	f082 0210 	eor.w	r2, r2, #16
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	f107 030e 	add.w	r3, r7, #14
 8007fee:	f107 020e 	add.w	r2, r7, #14
 8007ff2:	8812      	ldrh	r2, [r2, #0]
 8007ff4:	f082 0220 	eor.w	r2, r2, #32
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	441a      	add	r2, r3
 8008008:	f107 030e 	add.w	r3, r7, #14
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]
 8008022:	e3b5      	b.n	8008790 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008024:	463b      	mov	r3, r7
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	7b1b      	ldrb	r3, [r3, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 8090 	bne.w	8008150 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	429a      	cmp	r2, r3
 800803e:	d90e      	bls.n	800805e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800804a:	463b      	mov	r3, r7
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008054:	1ad2      	subs	r2, r2, r3
 8008056:	463b      	mov	r3, r7
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	619a      	str	r2, [r3, #24]
 800805c:	e008      	b.n	8008070 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008068:	463b      	mov	r3, r7
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2200      	movs	r2, #0
 800806e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008070:	1d3b      	adds	r3, r7, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008080:	b29b      	uxth	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008088:	4413      	add	r3, r2
 800808a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800808e:	463b      	mov	r3, r7
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	011a      	lsls	r2, r3, #4
 8008096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800809a:	4413      	add	r3, r2
 800809c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d116      	bne.n	80080da <USB_EPStartXfer+0xb7e>
 80080ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e32c      	b.n	8008734 <USB_EPStartXfer+0x11d8>
 80080da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080de:	2b3e      	cmp	r3, #62	; 0x3e
 80080e0:	d818      	bhi.n	8008114 <USB_EPStartXfer+0xbb8>
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USB_EPStartXfer+0xba6>
 80080f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080fc:	3301      	adds	r3, #1
 80080fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008106:	b29b      	uxth	r3, r3
 8008108:	029b      	lsls	r3, r3, #10
 800810a:	b29a      	uxth	r2, r3
 800810c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e30f      	b.n	8008734 <USB_EPStartXfer+0x11d8>
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	2b00      	cmp	r3, #0
 8008128:	d104      	bne.n	8008134 <USB_EPStartXfer+0xbd8>
 800812a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800812e:	3b01      	subs	r3, #1
 8008130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008134:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008138:	b29b      	uxth	r3, r3
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	b29b      	uxth	r3, r3
 800813e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008146:	b29a      	uxth	r2, r3
 8008148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e2f1      	b.n	8008734 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008150:	463b      	mov	r3, r7
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	78db      	ldrb	r3, [r3, #3]
 8008156:	2b02      	cmp	r3, #2
 8008158:	f040 818f 	bne.w	800847a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800815c:	463b      	mov	r3, r7
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d175      	bne.n	8008252 <USB_EPStartXfer+0xcf6>
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800817e:	4413      	add	r3, r2
 8008180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008184:	463b      	mov	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	011a      	lsls	r2, r3, #4
 800818c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008190:	4413      	add	r3, r2
 8008192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d116      	bne.n	80081d2 <USB_EPStartXfer+0xc76>
 80081a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	e065      	b.n	800829e <USB_EPStartXfer+0xd42>
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b3e      	cmp	r3, #62	; 0x3e
 80081da:	d81a      	bhi.n	8008212 <USB_EPStartXfer+0xcb6>
 80081dc:	463b      	mov	r3, r7
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <USB_EPStartXfer+0xca4>
 80081f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081fa:	3301      	adds	r3, #1
 80081fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008200:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008204:	b29b      	uxth	r3, r3
 8008206:	029b      	lsls	r3, r3, #10
 8008208:	b29a      	uxth	r2, r3
 800820a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	e045      	b.n	800829e <USB_EPStartXfer+0xd42>
 8008212:	463b      	mov	r3, r7
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <USB_EPStartXfer+0xcda>
 800822c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008230:	3b01      	subs	r3, #1
 8008232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800823a:	b29b      	uxth	r3, r3
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	b29b      	uxth	r3, r3
 8008240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	e025      	b.n	800829e <USB_EPStartXfer+0xd42>
 8008252:	463b      	mov	r3, r7
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d120      	bne.n	800829e <USB_EPStartXfer+0xd42>
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826c:	b29b      	uxth	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008274:	4413      	add	r3, r2
 8008276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800827a:	463b      	mov	r3, r7
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	011a      	lsls	r2, r3, #4
 8008282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008286:	4413      	add	r3, r2
 8008288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800828c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	b29a      	uxth	r2, r3
 8008298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082a6:	463b      	mov	r3, r7
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	785b      	ldrb	r3, [r3, #1]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d175      	bne.n	800839c <USB_EPStartXfer+0xe40>
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082c8:	4413      	add	r3, r2
 80082ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082ce:	463b      	mov	r3, r7
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	011a      	lsls	r2, r3, #4
 80082d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082da:	4413      	add	r3, r2
 80082dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082e4:	463b      	mov	r3, r7
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d116      	bne.n	800831c <USB_EPStartXfer+0xdc0>
 80082ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008312:	b29a      	uxth	r2, r3
 8008314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	e061      	b.n	80083e0 <USB_EPStartXfer+0xe84>
 800831c:	463b      	mov	r3, r7
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b3e      	cmp	r3, #62	; 0x3e
 8008324:	d81a      	bhi.n	800835c <USB_EPStartXfer+0xe00>
 8008326:	463b      	mov	r3, r7
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008332:	463b      	mov	r3, r7
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <USB_EPStartXfer+0xdee>
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	3301      	adds	r3, #1
 8008346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	b29b      	uxth	r3, r3
 8008350:	029b      	lsls	r3, r3, #10
 8008352:	b29a      	uxth	r2, r3
 8008354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	e041      	b.n	80083e0 <USB_EPStartXfer+0xe84>
 800835c:	463b      	mov	r3, r7
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008368:	463b      	mov	r3, r7
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <USB_EPStartXfer+0xe24>
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	3b01      	subs	r3, #1
 800837c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008384:	b29b      	uxth	r3, r3
 8008386:	029b      	lsls	r3, r3, #10
 8008388:	b29b      	uxth	r3, r3
 800838a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	e021      	b.n	80083e0 <USB_EPStartXfer+0xe84>
 800839c:	463b      	mov	r3, r7
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d11c      	bne.n	80083e0 <USB_EPStartXfer+0xe84>
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083b6:	4413      	add	r3, r2
 80083b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	011a      	lsls	r2, r3, #4
 80083c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 81a4 	beq.w	8008734 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	463b      	mov	r3, r7
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008400:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <USB_EPStartXfer+0xebc>
 800840c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10d      	bne.n	8008434 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008418:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800841c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 8187 	bne.w	8008734 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008426:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 8180 	bne.w	8008734 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	463b      	mov	r3, r7
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	441a      	add	r2, r3
 8008460:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
 8008478:	e15c      	b.n	8008734 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800847a:	463b      	mov	r3, r7
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	2b01      	cmp	r3, #1
 8008482:	f040 8155 	bne.w	8008730 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008486:	463b      	mov	r3, r7
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	463b      	mov	r3, r7
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	429a      	cmp	r2, r3
 8008494:	d90e      	bls.n	80084b4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008496:	463b      	mov	r3, r7
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80084a0:	463b      	mov	r3, r7
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	463b      	mov	r3, r7
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	619a      	str	r2, [r3, #24]
 80084b2:	e008      	b.n	80084c6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80084b4:	463b      	mov	r3, r7
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80084be:	463b      	mov	r3, r7
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2200      	movs	r2, #0
 80084c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084c6:	463b      	mov	r3, r7
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d16f      	bne.n	80085b0 <USB_EPStartXfer+0x1054>
 80084d0:	1d3b      	adds	r3, r7, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084d8:	1d3b      	adds	r3, r7, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	461a      	mov	r2, r3
 80084e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084e8:	4413      	add	r3, r2
 80084ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084ee:	463b      	mov	r3, r7
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	011a      	lsls	r2, r3, #4
 80084f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084fa:	4413      	add	r3, r2
 80084fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d116      	bne.n	800853a <USB_EPStartXfer+0xfde>
 800850c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008530:	b29a      	uxth	r2, r3
 8008532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e05f      	b.n	80085fa <USB_EPStartXfer+0x109e>
 800853a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800853e:	2b3e      	cmp	r3, #62	; 0x3e
 8008540:	d818      	bhi.n	8008574 <USB_EPStartXfer+0x1018>
 8008542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800854c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <USB_EPStartXfer+0x1006>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	3301      	adds	r3, #1
 800855e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29a      	uxth	r2, r3
 800856c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	e042      	b.n	80085fa <USB_EPStartXfer+0x109e>
 8008574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800857e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008582:	f003 031f 	and.w	r3, r3, #31
 8008586:	2b00      	cmp	r3, #0
 8008588:	d104      	bne.n	8008594 <USB_EPStartXfer+0x1038>
 800858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858e:	3b01      	subs	r3, #1
 8008590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008598:	b29b      	uxth	r3, r3
 800859a:	029b      	lsls	r3, r3, #10
 800859c:	b29b      	uxth	r3, r3
 800859e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	e024      	b.n	80085fa <USB_EPStartXfer+0x109e>
 80085b0:	463b      	mov	r3, r7
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d11f      	bne.n	80085fa <USB_EPStartXfer+0x109e>
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085c2:	1d3b      	adds	r3, r7, #4
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085d2:	4413      	add	r3, r2
 80085d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	011a      	lsls	r2, r3, #4
 80085e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085e4:	4413      	add	r3, r2
 80085e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	1d3b      	adds	r3, r7, #4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008602:	463b      	mov	r3, r7
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d16f      	bne.n	80086ec <USB_EPStartXfer+0x1190>
 800860c:	1d3b      	adds	r3, r7, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861c:	b29b      	uxth	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008624:	4413      	add	r3, r2
 8008626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800862a:	463b      	mov	r3, r7
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	011a      	lsls	r2, r3, #4
 8008632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008636:	4413      	add	r3, r2
 8008638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800863c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d116      	bne.n	8008676 <USB_EPStartXfer+0x111a>
 8008648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008654:	b29a      	uxth	r2, r3
 8008656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e05e      	b.n	8008734 <USB_EPStartXfer+0x11d8>
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800867a:	2b3e      	cmp	r3, #62	; 0x3e
 800867c:	d818      	bhi.n	80086b0 <USB_EPStartXfer+0x1154>
 800867e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <USB_EPStartXfer+0x1142>
 8008694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008698:	3301      	adds	r3, #1
 800869a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800869e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	029b      	lsls	r3, r3, #10
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	e041      	b.n	8008734 <USB_EPStartXfer+0x11d8>
 80086b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d104      	bne.n	80086d0 <USB_EPStartXfer+0x1174>
 80086c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ca:	3b01      	subs	r3, #1
 80086cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	029b      	lsls	r3, r3, #10
 80086d8:	b29b      	uxth	r3, r3
 80086da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	e023      	b.n	8008734 <USB_EPStartXfer+0x11d8>
 80086ec:	463b      	mov	r3, r7
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	785b      	ldrb	r3, [r3, #1]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d11e      	bne.n	8008734 <USB_EPStartXfer+0x11d8>
 80086f6:	1d3b      	adds	r3, r7, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fe:	b29b      	uxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008706:	4413      	add	r3, r2
 8008708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800870c:	463b      	mov	r3, r7
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	011a      	lsls	r2, r3, #4
 8008714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008718:	4413      	add	r3, r2
 800871a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800871e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008726:	b29a      	uxth	r2, r3
 8008728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	e001      	b.n	8008734 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e02e      	b.n	8008792 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	463b      	mov	r3, r7
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800874a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008752:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008756:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800875a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800875e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008762:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008766:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800876a:	1d3b      	adds	r3, r7, #4
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800877c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878c:	b29b      	uxth	r3, r3
 800878e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d020      	beq.n	80087f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	81bb      	strh	r3, [r7, #12]
 80087c6:	89bb      	ldrh	r3, [r7, #12]
 80087c8:	f083 0310 	eor.w	r3, r3, #16
 80087cc:	81bb      	strh	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	441a      	add	r2, r3
 80087d8:	89bb      	ldrh	r3, [r7, #12]
 80087da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8013      	strh	r3, [r2, #0]
 80087ee:	e01f      	b.n	8008830 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008806:	81fb      	strh	r3, [r7, #14]
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800880e:	81fb      	strh	r3, [r7, #14]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	89fb      	ldrh	r3, [r7, #14]
 800881c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882c:	b29b      	uxth	r3, r3
 800882e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	7b1b      	ldrb	r3, [r3, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 809d 	bne.w	800898a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d04c      	beq.n	80088f2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	823b      	strh	r3, [r7, #16]
 8008866:	8a3b      	ldrh	r3, [r7, #16]
 8008868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01b      	beq.n	80088a8 <USB_EPClearStall+0x6c>
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	81fb      	strh	r3, [r7, #14]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	441a      	add	r2, r3
 8008892:	89fb      	ldrh	r3, [r7, #14]
 8008894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800889c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	78db      	ldrb	r3, [r3, #3]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d06c      	beq.n	800898a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c6:	81bb      	strh	r3, [r7, #12]
 80088c8:	89bb      	ldrh	r3, [r7, #12]
 80088ca:	f083 0320 	eor.w	r3, r3, #32
 80088ce:	81bb      	strh	r3, [r7, #12]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	89bb      	ldrh	r3, [r7, #12]
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]
 80088f0:	e04b      	b.n	800898a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	82fb      	strh	r3, [r7, #22]
 8008900:	8afb      	ldrh	r3, [r7, #22]
 8008902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01b      	beq.n	8008942 <USB_EPClearStall+0x106>
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008920:	82bb      	strh	r3, [r7, #20]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	8abb      	ldrh	r3, [r7, #20]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008958:	827b      	strh	r3, [r7, #18]
 800895a:	8a7b      	ldrh	r3, [r7, #18]
 800895c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008960:	827b      	strh	r3, [r7, #18]
 8008962:	8a7b      	ldrh	r3, [r7, #18]
 8008964:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008968:	827b      	strh	r3, [r7, #18]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	441a      	add	r2, r3
 8008974:	8a7b      	ldrh	r3, [r7, #18]
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr

08008996 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2280      	movs	r2, #128	; 0x80
 80089ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr

080089bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b08d      	sub	sp, #52	; 0x34
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	460b      	mov	r3, r1
 8008a28:	80fb      	strh	r3, [r7, #6]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a2e:	88bb      	ldrh	r3, [r7, #4]
 8008a30:	3301      	adds	r3, #1
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a3e:	88fb      	ldrh	r3, [r7, #6]
 8008a40:	005a      	lsls	r2, r3, #1
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a50:	e01e      	b.n	8008a90 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	3302      	adds	r3, #2
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	3301      	adds	r3, #1
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1dd      	bne.n	8008a52 <USB_WritePMA+0x3a>
  }
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	3734      	adds	r7, #52	; 0x34
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr

08008aa2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b08b      	sub	sp, #44	; 0x2c
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	80fb      	strh	r3, [r7, #6]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ab8:	88bb      	ldrh	r3, [r7, #4]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	005a      	lsls	r2, r3, #1
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8008ada:	e01b      	b.n	8008b14 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	0a1b      	lsrs	r3, r3, #8
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	3b01      	subs	r3, #1
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e0      	bne.n	8008adc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b1a:	88bb      	ldrh	r3, [r7, #4]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	701a      	strb	r2, [r3, #0]
  }
}
 8008b36:	bf00      	nop
 8008b38:	372c      	adds	r7, #44	; 0x2c
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr

08008b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7c1b      	ldrb	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d115      	bne.n	8008b84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	2181      	movs	r1, #129	; 0x81
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fe90 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b70:	2202      	movs	r2, #2
 8008b72:	2101      	movs	r1, #1
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fe86 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008b82:	e012      	b.n	8008baa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	2202      	movs	r2, #2
 8008b88:	2181      	movs	r1, #129	; 0x81
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fe7b 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b96:	2340      	movs	r3, #64	; 0x40
 8008b98:	2202      	movs	r2, #2
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fe72 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008baa:	2308      	movs	r3, #8
 8008bac:	2203      	movs	r2, #3
 8008bae:	2182      	movs	r1, #130	; 0x82
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fe68 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bc0:	f001 ff88 	bl	800aad4 <USBD_static_malloc>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	73fb      	strb	r3, [r7, #15]
 8008bda:	e026      	b.n	8008c2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7c1b      	ldrb	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c10:	2101      	movs	r1, #1
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 ff28 	bl	800aa68 <USBD_LL_PrepareReceive>
 8008c18:	e007      	b.n	8008c2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c20:	2340      	movs	r3, #64	; 0x40
 8008c22:	2101      	movs	r1, #1
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 ff1f 	bl	800aa68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c44:	2181      	movs	r1, #129	; 0x81
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 fe43 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c52:	2101      	movs	r1, #1
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 fe3c 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c62:	2182      	movs	r1, #130	; 0x82
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fe34 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 ff2e 	bl	800aaec <USBD_static_free>
    pdev->pClassData = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b086      	sub	sp, #24
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d039      	beq.n	8008d40 <USBD_CDC_Setup+0x9e>
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d17f      	bne.n	8008dd0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	88db      	ldrh	r3, [r3, #6]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d029      	beq.n	8008d2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b25b      	sxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da11      	bge.n	8008d06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008cee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	88d2      	ldrh	r2, [r2, #6]
 8008cf4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008cf6:	6939      	ldr	r1, [r7, #16]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	88db      	ldrh	r3, [r3, #6]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 fa09 	bl	800a116 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d04:	e06b      	b.n	8008dde <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785a      	ldrb	r2, [r3, #1]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	88db      	ldrh	r3, [r3, #6]
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d1c:	6939      	ldr	r1, [r7, #16]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88db      	ldrh	r3, [r3, #6]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fa24 	bl	800a172 <USBD_CtlPrepareRx>
      break;
 8008d2a:	e058      	b.n	8008dde <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	7850      	ldrb	r0, [r2, #1]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	4798      	blx	r3
      break;
 8008d3e:	e04e      	b.n	8008dde <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b0b      	cmp	r3, #11
 8008d46:	d02e      	beq.n	8008da6 <USBD_CDC_Setup+0x104>
 8008d48:	2b0b      	cmp	r3, #11
 8008d4a:	dc38      	bgt.n	8008dbe <USBD_CDC_Setup+0x11c>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <USBD_CDC_Setup+0xb4>
 8008d50:	2b0a      	cmp	r3, #10
 8008d52:	d014      	beq.n	8008d7e <USBD_CDC_Setup+0xdc>
 8008d54:	e033      	b.n	8008dbe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d107      	bne.n	8008d70 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	2202      	movs	r2, #2
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f9d4 	bl	800a116 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d6e:	e02e      	b.n	8008dce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 f965 	bl	800a042 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7c:	e027      	b.n	8008dce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d107      	bne.n	8008d98 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d88:	f107 030f 	add.w	r3, r7, #15
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 f9c0 	bl	800a116 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d96:	e01a      	b.n	8008dce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 f951 	bl	800a042 <USBD_CtlError>
            ret = USBD_FAIL;
 8008da0:	2302      	movs	r3, #2
 8008da2:	75fb      	strb	r3, [r7, #23]
          break;
 8008da4:	e013      	b.n	8008dce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d00d      	beq.n	8008dcc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f945 	bl	800a042 <USBD_CtlError>
            ret = USBD_FAIL;
 8008db8:	2302      	movs	r3, #2
 8008dba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dbc:	e006      	b.n	8008dcc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f93e 	bl	800a042 <USBD_CtlError>
          ret = USBD_FAIL;
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dca:	e000      	b.n	8008dce <USBD_CDC_Setup+0x12c>
          break;
 8008dcc:	bf00      	nop
      }
      break;
 8008dce:	e006      	b.n	8008dde <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f935 	bl	800a042 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	75fb      	strb	r3, [r7, #23]
      break;
 8008ddc:	bf00      	nop
  }

  return ret;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e02:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d03a      	beq.n	8008e84 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	331c      	adds	r3, #28
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d029      	beq.n	8008e78 <USBD_CDC_DataIn+0x90>
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	331c      	adds	r3, #28
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	78f9      	ldrb	r1, [r7, #3]
 8008e38:	68b8      	ldr	r0, [r7, #8]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	4403      	add	r3, r0
 8008e44:	3338      	adds	r3, #56	; 0x38
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e4c:	fb03 f301 	mul.w	r3, r3, r1
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d110      	bne.n	8008e78 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	331c      	adds	r3, #28
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e6a:	78f9      	ldrb	r1, [r7, #3]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fdd6 	bl	800aa22 <USBD_LL_Transmit>
 8008e76:	e003      	b.n	8008e80 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e000      	b.n	8008e86 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008e84:	2302      	movs	r3, #2
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 fe01 	bl	800aaae <USBD_LL_GetRxDataSize>
 8008eac:	4602      	mov	r2, r0
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00d      	beq.n	8008eda <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4798      	blx	r3

    return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e000      	b.n	8008edc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008eda:	2302      	movs	r3, #2
  }
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d015      	beq.n	8008f2a <USBD_CDC_EP0_RxReady+0x46>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f04:	2bff      	cmp	r3, #255	; 0xff
 8008f06:	d010      	beq.n	8008f2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2243      	movs	r2, #67	; 0x43
 8008f40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f42:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000110 	.word	0x20000110

08008f54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2243      	movs	r2, #67	; 0x43
 8008f60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f62:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	200000cc 	.word	0x200000cc

08008f74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2243      	movs	r2, #67	; 0x43
 8008f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000154 	.word	0x20000154

08008f94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	220a      	movs	r2, #10
 8008fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008fa2:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20000088 	.word	0x20000088

08008fb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ffe:	88fa      	ldrh	r2, [r7, #6]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009022:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009046:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01c      	beq.n	800908c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009058:	2b00      	cmp	r3, #0
 800905a:	d115      	bne.n	8009088 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800907a:	b29b      	uxth	r3, r3
 800907c:	2181      	movs	r1, #129	; 0x81
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fccf 	bl	800aa22 <USBD_LL_Transmit>

      return USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e002      	b.n	800908e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009088:	2301      	movs	r3, #1
 800908a:	e000      	b.n	800908e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d017      	beq.n	80090e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7c1b      	ldrb	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c2:	2101      	movs	r1, #1
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 fccf 	bl	800aa68 <USBD_LL_PrepareReceive>
 80090ca:	e007      	b.n	80090dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	2101      	movs	r1, #1
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fcc6 	bl	800aa68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	e000      	b.n	80090e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80090e0:	2302      	movs	r3, #2
  }
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	4613      	mov	r3, r2
 80090f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090fe:	2302      	movs	r3, #2
 8009100:	e01a      	b.n	8009138 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	79fa      	ldrb	r2, [r7, #7]
 800912e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f001 fb33 	bl	800a79c <USBD_LL_Init>

  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d006      	beq.n	8009162 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	e001      	b.n	8009166 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009162:	2302      	movs	r3, #2
 8009164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr

08009172 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fb68 	bl	800a850 <USBD_LL_Start>

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091aa:	2302      	movs	r3, #2
 80091ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00c      	beq.n	80091d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	4611      	mov	r1, r2
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	78fa      	ldrb	r2, [r7, #3]
 80091f2:	4611      	mov	r1, r2
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4798      	blx	r3

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fed8 	bl	8009fca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009228:	461a      	mov	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009236:	f003 031f 	and.w	r3, r3, #31
 800923a:	2b02      	cmp	r3, #2
 800923c:	d016      	beq.n	800926c <USBD_LL_SetupStage+0x6a>
 800923e:	2b02      	cmp	r3, #2
 8009240:	d81c      	bhi.n	800927c <USBD_LL_SetupStage+0x7a>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <USBD_LL_SetupStage+0x4a>
 8009246:	2b01      	cmp	r3, #1
 8009248:	d008      	beq.n	800925c <USBD_LL_SetupStage+0x5a>
 800924a:	e017      	b.n	800927c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f9cb 	bl	80095f0 <USBD_StdDevReq>
      break;
 800925a:	e01a      	b.n	8009292 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fa2d 	bl	80096c4 <USBD_StdItfReq>
      break;
 800926a:	e012      	b.n	8009292 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fa6d 	bl	8009754 <USBD_StdEPReq>
      break;
 800927a:	e00a      	b.n	8009292 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 fb40 	bl	800a910 <USBD_LL_StallEP>
      break;
 8009290:	bf00      	nop
  }

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	460b      	mov	r3, r1
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d14b      	bne.n	8009348 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d134      	bne.n	800932c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d919      	bls.n	8009302 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d203      	bcs.n	80092f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	e002      	b.n	80092f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	461a      	mov	r2, r3
 80092f8:	6879      	ldr	r1, [r7, #4]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 ff57 	bl	800a1ae <USBD_CtlContinueRx>
 8009300:	e038      	b.n	8009374 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009314:	2b03      	cmp	r3, #3
 8009316:	d105      	bne.n	8009324 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 ff54 	bl	800a1d2 <USBD_CtlSendStatus>
 800932a:	e023      	b.n	8009374 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009332:	2b05      	cmp	r3, #5
 8009334:	d11e      	bne.n	8009374 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800933e:	2100      	movs	r1, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f001 fae5 	bl	800a910 <USBD_LL_StallEP>
 8009346:	e015      	b.n	8009374 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00d      	beq.n	8009370 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800935a:	2b03      	cmp	r3, #3
 800935c:	d108      	bne.n	8009370 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	7afa      	ldrb	r2, [r7, #11]
 8009368:	4611      	mov	r1, r2
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	4798      	blx	r3
 800936e:	e001      	b.n	8009374 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009370:	2302      	movs	r3, #2
 8009372:	e000      	b.n	8009376 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	460b      	mov	r3, r1
 8009388:	607a      	str	r2, [r7, #4]
 800938a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d17f      	bne.n	8009492 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3314      	adds	r3, #20
 8009396:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d15c      	bne.n	800945c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d915      	bls.n	80093da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fec1 	bl	800a14e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093cc:	2300      	movs	r3, #0
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 fb48 	bl	800aa68 <USBD_LL_PrepareReceive>
 80093d8:	e04e      	b.n	8009478 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	6912      	ldr	r2, [r2, #16]
 80093e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80093e6:	fb02 f201 	mul.w	r2, r2, r1
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d11c      	bne.n	800942a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d316      	bcc.n	800942a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009406:	429a      	cmp	r2, r3
 8009408:	d20f      	bcs.n	800942a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800940a:	2200      	movs	r2, #0
 800940c:	2100      	movs	r1, #0
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fe9d 	bl	800a14e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800941c:	2300      	movs	r3, #0
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f001 fb20 	bl	800aa68 <USBD_LL_PrepareReceive>
 8009428:	e026      	b.n	8009478 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800943c:	2b03      	cmp	r3, #3
 800943e:	d105      	bne.n	800944c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800944c:	2180      	movs	r1, #128	; 0x80
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f001 fa5e 	bl	800a910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fecf 	bl	800a1f8 <USBD_CtlReceiveStatus>
 800945a:	e00d      	b.n	8009478 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009462:	2b04      	cmp	r3, #4
 8009464:	d004      	beq.n	8009470 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009470:	2180      	movs	r1, #128	; 0x80
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f001 fa4c 	bl	800a910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d11d      	bne.n	80094be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff fe81 	bl	800918a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009490:	e015      	b.n	80094be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00d      	beq.n	80094ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d108      	bne.n	80094ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	7afa      	ldrb	r2, [r7, #11]
 80094b2:	4611      	mov	r1, r2
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	4798      	blx	r3
 80094b8:	e001      	b.n	80094be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	e000      	b.n	80094c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 f9d5 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2240      	movs	r2, #64	; 0x40
 80094e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094ec:	2340      	movs	r3, #64	; 0x40
 80094ee:	2200      	movs	r2, #0
 80094f0:	2180      	movs	r1, #128	; 0x80
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f9c7 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2240      	movs	r2, #64	; 0x40
 8009502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6852      	ldr	r2, [r2, #4]
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	4611      	mov	r1, r2
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
  }

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	bc80      	pop	{r7}
 8009566:	4770      	bx	lr

08009568 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2204      	movs	r2, #4
 8009580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr

08009590 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d105      	bne.n	80095ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d10b      	bne.n	80095e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d005      	beq.n	8009616 <USBD_StdDevReq+0x26>
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d84f      	bhi.n	80096ae <USBD_StdDevReq+0xbe>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <USBD_StdDevReq+0x36>
 8009612:	2b20      	cmp	r3, #32
 8009614:	d14b      	bne.n	80096ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
      break;
 8009624:	e048      	b.n	80096b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	2b09      	cmp	r3, #9
 800962c:	d839      	bhi.n	80096a2 <USBD_StdDevReq+0xb2>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <USBD_StdDevReq+0x44>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009685 	.word	0x08009685
 8009638:	08009699 	.word	0x08009699
 800963c:	080096a3 	.word	0x080096a3
 8009640:	0800968f 	.word	0x0800968f
 8009644:	080096a3 	.word	0x080096a3
 8009648:	08009667 	.word	0x08009667
 800964c:	0800965d 	.word	0x0800965d
 8009650:	080096a3 	.word	0x080096a3
 8009654:	0800967b 	.word	0x0800967b
 8009658:	08009671 	.word	0x08009671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f9dc 	bl	8009a1c <USBD_GetDescriptor>
          break;
 8009664:	e022      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb3f 	bl	8009cec <USBD_SetAddress>
          break;
 800966e:	e01d      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fb7e 	bl	8009d74 <USBD_SetConfig>
          break;
 8009678:	e018      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fc07 	bl	8009e90 <USBD_GetConfig>
          break;
 8009682:	e013      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fc37 	bl	8009efa <USBD_GetStatus>
          break;
 800968c:	e00e      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fc65 	bl	8009f60 <USBD_SetFeature>
          break;
 8009696:	e009      	b.n	80096ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fc74 	bl	8009f88 <USBD_ClrFeature>
          break;
 80096a0:	e004      	b.n	80096ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fccc 	bl	800a042 <USBD_CtlError>
          break;
 80096aa:	bf00      	nop
      }
      break;
 80096ac:	e004      	b.n	80096b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fcc6 	bl	800a042 <USBD_CtlError>
      break;
 80096b6:	bf00      	nop
  }

  return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop

080096c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096da:	2b40      	cmp	r3, #64	; 0x40
 80096dc:	d005      	beq.n	80096ea <USBD_StdItfReq+0x26>
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d82e      	bhi.n	8009740 <USBD_StdItfReq+0x7c>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <USBD_StdItfReq+0x26>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d12a      	bne.n	8009740 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	3b01      	subs	r3, #1
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d81d      	bhi.n	8009732 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	889b      	ldrh	r3, [r3, #4]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d813      	bhi.n	8009728 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	88db      	ldrh	r3, [r3, #6]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d110      	bne.n	800973c <USBD_StdItfReq+0x78>
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fd56 	bl	800a1d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009726:	e009      	b.n	800973c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fc89 	bl	800a042 <USBD_CtlError>
          break;
 8009730:	e004      	b.n	800973c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc84 	bl	800a042 <USBD_CtlError>
          break;
 800973a:	e000      	b.n	800973e <USBD_StdItfReq+0x7a>
          break;
 800973c:	bf00      	nop
      }
      break;
 800973e:	e004      	b.n	800974a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fc7d 	bl	800a042 <USBD_CtlError>
      break;
 8009748:	bf00      	nop
  }

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	889b      	ldrh	r3, [r3, #4]
 8009766:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009770:	2b40      	cmp	r3, #64	; 0x40
 8009772:	d007      	beq.n	8009784 <USBD_StdEPReq+0x30>
 8009774:	2b40      	cmp	r3, #64	; 0x40
 8009776:	f200 8146 	bhi.w	8009a06 <USBD_StdEPReq+0x2b2>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <USBD_StdEPReq+0x40>
 800977e:	2b20      	cmp	r3, #32
 8009780:	f040 8141 	bne.w	8009a06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
      break;
 8009792:	e13d      	b.n	8009a10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800979c:	2b20      	cmp	r3, #32
 800979e:	d10a      	bne.n	80097b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	e12d      	b.n	8009a12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d007      	beq.n	80097ce <USBD_StdEPReq+0x7a>
 80097be:	2b03      	cmp	r3, #3
 80097c0:	f300 811b 	bgt.w	80099fa <USBD_StdEPReq+0x2a6>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d072      	beq.n	80098ae <USBD_StdEPReq+0x15a>
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d03a      	beq.n	8009842 <USBD_StdEPReq+0xee>
 80097cc:	e115      	b.n	80099fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d002      	beq.n	80097de <USBD_StdEPReq+0x8a>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d015      	beq.n	8009808 <USBD_StdEPReq+0xb4>
 80097dc:	e02b      	b.n	8009836 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <USBD_StdEPReq+0xaa>
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d009      	beq.n	80097fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 f88e 	bl	800a910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80097f4:	2180      	movs	r1, #128	; 0x80
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 f88a 	bl	800a910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097fc:	e020      	b.n	8009840 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc1e 	bl	800a042 <USBD_CtlError>
              break;
 8009806:	e01b      	b.n	8009840 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	885b      	ldrh	r3, [r3, #2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10e      	bne.n	800982e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00b      	beq.n	800982e <USBD_StdEPReq+0xda>
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b80      	cmp	r3, #128	; 0x80
 800981a:	d008      	beq.n	800982e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	88db      	ldrh	r3, [r3, #6]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 f871 	bl	800a910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fccf 	bl	800a1d2 <USBD_CtlSendStatus>

              break;
 8009834:	e004      	b.n	8009840 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fc02 	bl	800a042 <USBD_CtlError>
              break;
 800983e:	bf00      	nop
          }
          break;
 8009840:	e0e0      	b.n	8009a04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009848:	2b02      	cmp	r3, #2
 800984a:	d002      	beq.n	8009852 <USBD_StdEPReq+0xfe>
 800984c:	2b03      	cmp	r3, #3
 800984e:	d015      	beq.n	800987c <USBD_StdEPReq+0x128>
 8009850:	e026      	b.n	80098a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00c      	beq.n	8009872 <USBD_StdEPReq+0x11e>
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d009      	beq.n	8009872 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 f854 	bl	800a910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009868:	2180      	movs	r1, #128	; 0x80
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f850 	bl	800a910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009870:	e01c      	b.n	80098ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fbe4 	bl	800a042 <USBD_CtlError>
              break;
 800987a:	e017      	b.n	80098ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d112      	bne.n	80098aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 f85b 	bl	800a94e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc9a 	bl	800a1d2 <USBD_CtlSendStatus>
              }
              break;
 800989e:	e004      	b.n	80098aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fbcd 	bl	800a042 <USBD_CtlError>
              break;
 80098a8:	e000      	b.n	80098ac <USBD_StdEPReq+0x158>
              break;
 80098aa:	bf00      	nop
          }
          break;
 80098ac:	e0aa      	b.n	8009a04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d002      	beq.n	80098be <USBD_StdEPReq+0x16a>
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d032      	beq.n	8009922 <USBD_StdEPReq+0x1ce>
 80098bc:	e097      	b.n	80099ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <USBD_StdEPReq+0x180>
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b80      	cmp	r3, #128	; 0x80
 80098c8:	d004      	beq.n	80098d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fbb8 	bl	800a042 <USBD_CtlError>
                break;
 80098d2:	e091      	b.n	80099f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da0b      	bge.n	80098f4 <USBD_StdEPReq+0x1a0>
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	3310      	adds	r3, #16
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4413      	add	r3, r2
 80098f0:	3304      	adds	r3, #4
 80098f2:	e00b      	b.n	800990c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	4413      	add	r3, r2
 800990a:	3304      	adds	r3, #4
 800990c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2202      	movs	r2, #2
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fbfb 	bl	800a116 <USBD_CtlSendData>
              break;
 8009920:	e06a      	b.n	80099f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009926:	2b00      	cmp	r3, #0
 8009928:	da11      	bge.n	800994e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	f003 020f 	and.w	r2, r3, #15
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	440b      	add	r3, r1
 800993c:	3318      	adds	r3, #24
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d117      	bne.n	8009974 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fb7b 	bl	800a042 <USBD_CtlError>
                  break;
 800994c:	e054      	b.n	80099f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	f003 020f 	and.w	r2, r3, #15
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d104      	bne.n	8009974 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fb68 	bl	800a042 <USBD_CtlError>
                  break;
 8009972:	e041      	b.n	80099f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009978:	2b00      	cmp	r3, #0
 800997a:	da0b      	bge.n	8009994 <USBD_StdEPReq+0x240>
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	3310      	adds	r3, #16
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	4413      	add	r3, r2
 8009990:	3304      	adds	r3, #4
 8009992:	e00b      	b.n	80099ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	4413      	add	r3, r2
 80099aa:	3304      	adds	r3, #4
 80099ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <USBD_StdEPReq+0x266>
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d103      	bne.n	80099c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e00e      	b.n	80099e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 ffe0 	bl	800a98c <USBD_LL_IsStallEP>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2201      	movs	r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e002      	b.n	80099e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2202      	movs	r2, #2
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fb95 	bl	800a116 <USBD_CtlSendData>
              break;
 80099ec:	e004      	b.n	80099f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb26 	bl	800a042 <USBD_CtlError>
              break;
 80099f6:	bf00      	nop
          }
          break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fb20 	bl	800a042 <USBD_CtlError>
          break;
 8009a02:	bf00      	nop
      }
      break;
 8009a04:	e004      	b.n	8009a10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fb1a 	bl	800a042 <USBD_CtlError>
      break;
 8009a0e:	bf00      	nop
  }

  return ret;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	885b      	ldrh	r3, [r3, #2]
 8009a36:	0a1b      	lsrs	r3, r3, #8
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	2b06      	cmp	r3, #6
 8009a3e:	f200 8128 	bhi.w	8009c92 <USBD_GetDescriptor+0x276>
 8009a42:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <USBD_GetDescriptor+0x2c>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	08009a7d 	.word	0x08009a7d
 8009a50:	08009abd 	.word	0x08009abd
 8009a54:	08009c93 	.word	0x08009c93
 8009a58:	08009c93 	.word	0x08009c93
 8009a5c:	08009c33 	.word	0x08009c33
 8009a60:	08009c5f 	.word	0x08009c5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
      break;
 8009a7a:	e112      	b.n	8009ca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7c1b      	ldrb	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	f107 0208 	add.w	r2, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a9e:	e100      	b.n	8009ca2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	f107 0208 	add.w	r2, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
 8009ab0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	701a      	strb	r2, [r3, #0]
      break;
 8009aba:	e0f2      	b.n	8009ca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	f200 80ac 	bhi.w	8009c20 <USBD_GetDescriptor+0x204>
 8009ac8:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <USBD_GetDescriptor+0xb4>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009b1d 	.word	0x08009b1d
 8009ad8:	08009b51 	.word	0x08009b51
 8009adc:	08009b85 	.word	0x08009b85
 8009ae0:	08009bb9 	.word	0x08009bb9
 8009ae4:	08009bed 	.word	0x08009bed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7c12      	ldrb	r2, [r2, #16]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0a:	e091      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa97 	bl	800a042 <USBD_CtlError>
            err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1a:	e089      	b.n	8009c30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3e:	e077      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa7d 	bl	800a042 <USBD_CtlError>
            err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4e:	e06f      	b.n	8009c30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	7c12      	ldrb	r2, [r2, #16]
 8009b68:	f107 0108 	add.w	r1, r7, #8
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b72:	e05d      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa63 	bl	800a042 <USBD_CtlError>
            err++;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	72fb      	strb	r3, [r7, #11]
          break;
 8009b82:	e055      	b.n	8009c30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7c12      	ldrb	r2, [r2, #16]
 8009b9c:	f107 0108 	add.w	r1, r7, #8
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4798      	blx	r3
 8009ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba6:	e043      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa49 	bl	800a042 <USBD_CtlError>
            err++;
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb6:	e03b      	b.n	8009c30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	7c12      	ldrb	r2, [r2, #16]
 8009bd0:	f107 0108 	add.w	r1, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bda:	e029      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa2f 	bl	800a042 <USBD_CtlError>
            err++;
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	3301      	adds	r3, #1
 8009be8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bea:	e021      	b.n	8009c30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	7c12      	ldrb	r2, [r2, #16]
 8009c04:	f107 0108 	add.w	r1, r7, #8
 8009c08:	4610      	mov	r0, r2
 8009c0a:	4798      	blx	r3
 8009c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c0e:	e00f      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa15 	bl	800a042 <USBD_CtlError>
            err++;
 8009c18:	7afb      	ldrb	r3, [r7, #11]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c1e:	e007      	b.n	8009c30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa0d 	bl	800a042 <USBD_CtlError>
          err++;
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c2e:	e038      	b.n	8009ca2 <USBD_GetDescriptor+0x286>
 8009c30:	e037      	b.n	8009ca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7c1b      	ldrb	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c42:	f107 0208 	add.w	r2, r7, #8
 8009c46:	4610      	mov	r0, r2
 8009c48:	4798      	blx	r3
 8009c4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c4c:	e029      	b.n	8009ca2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f9f6 	bl	800a042 <USBD_CtlError>
        err++;
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c5c:	e021      	b.n	8009ca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7c1b      	ldrb	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10d      	bne.n	8009c82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6e:	f107 0208 	add.w	r2, r7, #8
 8009c72:	4610      	mov	r0, r2
 8009c74:	4798      	blx	r3
 8009c76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	2207      	movs	r2, #7
 8009c7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c80:	e00f      	b.n	8009ca2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f9dc 	bl	800a042 <USBD_CtlError>
        err++;
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c90:	e007      	b.n	8009ca2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f9d4 	bl	800a042 <USBD_CtlError>
      err++;
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca0:	bf00      	nop
  }

  if (err != 0U)
 8009ca2:	7afb      	ldrb	r3, [r7, #11]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11c      	bne.n	8009ce2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ca8:	893b      	ldrh	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d011      	beq.n	8009cd2 <USBD_GetDescriptor+0x2b6>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	88db      	ldrh	r3, [r3, #6]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00d      	beq.n	8009cd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88da      	ldrh	r2, [r3, #6]
 8009cba:	893b      	ldrh	r3, [r7, #8]
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	bf28      	it	cs
 8009cc0:	4613      	movcs	r3, r2
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cc6:	893b      	ldrh	r3, [r7, #8]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa22 	bl	800a116 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	88db      	ldrh	r3, [r3, #6]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fa79 	bl	800a1d2 <USBD_CtlSendStatus>
 8009ce0:	e000      	b.n	8009ce4 <USBD_GetDescriptor+0x2c8>
    return;
 8009ce2:	bf00      	nop
    }
  }
}
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop

08009cec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	889b      	ldrh	r3, [r3, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d130      	bne.n	8009d60 <USBD_SetAddress+0x74>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	88db      	ldrh	r3, [r3, #6]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d12c      	bne.n	8009d60 <USBD_SetAddress+0x74>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	885b      	ldrh	r3, [r3, #2]
 8009d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d0c:	d828      	bhi.n	8009d60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	885b      	ldrh	r3, [r3, #2]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d104      	bne.n	8009d2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f98b 	bl	800a042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2c:	e01d      	b.n	8009d6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7bfa      	ldrb	r2, [r7, #15]
 8009d32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fe52 	bl	800a9e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa46 	bl	800a1d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d54:	e009      	b.n	8009d6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5e:	e004      	b.n	8009d6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f96d 	bl	800a042 <USBD_CtlError>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	4b41      	ldr	r3, [pc, #260]	; (8009e8c <USBD_SetConfig+0x118>)
 8009d86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d88:	4b40      	ldr	r3, [pc, #256]	; (8009e8c <USBD_SetConfig+0x118>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d904      	bls.n	8009d9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f955 	bl	800a042 <USBD_CtlError>
 8009d98:	e075      	b.n	8009e86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d002      	beq.n	8009daa <USBD_SetConfig+0x36>
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d023      	beq.n	8009df0 <USBD_SetConfig+0x7c>
 8009da8:	e062      	b.n	8009e70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009daa:	4b38      	ldr	r3, [pc, #224]	; (8009e8c <USBD_SetConfig+0x118>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01a      	beq.n	8009de8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009db2:	4b36      	ldr	r3, [pc, #216]	; (8009e8c <USBD_SetConfig+0x118>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009dc4:	4b31      	ldr	r3, [pc, #196]	; (8009e8c <USBD_SetConfig+0x118>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff f9e7 	bl	800919e <USBD_SetClassConfig>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d104      	bne.n	8009de0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f932 	bl	800a042 <USBD_CtlError>
            return;
 8009dde:	e052      	b.n	8009e86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f9f6 	bl	800a1d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009de6:	e04e      	b.n	8009e86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f9f2 	bl	800a1d2 <USBD_CtlSendStatus>
        break;
 8009dee:	e04a      	b.n	8009e86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009df0:	4b26      	ldr	r3, [pc, #152]	; (8009e8c <USBD_SetConfig+0x118>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d112      	bne.n	8009e1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e00:	4b22      	ldr	r3, [pc, #136]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e0a:	4b20      	ldr	r3, [pc, #128]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff f9e3 	bl	80091dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9db 	bl	800a1d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e1c:	e033      	b.n	8009e86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e1e:	4b1b      	ldr	r3, [pc, #108]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d01d      	beq.n	8009e68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff f9d1 	bl	80091dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff f9a7 	bl	800919e <USBD_SetClassConfig>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d104      	bne.n	8009e60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f8f2 	bl	800a042 <USBD_CtlError>
            return;
 8009e5e:	e012      	b.n	8009e86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f9b6 	bl	800a1d2 <USBD_CtlSendStatus>
        break;
 8009e66:	e00e      	b.n	8009e86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f9b2 	bl	800a1d2 <USBD_CtlSendStatus>
        break;
 8009e6e:	e00a      	b.n	8009e86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f8e5 	bl	800a042 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e78:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <USBD_SetConfig+0x118>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff f9ac 	bl	80091dc <USBD_ClrClassConfig>
        break;
 8009e84:	bf00      	nop
    }
  }
}
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000318 	.word	0x20000318

08009e90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d004      	beq.n	8009eac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f8cc 	bl	800a042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009eaa:	e022      	b.n	8009ef2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	dc02      	bgt.n	8009ebc <USBD_GetConfig+0x2c>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dc03      	bgt.n	8009ec2 <USBD_GetConfig+0x32>
 8009eba:	e015      	b.n	8009ee8 <USBD_GetConfig+0x58>
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d00b      	beq.n	8009ed8 <USBD_GetConfig+0x48>
 8009ec0:	e012      	b.n	8009ee8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	2201      	movs	r2, #1
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f920 	bl	800a116 <USBD_CtlSendData>
        break;
 8009ed6:	e00c      	b.n	8009ef2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3304      	adds	r3, #4
 8009edc:	2201      	movs	r2, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f918 	bl	800a116 <USBD_CtlSendData>
        break;
 8009ee6:	e004      	b.n	8009ef2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f8a9 	bl	800a042 <USBD_CtlError>
        break;
 8009ef0:	bf00      	nop
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d81e      	bhi.n	8009f4e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	88db      	ldrh	r3, [r3, #6]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d004      	beq.n	8009f22 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f891 	bl	800a042 <USBD_CtlError>
        break;
 8009f20:	e01a      	b.n	8009f58 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f043 0202 	orr.w	r2, r3, #2
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	330c      	adds	r3, #12
 8009f42:	2202      	movs	r2, #2
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f8e5 	bl	800a116 <USBD_CtlSendData>
      break;
 8009f4c:	e004      	b.n	8009f58 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f876 	bl	800a042 <USBD_CtlError>
      break;
 8009f56:	bf00      	nop
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	885b      	ldrh	r3, [r3, #2]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d106      	bne.n	8009f80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f929 	bl	800a1d2 <USBD_CtlSendStatus>
  }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d80b      	bhi.n	8009fb6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	885b      	ldrh	r3, [r3, #2]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d10c      	bne.n	8009fc0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f90f 	bl	800a1d2 <USBD_CtlSendStatus>
      }
      break;
 8009fb4:	e004      	b.n	8009fc0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f842 	bl	800a042 <USBD_CtlError>
      break;
 8009fbe:	e000      	b.n	8009fc2 <USBD_ClrFeature+0x3a>
      break;
 8009fc0:	bf00      	nop
  }
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	785a      	ldrb	r2, [r3, #1]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	3303      	adds	r3, #3
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	3304      	adds	r3, #4
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	b29a      	uxth	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	3305      	adds	r3, #5
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	3306      	adds	r3, #6
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	3307      	adds	r3, #7
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4413      	add	r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	80da      	strh	r2, [r3, #6]

}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr

0800a042 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a04c:	2180      	movs	r1, #128	; 0x80
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fc5e 	bl	800a910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a054:	2100      	movs	r1, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fc5a 	bl	800a910 <USBD_LL_StallEP>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d032      	beq.n	800a0e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 f834 	bl	800a0e8 <USBD_GetLen>
 800a080:	4603      	mov	r3, r0
 800a082:	3301      	adds	r3, #1
 800a084:	b29b      	uxth	r3, r3
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	75fa      	strb	r2, [r7, #23]
 800a094:	461a      	mov	r2, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4413      	add	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	7812      	ldrb	r2, [r2, #0]
 800a09e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	75fa      	strb	r2, [r7, #23]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0b0:	e012      	b.n	800a0d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	60fa      	str	r2, [r7, #12]
 800a0b8:	7dfa      	ldrb	r2, [r7, #23]
 800a0ba:	1c51      	adds	r1, r2, #1
 800a0bc:	75f9      	strb	r1, [r7, #23]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	75fa      	strb	r2, [r7, #23]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e8      	bne.n	800a0b2 <USBD_GetString+0x4e>
    }
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a0f4:	e005      	b.n	800a102 <USBD_GetLen+0x1a>
  {
    len++;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f5      	bne.n	800a0f6 <USBD_GetLen+0xe>
  }

  return len;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr

0800a116 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	4613      	mov	r3, r2
 800a122:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2202      	movs	r2, #2
 800a128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fc6f 	bl	800aa22 <USBD_LL_Transmit>

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	4613      	mov	r3, r2
 800a15a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	2100      	movs	r1, #0
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fc5d 	bl	800aa22 <USBD_LL_Transmit>

  return USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	4613      	mov	r3, r2
 800a17e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2203      	movs	r2, #3
 800a184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a188:	88fa      	ldrh	r2, [r7, #6]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	2100      	movs	r1, #0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fc62 	bl	800aa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fc50 	bl	800aa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2204      	movs	r2, #4
 800a1de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fc1a 	bl	800aa22 <USBD_LL_Transmit>

  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2205      	movs	r2, #5
 800a204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a208:	2300      	movs	r3, #0
 800a20a:	2200      	movs	r2, #0
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fc2a 	bl	800aa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a224:	2200      	movs	r2, #0
 800a226:	4912      	ldr	r1, [pc, #72]	; (800a270 <MX_USB_DEVICE_Init+0x50>)
 800a228:	4812      	ldr	r0, [pc, #72]	; (800a274 <MX_USB_DEVICE_Init+0x54>)
 800a22a:	f7fe ff5e 	bl	80090ea <USBD_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a234:	f7f7 fe80 	bl	8001f38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a238:	490f      	ldr	r1, [pc, #60]	; (800a278 <MX_USB_DEVICE_Init+0x58>)
 800a23a:	480e      	ldr	r0, [pc, #56]	; (800a274 <MX_USB_DEVICE_Init+0x54>)
 800a23c:	f7fe ff80 	bl	8009140 <USBD_RegisterClass>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a246:	f7f7 fe77 	bl	8001f38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a24a:	490c      	ldr	r1, [pc, #48]	; (800a27c <MX_USB_DEVICE_Init+0x5c>)
 800a24c:	4809      	ldr	r0, [pc, #36]	; (800a274 <MX_USB_DEVICE_Init+0x54>)
 800a24e:	f7fe feb1 	bl	8008fb4 <USBD_CDC_RegisterInterface>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a258:	f7f7 fe6e 	bl	8001f38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a25c:	4805      	ldr	r0, [pc, #20]	; (800a274 <MX_USB_DEVICE_Init+0x54>)
 800a25e:	f7fe ff88 	bl	8009172 <USBD_Start>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a268:	f7f7 fe66 	bl	8001f38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a26c:	bf00      	nop
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	200001a8 	.word	0x200001a8
 800a274:	20000804 	.word	0x20000804
 800a278:	20000094 	.word	0x20000094
 800a27c:	20000198 	.word	0x20000198

0800a280 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a284:	2200      	movs	r2, #0
 800a286:	4905      	ldr	r1, [pc, #20]	; (800a29c <CDC_Init_FS+0x1c>)
 800a288:	4805      	ldr	r0, [pc, #20]	; (800a2a0 <CDC_Init_FS+0x20>)
 800a28a:	f7fe fea9 	bl	8008fe0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a28e:	4905      	ldr	r1, [pc, #20]	; (800a2a4 <CDC_Init_FS+0x24>)
 800a290:	4803      	ldr	r0, [pc, #12]	; (800a2a0 <CDC_Init_FS+0x20>)
 800a292:	f7fe febe 	bl	8009012 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 800a296:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a298:	4618      	mov	r0, r3
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000eb0 	.word	0x20000eb0
 800a2a0:	20000804 	.word	0x20000804
 800a2a4:	20000ac8 	.word	0x20000ac8

0800a2a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b23      	cmp	r3, #35	; 0x23
 800a2cc:	d84a      	bhi.n	800a364 <CDC_Control_FS+0xac>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <CDC_Control_FS+0x1c>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a365 	.word	0x0800a365
 800a2d8:	0800a365 	.word	0x0800a365
 800a2dc:	0800a365 	.word	0x0800a365
 800a2e0:	0800a365 	.word	0x0800a365
 800a2e4:	0800a365 	.word	0x0800a365
 800a2e8:	0800a365 	.word	0x0800a365
 800a2ec:	0800a365 	.word	0x0800a365
 800a2f0:	0800a365 	.word	0x0800a365
 800a2f4:	0800a365 	.word	0x0800a365
 800a2f8:	0800a365 	.word	0x0800a365
 800a2fc:	0800a365 	.word	0x0800a365
 800a300:	0800a365 	.word	0x0800a365
 800a304:	0800a365 	.word	0x0800a365
 800a308:	0800a365 	.word	0x0800a365
 800a30c:	0800a365 	.word	0x0800a365
 800a310:	0800a365 	.word	0x0800a365
 800a314:	0800a365 	.word	0x0800a365
 800a318:	0800a365 	.word	0x0800a365
 800a31c:	0800a365 	.word	0x0800a365
 800a320:	0800a365 	.word	0x0800a365
 800a324:	0800a365 	.word	0x0800a365
 800a328:	0800a365 	.word	0x0800a365
 800a32c:	0800a365 	.word	0x0800a365
 800a330:	0800a365 	.word	0x0800a365
 800a334:	0800a365 	.word	0x0800a365
 800a338:	0800a365 	.word	0x0800a365
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a365 	.word	0x0800a365
 800a350:	0800a365 	.word	0x0800a365
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a365 	.word	0x0800a365
 800a35c:	0800a365 	.word	0x0800a365
 800a360:	0800a365 	.word	0x0800a365
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a364:	bf00      	nop
  }

  return (USBD_OK);
 800a366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bc80      	pop	{r7}
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop

0800a374 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4809      	ldr	r0, [pc, #36]	; (800a3a8 <CDC_Receive_FS+0x34>)
 800a382:	f7fe fe46 	bl	8009012 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a386:	4808      	ldr	r0, [pc, #32]	; (800a3a8 <CDC_Receive_FS+0x34>)
 800a388:	f7fe fe85 	bl	8009096 <USBD_CDC_ReceivePacket>

  uint8_t len=(uint8_t) *Len;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	73fb      	strb	r3, [r7, #15]
  memcpy (rx_buffer, Buf, len);		//Bu fonksiyon ile verileri rx_buffer adlı diziye çekiyoruz.
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	461a      	mov	r2, r3
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4804      	ldr	r0, [pc, #16]	; (800a3ac <CDC_Receive_FS+0x38>)
 800a39a:	f000 fc11 	bl	800abc0 <memcpy>

  return (USBD_OK);
 800a39e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000804 	.word	0x20000804
 800a3ac:	20000630 	.word	0x20000630

0800a3b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e00b      	b.n	800a3ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	4806      	ldr	r0, [pc, #24]	; (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3de:	f7fe fdff 	bl	8008fe0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3e4:	f7fe fe28 	bl	8009038 <USBD_CDC_TransmitPacket>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000804 	.word	0x20000804

0800a3fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2212      	movs	r2, #18
 800a40c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	; (800a41c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	200001c4 	.word	0x200001c4

0800a420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2204      	movs	r2, #4
 800a430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a432:	4b03      	ldr	r3, [pc, #12]	; (800a440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	200001d8 	.word	0x200001d8

0800a444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	; (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a45c:	f7ff fe02 	bl	800a064 <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a468:	f7ff fdfc 	bl	800a064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20001298 	.word	0x20001298
 800a47c:	0800beb8 	.word	0x0800beb8

0800a480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	4904      	ldr	r1, [pc, #16]	; (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a490:	4804      	ldr	r0, [pc, #16]	; (800a4a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a492:	f7ff fde7 	bl	800a064 <USBD_GetString>
  return USBD_StrDesc;
 800a496:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20001298 	.word	0x20001298
 800a4a4:	0800becc 	.word	0x0800becc

0800a4a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	221a      	movs	r2, #26
 800a4b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4ba:	f000 f843 	bl	800a544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4be:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200001dc 	.word	0x200001dc

0800a4cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d105      	bne.n	800a4ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4907      	ldr	r1, [pc, #28]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4e2:	4808      	ldr	r0, [pc, #32]	; (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4e4:	f7ff fdbe 	bl	800a064 <USBD_GetString>
 800a4e8:	e004      	b.n	800a4f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4904      	ldr	r1, [pc, #16]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ee:	4805      	ldr	r0, [pc, #20]	; (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4f0:	f7ff fdb8 	bl	800a064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20001298 	.word	0x20001298
 800a504:	0800bee0 	.word	0x0800bee0

0800a508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	6039      	str	r1, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4907      	ldr	r1, [pc, #28]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a51e:	4808      	ldr	r0, [pc, #32]	; (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a520:	f7ff fda0 	bl	800a064 <USBD_GetString>
 800a524:	e004      	b.n	800a530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	4904      	ldr	r1, [pc, #16]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a52a:	4805      	ldr	r0, [pc, #20]	; (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a52c:	f7ff fd9a 	bl	800a064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a530:	4b02      	ldr	r3, [pc, #8]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20001298 	.word	0x20001298
 800a540:	0800beec 	.word	0x0800beec

0800a544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <Get_SerialNum+0x44>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a550:	4b0e      	ldr	r3, [pc, #56]	; (800a58c <Get_SerialNum+0x48>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <Get_SerialNum+0x4c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4413      	add	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a56a:	2208      	movs	r2, #8
 800a56c:	4909      	ldr	r1, [pc, #36]	; (800a594 <Get_SerialNum+0x50>)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f814 	bl	800a59c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a574:	2204      	movs	r2, #4
 800a576:	4908      	ldr	r1, [pc, #32]	; (800a598 <Get_SerialNum+0x54>)
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f000 f80f 	bl	800a59c <IntToUnicode>
  }
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	1ffff7e8 	.word	0x1ffff7e8
 800a58c:	1ffff7ec 	.word	0x1ffff7ec
 800a590:	1ffff7f0 	.word	0x1ffff7f0
 800a594:	200001de 	.word	0x200001de
 800a598:	200001ee 	.word	0x200001ee

0800a59c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]
 800a5b2:	e027      	b.n	800a604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	2b09      	cmp	r3, #9
 800a5ba:	d80b      	bhi.n	800a5d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0f1b      	lsrs	r3, r3, #28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3230      	adds	r2, #48	; 0x30
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	e00a      	b.n	800a5ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	0f1b      	lsrs	r3, r3, #28
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	4619      	mov	r1, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3237      	adds	r2, #55	; 0x37
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	3301      	adds	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
 800a604:	7dfa      	ldrb	r2, [r7, #23]
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3d3      	bcc.n	800a5b4 <IntToUnicode+0x18>
  }
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a0d      	ldr	r2, [pc, #52]	; (800a65c <HAL_PCD_MspInit+0x44>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d113      	bne.n	800a652 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a62a:	4b0d      	ldr	r3, [pc, #52]	; (800a660 <HAL_PCD_MspInit+0x48>)
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	4a0c      	ldr	r2, [pc, #48]	; (800a660 <HAL_PCD_MspInit+0x48>)
 800a630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a634:	61d3      	str	r3, [r2, #28]
 800a636:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <HAL_PCD_MspInit+0x48>)
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a642:	2200      	movs	r2, #0
 800a644:	2100      	movs	r1, #0
 800a646:	2014      	movs	r0, #20
 800a648:	f7f7 feff 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a64c:	2014      	movs	r0, #20
 800a64e:	f7f7 ff18 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	40005c00 	.word	0x40005c00
 800a660:	40021000 	.word	0x40021000

0800a664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fe fdc1 	bl	8009202 <USBD_LL_SetupStage>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	440b      	add	r3, r1
 800a6a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7fe fdf3 	bl	800929c <USBD_LL_DataOutStage>
}
 800a6b6:	bf00      	nop
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a6d0:	78fa      	ldrb	r2, [r7, #3]
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	440b      	add	r3, r1
 800a6de:	333c      	adds	r3, #60	; 0x3c
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f7fe fe4a 	bl	800937e <USBD_LL_DataInStage>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe ff5a 	bl	80095ba <USBD_LL_SOF>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a716:	2301      	movs	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d001      	beq.n	800a726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a722:	f7f7 fc09 	bl	8001f38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe ff0a 	bl	800954a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fec3 	bl	80094c8 <USBD_LL_Reset>
}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe ff04 	bl	8009568 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a768:	4b04      	ldr	r3, [pc, #16]	; (800a77c <HAL_PCD_SuspendCallback+0x30>)
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	4a03      	ldr	r2, [pc, #12]	; (800a77c <HAL_PCD_SuspendCallback+0x30>)
 800a76e:	f043 0306 	orr.w	r3, r3, #6
 800a772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	e000ed00 	.word	0xe000ed00

0800a780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fefe 	bl	8009590 <USBD_LL_Resume>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a7a4:	4a28      	ldr	r2, [pc, #160]	; (800a848 <USBD_LL_Init+0xac>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a26      	ldr	r2, [pc, #152]	; (800a848 <USBD_LL_Init+0xac>)
 800a7b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a7b4:	4b24      	ldr	r3, [pc, #144]	; (800a848 <USBD_LL_Init+0xac>)
 800a7b6:	4a25      	ldr	r2, [pc, #148]	; (800a84c <USBD_LL_Init+0xb0>)
 800a7b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <USBD_LL_Init+0xac>)
 800a7bc:	2208      	movs	r2, #8
 800a7be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7c0:	4b21      	ldr	r3, [pc, #132]	; (800a848 <USBD_LL_Init+0xac>)
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7c6:	4b20      	ldr	r3, [pc, #128]	; (800a848 <USBD_LL_Init+0xac>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <USBD_LL_Init+0xac>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <USBD_LL_Init+0xac>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7d8:	481b      	ldr	r0, [pc, #108]	; (800a848 <USBD_LL_Init+0xac>)
 800a7da:	f7f9 f839 	bl	8003850 <HAL_PCD_Init>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a7e4:	f7f7 fba8 	bl	8001f38 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7ee:	2318      	movs	r3, #24
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f7fa fb7b 	bl	8004eee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7fe:	2358      	movs	r3, #88	; 0x58
 800a800:	2200      	movs	r2, #0
 800a802:	2180      	movs	r1, #128	; 0x80
 800a804:	f7fa fb73 	bl	8004eee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a80e:	23c0      	movs	r3, #192	; 0xc0
 800a810:	2200      	movs	r2, #0
 800a812:	2181      	movs	r1, #129	; 0x81
 800a814:	f7fa fb6b 	bl	8004eee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a81e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a822:	2200      	movs	r2, #0
 800a824:	2101      	movs	r1, #1
 800a826:	f7fa fb62 	bl	8004eee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a830:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a834:	2200      	movs	r2, #0
 800a836:	2182      	movs	r1, #130	; 0x82
 800a838:	f7fa fb59 	bl	8004eee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20001498 	.word	0x20001498
 800a84c:	40005c00 	.word	0x40005c00

0800a850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a866:	4618      	mov	r0, r3
 800a868:	f7f9 f8fd 	bl	8003a66 <HAL_PCD_Start>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f94e 	bl	800ab14 <USBD_Get_USB_Status>
 800a878:	4603      	mov	r3, r0
 800a87a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	461a      	mov	r2, r3
 800a894:	4603      	mov	r3, r0
 800a896:	70fb      	strb	r3, [r7, #3]
 800a898:	460b      	mov	r3, r1
 800a89a:	70bb      	strb	r3, [r7, #2]
 800a89c:	4613      	mov	r3, r2
 800a89e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8ae:	78bb      	ldrb	r3, [r7, #2]
 800a8b0:	883a      	ldrh	r2, [r7, #0]
 800a8b2:	78f9      	ldrb	r1, [r7, #3]
 800a8b4:	f7f9 fa77 	bl	8003da6 <HAL_PCD_EP_Open>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f928 	bl	800ab14 <USBD_Get_USB_Status>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8ec:	78fa      	ldrb	r2, [r7, #3]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7f9 fabe 	bl	8003e72 <HAL_PCD_EP_Close>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 f909 	bl	800ab14 <USBD_Get_USB_Status>
 800a902:	4603      	mov	r3, r0
 800a904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a906:	7bbb      	ldrb	r3, [r7, #14]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f9 fb7e 	bl	8004030 <HAL_PCD_EP_SetStall>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f8ea 	bl	800ab14 <USBD_Get_USB_Status>
 800a940:	4603      	mov	r3, r0
 800a942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a944:	7bbb      	ldrb	r3, [r7, #14]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f9 fbbf 	bl	80040f0 <HAL_PCD_EP_ClrStall>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f8cb 	bl	800ab14 <USBD_Get_USB_Status>
 800a97e:	4603      	mov	r3, r0
 800a980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a982:	7bbb      	ldrb	r3, [r7, #14]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a99e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da0c      	bge.n	800a9c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	1c5a      	adds	r2, r3, #1
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	440b      	add	r3, r1
 800a9bc:	3302      	adds	r3, #2
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	e00b      	b.n	800a9da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9c8:	68f9      	ldr	r1, [r7, #12]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	440b      	add	r3, r1
 800a9d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a9d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr

0800a9e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f9 f9aa 	bl	8003d5c <HAL_PCD_SetAddress>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f880 	bl	800ab14 <USBD_Get_USB_Status>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b086      	sub	sp, #24
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	460b      	mov	r3, r1
 800aa30:	72fb      	strb	r3, [r7, #11]
 800aa32:	4613      	mov	r3, r2
 800aa34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa44:	893b      	ldrh	r3, [r7, #8]
 800aa46:	7af9      	ldrb	r1, [r7, #11]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	f7f9 faae 	bl	8003faa <HAL_PCD_EP_Transmit>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f85d 	bl	800ab14 <USBD_Get_USB_Status>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	461a      	mov	r2, r3
 800aa74:	460b      	mov	r3, r1
 800aa76:	72fb      	strb	r3, [r7, #11]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa8a:	893b      	ldrh	r3, [r7, #8]
 800aa8c:	7af9      	ldrb	r1, [r7, #11]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	f7f9 fa37 	bl	8003f02 <HAL_PCD_EP_Receive>
 800aa94:	4603      	mov	r3, r0
 800aa96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f83a 	bl	800ab14 <USBD_Get_USB_Status>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaa4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	4611      	mov	r1, r2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f9 fa59 	bl	8003f7c <HAL_PCD_EP_GetRxCount>
 800aaca:	4603      	mov	r3, r0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <USBD_static_malloc+0x14>)
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bc80      	pop	{r7}
 800aae6:	4770      	bx	lr
 800aae8:	2000031c 	.word	0x2000031c

0800aaec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]

}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bc80      	pop	{r7}
 800aafc:	4770      	bx	lr

0800aafe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d817      	bhi.n	800ab58 <USBD_Get_USB_Status+0x44>
 800ab28:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <USBD_Get_USB_Status+0x1c>)
 800ab2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2e:	bf00      	nop
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab47 	.word	0x0800ab47
 800ab38:	0800ab4d 	.word	0x0800ab4d
 800ab3c:	0800ab53 	.word	0x0800ab53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]
    break;
 800ab44:	e00b      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab46:	2302      	movs	r3, #2
 800ab48:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4a:	e008      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab50:	e005      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab52:	2302      	movs	r3, #2
 800ab54:	73fb      	strb	r3, [r7, #15]
    break;
 800ab56:	e002      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	bf00      	nop
  }
  return usb_status;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <__errno>:
 800ab6c:	4b01      	ldr	r3, [pc, #4]	; (800ab74 <__errno+0x8>)
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	200001f8 	.word	0x200001f8

0800ab78 <__libc_init_array>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	4d0c      	ldr	r5, [pc, #48]	; (800abb0 <__libc_init_array+0x38>)
 800ab7e:	4c0d      	ldr	r4, [pc, #52]	; (800abb4 <__libc_init_array+0x3c>)
 800ab80:	1b64      	subs	r4, r4, r5
 800ab82:	10a4      	asrs	r4, r4, #2
 800ab84:	42a6      	cmp	r6, r4
 800ab86:	d109      	bne.n	800ab9c <__libc_init_array+0x24>
 800ab88:	f001 f978 	bl	800be7c <_init>
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	4d0a      	ldr	r5, [pc, #40]	; (800abb8 <__libc_init_array+0x40>)
 800ab90:	4c0a      	ldr	r4, [pc, #40]	; (800abbc <__libc_init_array+0x44>)
 800ab92:	1b64      	subs	r4, r4, r5
 800ab94:	10a4      	asrs	r4, r4, #2
 800ab96:	42a6      	cmp	r6, r4
 800ab98:	d105      	bne.n	800aba6 <__libc_init_array+0x2e>
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba0:	4798      	blx	r3
 800aba2:	3601      	adds	r6, #1
 800aba4:	e7ee      	b.n	800ab84 <__libc_init_array+0xc>
 800aba6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abaa:	4798      	blx	r3
 800abac:	3601      	adds	r6, #1
 800abae:	e7f2      	b.n	800ab96 <__libc_init_array+0x1e>
 800abb0:	0800bfa0 	.word	0x0800bfa0
 800abb4:	0800bfa0 	.word	0x0800bfa0
 800abb8:	0800bfa0 	.word	0x0800bfa0
 800abbc:	0800bfa4 	.word	0x0800bfa4

0800abc0 <memcpy>:
 800abc0:	440a      	add	r2, r1
 800abc2:	4291      	cmp	r1, r2
 800abc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800abc8:	d100      	bne.n	800abcc <memcpy+0xc>
 800abca:	4770      	bx	lr
 800abcc:	b510      	push	{r4, lr}
 800abce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abd2:	4291      	cmp	r1, r2
 800abd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abd8:	d1f9      	bne.n	800abce <memcpy+0xe>
 800abda:	bd10      	pop	{r4, pc}

0800abdc <memset>:
 800abdc:	4603      	mov	r3, r0
 800abde:	4402      	add	r2, r0
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d100      	bne.n	800abe6 <memset+0xa>
 800abe4:	4770      	bx	lr
 800abe6:	f803 1b01 	strb.w	r1, [r3], #1
 800abea:	e7f9      	b.n	800abe0 <memset+0x4>
 800abec:	0000      	movs	r0, r0
	...

0800abf0 <atan>:
 800abf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4bb6      	ldr	r3, [pc, #728]	; (800aed0 <atan+0x2e0>)
 800abf6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800abfa:	429e      	cmp	r6, r3
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	468b      	mov	fp, r1
 800ac02:	dd17      	ble.n	800ac34 <atan+0x44>
 800ac04:	4bb3      	ldr	r3, [pc, #716]	; (800aed4 <atan+0x2e4>)
 800ac06:	429e      	cmp	r6, r3
 800ac08:	dc01      	bgt.n	800ac0e <atan+0x1e>
 800ac0a:	d109      	bne.n	800ac20 <atan+0x30>
 800ac0c:	b140      	cbz	r0, 800ac20 <atan+0x30>
 800ac0e:	4622      	mov	r2, r4
 800ac10:	462b      	mov	r3, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7f5 faa1 	bl	800015c <__adddf3>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	e005      	b.n	800ac2c <atan+0x3c>
 800ac20:	f1bb 0f00 	cmp.w	fp, #0
 800ac24:	4cac      	ldr	r4, [pc, #688]	; (800aed8 <atan+0x2e8>)
 800ac26:	f300 8121 	bgt.w	800ae6c <atan+0x27c>
 800ac2a:	4dac      	ldr	r5, [pc, #688]	; (800aedc <atan+0x2ec>)
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	4baa      	ldr	r3, [pc, #680]	; (800aee0 <atan+0x2f0>)
 800ac36:	429e      	cmp	r6, r3
 800ac38:	dc11      	bgt.n	800ac5e <atan+0x6e>
 800ac3a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ac3e:	429e      	cmp	r6, r3
 800ac40:	dc0a      	bgt.n	800ac58 <atan+0x68>
 800ac42:	a38b      	add	r3, pc, #556	; (adr r3, 800ae70 <atan+0x280>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fa88 	bl	800015c <__adddf3>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4ba5      	ldr	r3, [pc, #660]	; (800aee4 <atan+0x2f4>)
 800ac50:	f7f5 feca 	bl	80009e8 <__aeabi_dcmpgt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1e9      	bne.n	800ac2c <atan+0x3c>
 800ac58:	f04f 3aff 	mov.w	sl, #4294967295
 800ac5c:	e027      	b.n	800acae <atan+0xbe>
 800ac5e:	f000 f951 	bl	800af04 <fabs>
 800ac62:	4ba1      	ldr	r3, [pc, #644]	; (800aee8 <atan+0x2f8>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	429e      	cmp	r6, r3
 800ac68:	460d      	mov	r5, r1
 800ac6a:	f300 80b8 	bgt.w	800adde <atan+0x1ee>
 800ac6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ac72:	429e      	cmp	r6, r3
 800ac74:	f300 809c 	bgt.w	800adb0 <atan+0x1c0>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	f7f5 fa6e 	bl	800015c <__adddf3>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4b98      	ldr	r3, [pc, #608]	; (800aee4 <atan+0x2f4>)
 800ac84:	f7f5 fa68 	bl	8000158 <__aeabi_dsub>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 fa61 	bl	800015c <__adddf3>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 fd3b 	bl	800071c <__aeabi_ddiv>
 800aca6:	f04f 0a00 	mov.w	sl, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	460d      	mov	r5, r1
 800acae:	4622      	mov	r2, r4
 800acb0:	462b      	mov	r3, r5
 800acb2:	4620      	mov	r0, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	f7f5 fc07 	bl	80004c8 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4680      	mov	r8, r0
 800acc0:	4689      	mov	r9, r1
 800acc2:	f7f5 fc01 	bl	80004c8 <__aeabi_dmul>
 800acc6:	a36c      	add	r3, pc, #432	; (adr r3, 800ae78 <atan+0x288>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	f7f5 fbfa 	bl	80004c8 <__aeabi_dmul>
 800acd4:	a36a      	add	r3, pc, #424	; (adr r3, 800ae80 <atan+0x290>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fa3f 	bl	800015c <__adddf3>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fbf1 	bl	80004c8 <__aeabi_dmul>
 800ace6:	a368      	add	r3, pc, #416	; (adr r3, 800ae88 <atan+0x298>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fa36 	bl	800015c <__adddf3>
 800acf0:	4632      	mov	r2, r6
 800acf2:	463b      	mov	r3, r7
 800acf4:	f7f5 fbe8 	bl	80004c8 <__aeabi_dmul>
 800acf8:	a365      	add	r3, pc, #404	; (adr r3, 800ae90 <atan+0x2a0>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fa2d 	bl	800015c <__adddf3>
 800ad02:	4632      	mov	r2, r6
 800ad04:	463b      	mov	r3, r7
 800ad06:	f7f5 fbdf 	bl	80004c8 <__aeabi_dmul>
 800ad0a:	a363      	add	r3, pc, #396	; (adr r3, 800ae98 <atan+0x2a8>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fa24 	bl	800015c <__adddf3>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 fbd6 	bl	80004c8 <__aeabi_dmul>
 800ad1c:	a360      	add	r3, pc, #384	; (adr r3, 800aea0 <atan+0x2b0>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fa1b 	bl	800015c <__adddf3>
 800ad26:	4642      	mov	r2, r8
 800ad28:	464b      	mov	r3, r9
 800ad2a:	f7f5 fbcd 	bl	80004c8 <__aeabi_dmul>
 800ad2e:	a35e      	add	r3, pc, #376	; (adr r3, 800aea8 <atan+0x2b8>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	4680      	mov	r8, r0
 800ad36:	4689      	mov	r9, r1
 800ad38:	4630      	mov	r0, r6
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	f7f5 fbc4 	bl	80004c8 <__aeabi_dmul>
 800ad40:	a35b      	add	r3, pc, #364	; (adr r3, 800aeb0 <atan+0x2c0>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fa07 	bl	8000158 <__aeabi_dsub>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	f7f5 fbbb 	bl	80004c8 <__aeabi_dmul>
 800ad52:	a359      	add	r3, pc, #356	; (adr r3, 800aeb8 <atan+0x2c8>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 f9fe 	bl	8000158 <__aeabi_dsub>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fbb2 	bl	80004c8 <__aeabi_dmul>
 800ad64:	a356      	add	r3, pc, #344	; (adr r3, 800aec0 <atan+0x2d0>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 f9f5 	bl	8000158 <__aeabi_dsub>
 800ad6e:	4632      	mov	r2, r6
 800ad70:	463b      	mov	r3, r7
 800ad72:	f7f5 fba9 	bl	80004c8 <__aeabi_dmul>
 800ad76:	a354      	add	r3, pc, #336	; (adr r3, 800aec8 <atan+0x2d8>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 f9ec 	bl	8000158 <__aeabi_dsub>
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	f7f5 fba0 	bl	80004c8 <__aeabi_dmul>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 f9e4 	bl	800015c <__adddf3>
 800ad94:	4622      	mov	r2, r4
 800ad96:	462b      	mov	r3, r5
 800ad98:	f7f5 fb96 	bl	80004c8 <__aeabi_dmul>
 800ad9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	d144      	bne.n	800ae30 <atan+0x240>
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 f9d5 	bl	8000158 <__aeabi_dsub>
 800adae:	e734      	b.n	800ac1a <atan+0x2a>
 800adb0:	2200      	movs	r2, #0
 800adb2:	4b4c      	ldr	r3, [pc, #304]	; (800aee4 <atan+0x2f4>)
 800adb4:	f7f5 f9d0 	bl	8000158 <__aeabi_dsub>
 800adb8:	2200      	movs	r2, #0
 800adba:	4606      	mov	r6, r0
 800adbc:	460f      	mov	r7, r1
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	4b48      	ldr	r3, [pc, #288]	; (800aee4 <atan+0x2f4>)
 800adc4:	f7f5 f9ca 	bl	800015c <__adddf3>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4630      	mov	r0, r6
 800adce:	4639      	mov	r1, r7
 800add0:	f7f5 fca4 	bl	800071c <__aeabi_ddiv>
 800add4:	f04f 0a01 	mov.w	sl, #1
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	e767      	b.n	800acae <atan+0xbe>
 800adde:	4b43      	ldr	r3, [pc, #268]	; (800aeec <atan+0x2fc>)
 800ade0:	429e      	cmp	r6, r3
 800ade2:	da1a      	bge.n	800ae1a <atan+0x22a>
 800ade4:	2200      	movs	r2, #0
 800ade6:	4b42      	ldr	r3, [pc, #264]	; (800aef0 <atan+0x300>)
 800ade8:	f7f5 f9b6 	bl	8000158 <__aeabi_dsub>
 800adec:	2200      	movs	r2, #0
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	4b3e      	ldr	r3, [pc, #248]	; (800aef0 <atan+0x300>)
 800adf8:	f7f5 fb66 	bl	80004c8 <__aeabi_dmul>
 800adfc:	2200      	movs	r2, #0
 800adfe:	4b39      	ldr	r3, [pc, #228]	; (800aee4 <atan+0x2f4>)
 800ae00:	f7f5 f9ac 	bl	800015c <__adddf3>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fc86 	bl	800071c <__aeabi_ddiv>
 800ae10:	f04f 0a02 	mov.w	sl, #2
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	e749      	b.n	800acae <atan+0xbe>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	2000      	movs	r0, #0
 800ae20:	4934      	ldr	r1, [pc, #208]	; (800aef4 <atan+0x304>)
 800ae22:	f7f5 fc7b 	bl	800071c <__aeabi_ddiv>
 800ae26:	f04f 0a03 	mov.w	sl, #3
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	e73e      	b.n	800acae <atan+0xbe>
 800ae30:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <atan+0x308>)
 800ae32:	4e32      	ldr	r6, [pc, #200]	; (800aefc <atan+0x30c>)
 800ae34:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ae38:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ae3c:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae40:	f7f5 f98a 	bl	8000158 <__aeabi_dsub>
 800ae44:	4622      	mov	r2, r4
 800ae46:	462b      	mov	r3, r5
 800ae48:	f7f5 f986 	bl	8000158 <__aeabi_dsub>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae54:	f7f5 f980 	bl	8000158 <__aeabi_dsub>
 800ae58:	f1bb 0f00 	cmp.w	fp, #0
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	f6bf aee4 	bge.w	800ac2c <atan+0x3c>
 800ae64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae68:	461d      	mov	r5, r3
 800ae6a:	e6df      	b.n	800ac2c <atan+0x3c>
 800ae6c:	4d24      	ldr	r5, [pc, #144]	; (800af00 <atan+0x310>)
 800ae6e:	e6dd      	b.n	800ac2c <atan+0x3c>
 800ae70:	8800759c 	.word	0x8800759c
 800ae74:	7e37e43c 	.word	0x7e37e43c
 800ae78:	e322da11 	.word	0xe322da11
 800ae7c:	3f90ad3a 	.word	0x3f90ad3a
 800ae80:	24760deb 	.word	0x24760deb
 800ae84:	3fa97b4b 	.word	0x3fa97b4b
 800ae88:	a0d03d51 	.word	0xa0d03d51
 800ae8c:	3fb10d66 	.word	0x3fb10d66
 800ae90:	c54c206e 	.word	0xc54c206e
 800ae94:	3fb745cd 	.word	0x3fb745cd
 800ae98:	920083ff 	.word	0x920083ff
 800ae9c:	3fc24924 	.word	0x3fc24924
 800aea0:	5555550d 	.word	0x5555550d
 800aea4:	3fd55555 	.word	0x3fd55555
 800aea8:	2c6a6c2f 	.word	0x2c6a6c2f
 800aeac:	bfa2b444 	.word	0xbfa2b444
 800aeb0:	52defd9a 	.word	0x52defd9a
 800aeb4:	3fadde2d 	.word	0x3fadde2d
 800aeb8:	af749a6d 	.word	0xaf749a6d
 800aebc:	3fb3b0f2 	.word	0x3fb3b0f2
 800aec0:	fe231671 	.word	0xfe231671
 800aec4:	3fbc71c6 	.word	0x3fbc71c6
 800aec8:	9998ebc4 	.word	0x9998ebc4
 800aecc:	3fc99999 	.word	0x3fc99999
 800aed0:	440fffff 	.word	0x440fffff
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	bff921fb 	.word	0xbff921fb
 800aee0:	3fdbffff 	.word	0x3fdbffff
 800aee4:	3ff00000 	.word	0x3ff00000
 800aee8:	3ff2ffff 	.word	0x3ff2ffff
 800aeec:	40038000 	.word	0x40038000
 800aef0:	3ff80000 	.word	0x3ff80000
 800aef4:	bff00000 	.word	0xbff00000
 800aef8:	0800bf38 	.word	0x0800bf38
 800aefc:	0800bf18 	.word	0x0800bf18
 800af00:	3ff921fb 	.word	0x3ff921fb

0800af04 <fabs>:
 800af04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800af08:	4770      	bx	lr
	...

0800af0c <pow>:
 800af0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af10:	461f      	mov	r7, r3
 800af12:	4680      	mov	r8, r0
 800af14:	4689      	mov	r9, r1
 800af16:	4616      	mov	r6, r2
 800af18:	f000 f8d2 	bl	800b0c0 <__ieee754_pow>
 800af1c:	4b4d      	ldr	r3, [pc, #308]	; (800b054 <pow+0x148>)
 800af1e:	4604      	mov	r4, r0
 800af20:	f993 3000 	ldrsb.w	r3, [r3]
 800af24:	460d      	mov	r5, r1
 800af26:	3301      	adds	r3, #1
 800af28:	d015      	beq.n	800af56 <pow+0x4a>
 800af2a:	4632      	mov	r2, r6
 800af2c:	463b      	mov	r3, r7
 800af2e:	4630      	mov	r0, r6
 800af30:	4639      	mov	r1, r7
 800af32:	f7f5 fd63 	bl	80009fc <__aeabi_dcmpun>
 800af36:	b970      	cbnz	r0, 800af56 <pow+0x4a>
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	4640      	mov	r0, r8
 800af3e:	4649      	mov	r1, r9
 800af40:	f7f5 fd5c 	bl	80009fc <__aeabi_dcmpun>
 800af44:	2200      	movs	r2, #0
 800af46:	2300      	movs	r3, #0
 800af48:	b148      	cbz	r0, 800af5e <pow+0x52>
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 fd23 	bl	8000998 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	d17b      	bne.n	800b04e <pow+0x142>
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fd19 	bl	8000998 <__aeabi_dcmpeq>
 800af66:	b1e0      	cbz	r0, 800afa2 <pow+0x96>
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fd12 	bl	8000998 <__aeabi_dcmpeq>
 800af74:	2800      	cmp	r0, #0
 800af76:	d16a      	bne.n	800b04e <pow+0x142>
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f000 fe62 	bl	800bc44 <finite>
 800af80:	2800      	cmp	r0, #0
 800af82:	d0e8      	beq.n	800af56 <pow+0x4a>
 800af84:	2200      	movs	r2, #0
 800af86:	2300      	movs	r3, #0
 800af88:	4630      	mov	r0, r6
 800af8a:	4639      	mov	r1, r7
 800af8c:	f7f5 fd0e 	bl	80009ac <__aeabi_dcmplt>
 800af90:	2800      	cmp	r0, #0
 800af92:	d0e0      	beq.n	800af56 <pow+0x4a>
 800af94:	f7ff fdea 	bl	800ab6c <__errno>
 800af98:	2321      	movs	r3, #33	; 0x21
 800af9a:	2400      	movs	r4, #0
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	4d2e      	ldr	r5, [pc, #184]	; (800b058 <pow+0x14c>)
 800afa0:	e7d9      	b.n	800af56 <pow+0x4a>
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f000 fe4d 	bl	800bc44 <finite>
 800afaa:	bba8      	cbnz	r0, 800b018 <pow+0x10c>
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f000 fe48 	bl	800bc44 <finite>
 800afb4:	b380      	cbz	r0, 800b018 <pow+0x10c>
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	f000 fe43 	bl	800bc44 <finite>
 800afbe:	b358      	cbz	r0, 800b018 <pow+0x10c>
 800afc0:	4622      	mov	r2, r4
 800afc2:	462b      	mov	r3, r5
 800afc4:	4620      	mov	r0, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	f7f5 fd18 	bl	80009fc <__aeabi_dcmpun>
 800afcc:	b160      	cbz	r0, 800afe8 <pow+0xdc>
 800afce:	f7ff fdcd 	bl	800ab6c <__errno>
 800afd2:	2321      	movs	r3, #33	; 0x21
 800afd4:	2200      	movs	r2, #0
 800afd6:	6003      	str	r3, [r0, #0]
 800afd8:	2300      	movs	r3, #0
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	f7f5 fb9d 	bl	800071c <__aeabi_ddiv>
 800afe2:	4604      	mov	r4, r0
 800afe4:	460d      	mov	r5, r1
 800afe6:	e7b6      	b.n	800af56 <pow+0x4a>
 800afe8:	f7ff fdc0 	bl	800ab6c <__errno>
 800afec:	2322      	movs	r3, #34	; 0x22
 800afee:	2200      	movs	r2, #0
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	4649      	mov	r1, r9
 800aff4:	2300      	movs	r3, #0
 800aff6:	4640      	mov	r0, r8
 800aff8:	f7f5 fcd8 	bl	80009ac <__aeabi_dcmplt>
 800affc:	2400      	movs	r4, #0
 800affe:	b148      	cbz	r0, 800b014 <pow+0x108>
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f000 fe2a 	bl	800bc5c <rint>
 800b008:	4632      	mov	r2, r6
 800b00a:	463b      	mov	r3, r7
 800b00c:	f7f5 fcc4 	bl	8000998 <__aeabi_dcmpeq>
 800b010:	2800      	cmp	r0, #0
 800b012:	d0c4      	beq.n	800af9e <pow+0x92>
 800b014:	4d11      	ldr	r5, [pc, #68]	; (800b05c <pow+0x150>)
 800b016:	e79e      	b.n	800af56 <pow+0x4a>
 800b018:	2200      	movs	r2, #0
 800b01a:	2300      	movs	r3, #0
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f7f5 fcba 	bl	8000998 <__aeabi_dcmpeq>
 800b024:	2800      	cmp	r0, #0
 800b026:	d096      	beq.n	800af56 <pow+0x4a>
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	f000 fe0a 	bl	800bc44 <finite>
 800b030:	2800      	cmp	r0, #0
 800b032:	d090      	beq.n	800af56 <pow+0x4a>
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f000 fe04 	bl	800bc44 <finite>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d08a      	beq.n	800af56 <pow+0x4a>
 800b040:	f7ff fd94 	bl	800ab6c <__errno>
 800b044:	2322      	movs	r3, #34	; 0x22
 800b046:	2400      	movs	r4, #0
 800b048:	2500      	movs	r5, #0
 800b04a:	6003      	str	r3, [r0, #0]
 800b04c:	e783      	b.n	800af56 <pow+0x4a>
 800b04e:	2400      	movs	r4, #0
 800b050:	4d03      	ldr	r5, [pc, #12]	; (800b060 <pow+0x154>)
 800b052:	e780      	b.n	800af56 <pow+0x4a>
 800b054:	2000025c 	.word	0x2000025c
 800b058:	fff00000 	.word	0xfff00000
 800b05c:	7ff00000 	.word	0x7ff00000
 800b060:	3ff00000 	.word	0x3ff00000

0800b064 <sqrt>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	4606      	mov	r6, r0
 800b068:	460f      	mov	r7, r1
 800b06a:	f000 fd3f 	bl	800baec <__ieee754_sqrt>
 800b06e:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <sqrt+0x54>)
 800b070:	4604      	mov	r4, r0
 800b072:	f993 3000 	ldrsb.w	r3, [r3]
 800b076:	460d      	mov	r5, r1
 800b078:	3301      	adds	r3, #1
 800b07a:	d019      	beq.n	800b0b0 <sqrt+0x4c>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 fcba 	bl	80009fc <__aeabi_dcmpun>
 800b088:	b990      	cbnz	r0, 800b0b0 <sqrt+0x4c>
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 fc8b 	bl	80009ac <__aeabi_dcmplt>
 800b096:	b158      	cbz	r0, 800b0b0 <sqrt+0x4c>
 800b098:	f7ff fd68 	bl	800ab6c <__errno>
 800b09c:	2321      	movs	r3, #33	; 0x21
 800b09e:	2200      	movs	r2, #0
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	f7f5 fb38 	bl	800071c <__aeabi_ddiv>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	460d      	mov	r5, r1
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000025c 	.word	0x2000025c
 800b0bc:	00000000 	.word	0x00000000

0800b0c0 <__ieee754_pow>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	b093      	sub	sp, #76	; 0x4c
 800b0c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0ca:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b0ce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b0d2:	ea55 0302 	orrs.w	r3, r5, r2
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	4688      	mov	r8, r1
 800b0da:	f000 84bf 	beq.w	800ba5c <__ieee754_pow+0x99c>
 800b0de:	4b7e      	ldr	r3, [pc, #504]	; (800b2d8 <__ieee754_pow+0x218>)
 800b0e0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	4689      	mov	r9, r1
 800b0e8:	4682      	mov	sl, r0
 800b0ea:	dc09      	bgt.n	800b100 <__ieee754_pow+0x40>
 800b0ec:	d103      	bne.n	800b0f6 <__ieee754_pow+0x36>
 800b0ee:	b978      	cbnz	r0, 800b110 <__ieee754_pow+0x50>
 800b0f0:	42a5      	cmp	r5, r4
 800b0f2:	dd02      	ble.n	800b0fa <__ieee754_pow+0x3a>
 800b0f4:	e00c      	b.n	800b110 <__ieee754_pow+0x50>
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	dc02      	bgt.n	800b100 <__ieee754_pow+0x40>
 800b0fa:	429d      	cmp	r5, r3
 800b0fc:	d10e      	bne.n	800b11c <__ieee754_pow+0x5c>
 800b0fe:	b16a      	cbz	r2, 800b11c <__ieee754_pow+0x5c>
 800b100:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b104:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b108:	ea54 030a 	orrs.w	r3, r4, sl
 800b10c:	f000 84a6 	beq.w	800ba5c <__ieee754_pow+0x99c>
 800b110:	4872      	ldr	r0, [pc, #456]	; (800b2dc <__ieee754_pow+0x21c>)
 800b112:	b013      	add	sp, #76	; 0x4c
 800b114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	f000 bd9a 	b.w	800bc50 <nan>
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	da39      	bge.n	800b196 <__ieee754_pow+0xd6>
 800b122:	4b6f      	ldr	r3, [pc, #444]	; (800b2e0 <__ieee754_pow+0x220>)
 800b124:	429d      	cmp	r5, r3
 800b126:	dc54      	bgt.n	800b1d2 <__ieee754_pow+0x112>
 800b128:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b12c:	429d      	cmp	r5, r3
 800b12e:	f340 84a6 	ble.w	800ba7e <__ieee754_pow+0x9be>
 800b132:	152b      	asrs	r3, r5, #20
 800b134:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b138:	2b14      	cmp	r3, #20
 800b13a:	dd0f      	ble.n	800b15c <__ieee754_pow+0x9c>
 800b13c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b140:	fa22 f103 	lsr.w	r1, r2, r3
 800b144:	fa01 f303 	lsl.w	r3, r1, r3
 800b148:	4293      	cmp	r3, r2
 800b14a:	f040 8498 	bne.w	800ba7e <__ieee754_pow+0x9be>
 800b14e:	f001 0101 	and.w	r1, r1, #1
 800b152:	f1c1 0302 	rsb	r3, r1, #2
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	b182      	cbz	r2, 800b17c <__ieee754_pow+0xbc>
 800b15a:	e05e      	b.n	800b21a <__ieee754_pow+0x15a>
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	d15a      	bne.n	800b216 <__ieee754_pow+0x156>
 800b160:	f1c3 0314 	rsb	r3, r3, #20
 800b164:	fa45 f103 	asr.w	r1, r5, r3
 800b168:	fa01 f303 	lsl.w	r3, r1, r3
 800b16c:	42ab      	cmp	r3, r5
 800b16e:	f040 8483 	bne.w	800ba78 <__ieee754_pow+0x9b8>
 800b172:	f001 0101 	and.w	r1, r1, #1
 800b176:	f1c1 0302 	rsb	r3, r1, #2
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	4b59      	ldr	r3, [pc, #356]	; (800b2e4 <__ieee754_pow+0x224>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	d130      	bne.n	800b1e4 <__ieee754_pow+0x124>
 800b182:	2e00      	cmp	r6, #0
 800b184:	f280 8474 	bge.w	800ba70 <__ieee754_pow+0x9b0>
 800b188:	463a      	mov	r2, r7
 800b18a:	4643      	mov	r3, r8
 800b18c:	2000      	movs	r0, #0
 800b18e:	4955      	ldr	r1, [pc, #340]	; (800b2e4 <__ieee754_pow+0x224>)
 800b190:	f7f5 fac4 	bl	800071c <__aeabi_ddiv>
 800b194:	e02f      	b.n	800b1f6 <__ieee754_pow+0x136>
 800b196:	2300      	movs	r3, #0
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	d13d      	bne.n	800b21a <__ieee754_pow+0x15a>
 800b19e:	4b4e      	ldr	r3, [pc, #312]	; (800b2d8 <__ieee754_pow+0x218>)
 800b1a0:	429d      	cmp	r5, r3
 800b1a2:	d1eb      	bne.n	800b17c <__ieee754_pow+0xbc>
 800b1a4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b1a8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b1ac:	ea53 030a 	orrs.w	r3, r3, sl
 800b1b0:	f000 8454 	beq.w	800ba5c <__ieee754_pow+0x99c>
 800b1b4:	4b4c      	ldr	r3, [pc, #304]	; (800b2e8 <__ieee754_pow+0x228>)
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	dd0d      	ble.n	800b1d6 <__ieee754_pow+0x116>
 800b1ba:	2e00      	cmp	r6, #0
 800b1bc:	f280 8454 	bge.w	800ba68 <__ieee754_pow+0x9a8>
 800b1c0:	f04f 0b00 	mov.w	fp, #0
 800b1c4:	f04f 0c00 	mov.w	ip, #0
 800b1c8:	4658      	mov	r0, fp
 800b1ca:	4661      	mov	r1, ip
 800b1cc:	b013      	add	sp, #76	; 0x4c
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e7e0      	b.n	800b198 <__ieee754_pow+0xd8>
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	daf2      	bge.n	800b1c0 <__ieee754_pow+0x100>
 800b1da:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b1de:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b1e2:	e7f1      	b.n	800b1c8 <__ieee754_pow+0x108>
 800b1e4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b1e8:	d108      	bne.n	800b1fc <__ieee754_pow+0x13c>
 800b1ea:	463a      	mov	r2, r7
 800b1ec:	4643      	mov	r3, r8
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	f7f5 f969 	bl	80004c8 <__aeabi_dmul>
 800b1f6:	4683      	mov	fp, r0
 800b1f8:	468c      	mov	ip, r1
 800b1fa:	e7e5      	b.n	800b1c8 <__ieee754_pow+0x108>
 800b1fc:	4b3b      	ldr	r3, [pc, #236]	; (800b2ec <__ieee754_pow+0x22c>)
 800b1fe:	429e      	cmp	r6, r3
 800b200:	d10b      	bne.n	800b21a <__ieee754_pow+0x15a>
 800b202:	f1b9 0f00 	cmp.w	r9, #0
 800b206:	db08      	blt.n	800b21a <__ieee754_pow+0x15a>
 800b208:	4638      	mov	r0, r7
 800b20a:	4641      	mov	r1, r8
 800b20c:	b013      	add	sp, #76	; 0x4c
 800b20e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b212:	f000 bc6b 	b.w	800baec <__ieee754_sqrt>
 800b216:	2300      	movs	r3, #0
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4638      	mov	r0, r7
 800b21c:	4641      	mov	r1, r8
 800b21e:	f7ff fe71 	bl	800af04 <fabs>
 800b222:	4683      	mov	fp, r0
 800b224:	468c      	mov	ip, r1
 800b226:	f1ba 0f00 	cmp.w	sl, #0
 800b22a:	d129      	bne.n	800b280 <__ieee754_pow+0x1c0>
 800b22c:	b124      	cbz	r4, 800b238 <__ieee754_pow+0x178>
 800b22e:	4b2d      	ldr	r3, [pc, #180]	; (800b2e4 <__ieee754_pow+0x224>)
 800b230:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b234:	429a      	cmp	r2, r3
 800b236:	d123      	bne.n	800b280 <__ieee754_pow+0x1c0>
 800b238:	2e00      	cmp	r6, #0
 800b23a:	da07      	bge.n	800b24c <__ieee754_pow+0x18c>
 800b23c:	465a      	mov	r2, fp
 800b23e:	4663      	mov	r3, ip
 800b240:	2000      	movs	r0, #0
 800b242:	4928      	ldr	r1, [pc, #160]	; (800b2e4 <__ieee754_pow+0x224>)
 800b244:	f7f5 fa6a 	bl	800071c <__aeabi_ddiv>
 800b248:	4683      	mov	fp, r0
 800b24a:	468c      	mov	ip, r1
 800b24c:	f1b9 0f00 	cmp.w	r9, #0
 800b250:	daba      	bge.n	800b1c8 <__ieee754_pow+0x108>
 800b252:	9b00      	ldr	r3, [sp, #0]
 800b254:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b258:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b25c:	4323      	orrs	r3, r4
 800b25e:	d108      	bne.n	800b272 <__ieee754_pow+0x1b2>
 800b260:	465a      	mov	r2, fp
 800b262:	4663      	mov	r3, ip
 800b264:	4658      	mov	r0, fp
 800b266:	4661      	mov	r1, ip
 800b268:	f7f4 ff76 	bl	8000158 <__aeabi_dsub>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	e78e      	b.n	800b190 <__ieee754_pow+0xd0>
 800b272:	9b00      	ldr	r3, [sp, #0]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d1a7      	bne.n	800b1c8 <__ieee754_pow+0x108>
 800b278:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b27c:	469c      	mov	ip, r3
 800b27e:	e7a3      	b.n	800b1c8 <__ieee754_pow+0x108>
 800b280:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800b284:	3b01      	subs	r3, #1
 800b286:	930c      	str	r3, [sp, #48]	; 0x30
 800b288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	d104      	bne.n	800b29a <__ieee754_pow+0x1da>
 800b290:	463a      	mov	r2, r7
 800b292:	4643      	mov	r3, r8
 800b294:	4638      	mov	r0, r7
 800b296:	4641      	mov	r1, r8
 800b298:	e7e6      	b.n	800b268 <__ieee754_pow+0x1a8>
 800b29a:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <__ieee754_pow+0x230>)
 800b29c:	429d      	cmp	r5, r3
 800b29e:	f340 80f9 	ble.w	800b494 <__ieee754_pow+0x3d4>
 800b2a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <__ieee754_pow+0x228>)
 800b2aa:	dd09      	ble.n	800b2c0 <__ieee754_pow+0x200>
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	dc0c      	bgt.n	800b2ca <__ieee754_pow+0x20a>
 800b2b0:	2e00      	cmp	r6, #0
 800b2b2:	da85      	bge.n	800b1c0 <__ieee754_pow+0x100>
 800b2b4:	a306      	add	r3, pc, #24	; (adr r3, 800b2d0 <__ieee754_pow+0x210>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	4619      	mov	r1, r3
 800b2be:	e798      	b.n	800b1f2 <__ieee754_pow+0x132>
 800b2c0:	429c      	cmp	r4, r3
 800b2c2:	dbf5      	blt.n	800b2b0 <__ieee754_pow+0x1f0>
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <__ieee754_pow+0x224>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	dd14      	ble.n	800b2f4 <__ieee754_pow+0x234>
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	dcf2      	bgt.n	800b2b4 <__ieee754_pow+0x1f4>
 800b2ce:	e777      	b.n	800b1c0 <__ieee754_pow+0x100>
 800b2d0:	8800759c 	.word	0x8800759c
 800b2d4:	7e37e43c 	.word	0x7e37e43c
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	0800bf58 	.word	0x0800bf58
 800b2e0:	433fffff 	.word	0x433fffff
 800b2e4:	3ff00000 	.word	0x3ff00000
 800b2e8:	3fefffff 	.word	0x3fefffff
 800b2ec:	3fe00000 	.word	0x3fe00000
 800b2f0:	41e00000 	.word	0x41e00000
 800b2f4:	4661      	mov	r1, ip
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4658      	mov	r0, fp
 800b2fa:	4b61      	ldr	r3, [pc, #388]	; (800b480 <__ieee754_pow+0x3c0>)
 800b2fc:	f7f4 ff2c 	bl	8000158 <__aeabi_dsub>
 800b300:	a355      	add	r3, pc, #340	; (adr r3, 800b458 <__ieee754_pow+0x398>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	4604      	mov	r4, r0
 800b308:	460d      	mov	r5, r1
 800b30a:	f7f5 f8dd 	bl	80004c8 <__aeabi_dmul>
 800b30e:	a354      	add	r3, pc, #336	; (adr r3, 800b460 <__ieee754_pow+0x3a0>)
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	4606      	mov	r6, r0
 800b316:	460f      	mov	r7, r1
 800b318:	4620      	mov	r0, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	f7f5 f8d4 	bl	80004c8 <__aeabi_dmul>
 800b320:	2200      	movs	r2, #0
 800b322:	4682      	mov	sl, r0
 800b324:	468b      	mov	fp, r1
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	4b56      	ldr	r3, [pc, #344]	; (800b484 <__ieee754_pow+0x3c4>)
 800b32c:	f7f5 f8cc 	bl	80004c8 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	a14c      	add	r1, pc, #304	; (adr r1, 800b468 <__ieee754_pow+0x3a8>)
 800b336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b33a:	f7f4 ff0d 	bl	8000158 <__aeabi_dsub>
 800b33e:	4622      	mov	r2, r4
 800b340:	462b      	mov	r3, r5
 800b342:	f7f5 f8c1 	bl	80004c8 <__aeabi_dmul>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	2000      	movs	r0, #0
 800b34c:	494e      	ldr	r1, [pc, #312]	; (800b488 <__ieee754_pow+0x3c8>)
 800b34e:	f7f4 ff03 	bl	8000158 <__aeabi_dsub>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	4620      	mov	r0, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7f5 f8b3 	bl	80004c8 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	f7f5 f8ad 	bl	80004c8 <__aeabi_dmul>
 800b36e:	a340      	add	r3, pc, #256	; (adr r3, 800b470 <__ieee754_pow+0x3b0>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f5 f8a8 	bl	80004c8 <__aeabi_dmul>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4650      	mov	r0, sl
 800b37e:	4659      	mov	r1, fp
 800b380:	f7f4 feea 	bl	8000158 <__aeabi_dsub>
 800b384:	f04f 0a00 	mov.w	sl, #0
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f4 fee2 	bl	800015c <__adddf3>
 800b398:	4632      	mov	r2, r6
 800b39a:	463b      	mov	r3, r7
 800b39c:	4650      	mov	r0, sl
 800b39e:	468b      	mov	fp, r1
 800b3a0:	f7f4 feda 	bl	8000158 <__aeabi_dsub>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 fed4 	bl	8000158 <__aeabi_dsub>
 800b3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	f04f 0600 	mov.w	r6, #0
 800b3c0:	f04f 0200 	mov.w	r2, #0
 800b3c4:	bf0c      	ite	eq
 800b3c6:	4b31      	ldreq	r3, [pc, #196]	; (800b48c <__ieee754_pow+0x3cc>)
 800b3c8:	4b2d      	ldrne	r3, [pc, #180]	; (800b480 <__ieee754_pow+0x3c0>)
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d2:	e9cd 2300 	strd	r2, r3, [sp]
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	f7f4 febd 	bl	8000158 <__aeabi_dsub>
 800b3de:	4652      	mov	r2, sl
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	f7f5 f871 	bl	80004c8 <__aeabi_dmul>
 800b3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	4689      	mov	r9, r1
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f7f5 f869 	bl	80004c8 <__aeabi_dmul>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	f7f4 fead 	bl	800015c <__adddf3>
 800b402:	4632      	mov	r2, r6
 800b404:	463b      	mov	r3, r7
 800b406:	4680      	mov	r8, r0
 800b408:	4689      	mov	r9, r1
 800b40a:	4650      	mov	r0, sl
 800b40c:	4659      	mov	r1, fp
 800b40e:	f7f5 f85b 	bl	80004c8 <__aeabi_dmul>
 800b412:	4604      	mov	r4, r0
 800b414:	460d      	mov	r5, r1
 800b416:	460b      	mov	r3, r1
 800b418:	4602      	mov	r2, r0
 800b41a:	4649      	mov	r1, r9
 800b41c:	4640      	mov	r0, r8
 800b41e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b422:	f7f4 fe9b 	bl	800015c <__adddf3>
 800b426:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <__ieee754_pow+0x3d0>)
 800b428:	4682      	mov	sl, r0
 800b42a:	4299      	cmp	r1, r3
 800b42c:	460f      	mov	r7, r1
 800b42e:	460e      	mov	r6, r1
 800b430:	f340 82ed 	ble.w	800ba0e <__ieee754_pow+0x94e>
 800b434:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b438:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b43c:	4303      	orrs	r3, r0
 800b43e:	f000 81e7 	beq.w	800b810 <__ieee754_pow+0x750>
 800b442:	a30d      	add	r3, pc, #52	; (adr r3, 800b478 <__ieee754_pow+0x3b8>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b44c:	f7f5 f83c 	bl	80004c8 <__aeabi_dmul>
 800b450:	a309      	add	r3, pc, #36	; (adr r3, 800b478 <__ieee754_pow+0x3b8>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	e6cc      	b.n	800b1f2 <__ieee754_pow+0x132>
 800b458:	60000000 	.word	0x60000000
 800b45c:	3ff71547 	.word	0x3ff71547
 800b460:	f85ddf44 	.word	0xf85ddf44
 800b464:	3e54ae0b 	.word	0x3e54ae0b
 800b468:	55555555 	.word	0x55555555
 800b46c:	3fd55555 	.word	0x3fd55555
 800b470:	652b82fe 	.word	0x652b82fe
 800b474:	3ff71547 	.word	0x3ff71547
 800b478:	8800759c 	.word	0x8800759c
 800b47c:	7e37e43c 	.word	0x7e37e43c
 800b480:	3ff00000 	.word	0x3ff00000
 800b484:	3fd00000 	.word	0x3fd00000
 800b488:	3fe00000 	.word	0x3fe00000
 800b48c:	bff00000 	.word	0xbff00000
 800b490:	408fffff 	.word	0x408fffff
 800b494:	4bd4      	ldr	r3, [pc, #848]	; (800b7e8 <__ieee754_pow+0x728>)
 800b496:	2200      	movs	r2, #0
 800b498:	ea09 0303 	and.w	r3, r9, r3
 800b49c:	b943      	cbnz	r3, 800b4b0 <__ieee754_pow+0x3f0>
 800b49e:	4658      	mov	r0, fp
 800b4a0:	4661      	mov	r1, ip
 800b4a2:	4bd2      	ldr	r3, [pc, #840]	; (800b7ec <__ieee754_pow+0x72c>)
 800b4a4:	f7f5 f810 	bl	80004c8 <__aeabi_dmul>
 800b4a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b4ac:	4683      	mov	fp, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	1523      	asrs	r3, r4, #20
 800b4b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4b6:	4413      	add	r3, r2
 800b4b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ba:	4bcd      	ldr	r3, [pc, #820]	; (800b7f0 <__ieee754_pow+0x730>)
 800b4bc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b4c0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b4c4:	429c      	cmp	r4, r3
 800b4c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4ca:	dd08      	ble.n	800b4de <__ieee754_pow+0x41e>
 800b4cc:	4bc9      	ldr	r3, [pc, #804]	; (800b7f4 <__ieee754_pow+0x734>)
 800b4ce:	429c      	cmp	r4, r3
 800b4d0:	f340 819c 	ble.w	800b80c <__ieee754_pow+0x74c>
 800b4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b4da:	3301      	adds	r3, #1
 800b4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4de:	2600      	movs	r6, #0
 800b4e0:	00f3      	lsls	r3, r6, #3
 800b4e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4e4:	4bc4      	ldr	r3, [pc, #784]	; (800b7f8 <__ieee754_pow+0x738>)
 800b4e6:	4658      	mov	r0, fp
 800b4e8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b4f8:	4623      	mov	r3, r4
 800b4fa:	f7f4 fe2d 	bl	8000158 <__aeabi_dsub>
 800b4fe:	46da      	mov	sl, fp
 800b500:	462b      	mov	r3, r5
 800b502:	4652      	mov	r2, sl
 800b504:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b50c:	f7f4 fe26 	bl	800015c <__adddf3>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	2000      	movs	r0, #0
 800b516:	49b9      	ldr	r1, [pc, #740]	; (800b7fc <__ieee754_pow+0x73c>)
 800b518:	f7f5 f900 	bl	800071c <__aeabi_ddiv>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b528:	f7f4 ffce 	bl	80004c8 <__aeabi_dmul>
 800b52c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b530:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b534:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b538:	2300      	movs	r3, #0
 800b53a:	2200      	movs	r2, #0
 800b53c:	46ab      	mov	fp, r5
 800b53e:	106d      	asrs	r5, r5, #1
 800b540:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b54a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b54e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	4614      	mov	r4, r2
 800b558:	461d      	mov	r5, r3
 800b55a:	f7f4 ffb5 	bl	80004c8 <__aeabi_dmul>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b566:	f7f4 fdf7 	bl	8000158 <__aeabi_dsub>
 800b56a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f4 fdef 	bl	8000158 <__aeabi_dsub>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4650      	mov	r0, sl
 800b580:	4659      	mov	r1, fp
 800b582:	f7f4 fde9 	bl	8000158 <__aeabi_dsub>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	f7f4 ff9d 	bl	80004c8 <__aeabi_dmul>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f4 fddf 	bl	8000158 <__aeabi_dsub>
 800b59a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b59e:	f7f4 ff93 	bl	80004c8 <__aeabi_dmul>
 800b5a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	f7f4 ff8b 	bl	80004c8 <__aeabi_dmul>
 800b5b2:	a37b      	add	r3, pc, #492	; (adr r3, 800b7a0 <__ieee754_pow+0x6e0>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	f7f4 ff84 	bl	80004c8 <__aeabi_dmul>
 800b5c0:	a379      	add	r3, pc, #484	; (adr r3, 800b7a8 <__ieee754_pow+0x6e8>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f7f4 fdc9 	bl	800015c <__adddf3>
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	f7f4 ff7b 	bl	80004c8 <__aeabi_dmul>
 800b5d2:	a377      	add	r3, pc, #476	; (adr r3, 800b7b0 <__ieee754_pow+0x6f0>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7f4 fdc0 	bl	800015c <__adddf3>
 800b5dc:	4622      	mov	r2, r4
 800b5de:	462b      	mov	r3, r5
 800b5e0:	f7f4 ff72 	bl	80004c8 <__aeabi_dmul>
 800b5e4:	a374      	add	r3, pc, #464	; (adr r3, 800b7b8 <__ieee754_pow+0x6f8>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f7f4 fdb7 	bl	800015c <__adddf3>
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	f7f4 ff69 	bl	80004c8 <__aeabi_dmul>
 800b5f6:	a372      	add	r3, pc, #456	; (adr r3, 800b7c0 <__ieee754_pow+0x700>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 fdae 	bl	800015c <__adddf3>
 800b600:	4622      	mov	r2, r4
 800b602:	462b      	mov	r3, r5
 800b604:	f7f4 ff60 	bl	80004c8 <__aeabi_dmul>
 800b608:	a36f      	add	r3, pc, #444	; (adr r3, 800b7c8 <__ieee754_pow+0x708>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f7f4 fda5 	bl	800015c <__adddf3>
 800b612:	4622      	mov	r2, r4
 800b614:	4606      	mov	r6, r0
 800b616:	460f      	mov	r7, r1
 800b618:	462b      	mov	r3, r5
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 ff53 	bl	80004c8 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 ff4d 	bl	80004c8 <__aeabi_dmul>
 800b62e:	4604      	mov	r4, r0
 800b630:	460d      	mov	r5, r1
 800b632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b636:	4642      	mov	r2, r8
 800b638:	464b      	mov	r3, r9
 800b63a:	f7f4 fd8f 	bl	800015c <__adddf3>
 800b63e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b642:	f7f4 ff41 	bl	80004c8 <__aeabi_dmul>
 800b646:	4622      	mov	r2, r4
 800b648:	462b      	mov	r3, r5
 800b64a:	f7f4 fd87 	bl	800015c <__adddf3>
 800b64e:	4642      	mov	r2, r8
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	464b      	mov	r3, r9
 800b656:	4640      	mov	r0, r8
 800b658:	4649      	mov	r1, r9
 800b65a:	f7f4 ff35 	bl	80004c8 <__aeabi_dmul>
 800b65e:	2200      	movs	r2, #0
 800b660:	4b67      	ldr	r3, [pc, #412]	; (800b800 <__ieee754_pow+0x740>)
 800b662:	4682      	mov	sl, r0
 800b664:	468b      	mov	fp, r1
 800b666:	f7f4 fd79 	bl	800015c <__adddf3>
 800b66a:	4632      	mov	r2, r6
 800b66c:	463b      	mov	r3, r7
 800b66e:	f7f4 fd75 	bl	800015c <__adddf3>
 800b672:	9c04      	ldr	r4, [sp, #16]
 800b674:	460d      	mov	r5, r1
 800b676:	4622      	mov	r2, r4
 800b678:	460b      	mov	r3, r1
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f4 ff23 	bl	80004c8 <__aeabi_dmul>
 800b682:	2200      	movs	r2, #0
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	4620      	mov	r0, r4
 800b68a:	4629      	mov	r1, r5
 800b68c:	4b5c      	ldr	r3, [pc, #368]	; (800b800 <__ieee754_pow+0x740>)
 800b68e:	f7f4 fd63 	bl	8000158 <__aeabi_dsub>
 800b692:	4652      	mov	r2, sl
 800b694:	465b      	mov	r3, fp
 800b696:	f7f4 fd5f 	bl	8000158 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f4 fd59 	bl	8000158 <__aeabi_dsub>
 800b6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6aa:	f7f4 ff0d 	bl	80004c8 <__aeabi_dmul>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f4 ff05 	bl	80004c8 <__aeabi_dmul>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	f7f4 fd49 	bl	800015c <__adddf3>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	f7f4 fd41 	bl	800015c <__adddf3>
 800b6da:	a33d      	add	r3, pc, #244	; (adr r3, 800b7d0 <__ieee754_pow+0x710>)
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	9c04      	ldr	r4, [sp, #16]
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7f4 feef 	bl	80004c8 <__aeabi_dmul>
 800b6ea:	4642      	mov	r2, r8
 800b6ec:	464b      	mov	r3, r9
 800b6ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 fd2f 	bl	8000158 <__aeabi_dsub>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f4 fd29 	bl	8000158 <__aeabi_dsub>
 800b706:	a334      	add	r3, pc, #208	; (adr r3, 800b7d8 <__ieee754_pow+0x718>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fedc 	bl	80004c8 <__aeabi_dmul>
 800b710:	a333      	add	r3, pc, #204	; (adr r3, 800b7e0 <__ieee754_pow+0x720>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	4606      	mov	r6, r0
 800b718:	460f      	mov	r7, r1
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	f7f4 fed3 	bl	80004c8 <__aeabi_dmul>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 fd17 	bl	800015c <__adddf3>
 800b72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b730:	4b34      	ldr	r3, [pc, #208]	; (800b804 <__ieee754_pow+0x744>)
 800b732:	4413      	add	r3, r2
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fd10 	bl	800015c <__adddf3>
 800b73c:	4680      	mov	r8, r0
 800b73e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b740:	4689      	mov	r9, r1
 800b742:	f7f4 fe57 	bl	80003f4 <__aeabi_i2d>
 800b746:	4604      	mov	r4, r0
 800b748:	460d      	mov	r5, r1
 800b74a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b74c:	4b2e      	ldr	r3, [pc, #184]	; (800b808 <__ieee754_pow+0x748>)
 800b74e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b752:	4413      	add	r3, r2
 800b754:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	f7f4 fcfe 	bl	800015c <__adddf3>
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	f7f4 fcfa 	bl	800015c <__adddf3>
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	f7f4 fcf6 	bl	800015c <__adddf3>
 800b770:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	4650      	mov	r0, sl
 800b77a:	468b      	mov	fp, r1
 800b77c:	f7f4 fcec 	bl	8000158 <__aeabi_dsub>
 800b780:	4632      	mov	r2, r6
 800b782:	463b      	mov	r3, r7
 800b784:	f7f4 fce8 	bl	8000158 <__aeabi_dsub>
 800b788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b78c:	f7f4 fce4 	bl	8000158 <__aeabi_dsub>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4640      	mov	r0, r8
 800b796:	4649      	mov	r1, r9
 800b798:	e608      	b.n	800b3ac <__ieee754_pow+0x2ec>
 800b79a:	bf00      	nop
 800b79c:	f3af 8000 	nop.w
 800b7a0:	4a454eef 	.word	0x4a454eef
 800b7a4:	3fca7e28 	.word	0x3fca7e28
 800b7a8:	93c9db65 	.word	0x93c9db65
 800b7ac:	3fcd864a 	.word	0x3fcd864a
 800b7b0:	a91d4101 	.word	0xa91d4101
 800b7b4:	3fd17460 	.word	0x3fd17460
 800b7b8:	518f264d 	.word	0x518f264d
 800b7bc:	3fd55555 	.word	0x3fd55555
 800b7c0:	db6fabff 	.word	0xdb6fabff
 800b7c4:	3fdb6db6 	.word	0x3fdb6db6
 800b7c8:	33333303 	.word	0x33333303
 800b7cc:	3fe33333 	.word	0x3fe33333
 800b7d0:	e0000000 	.word	0xe0000000
 800b7d4:	3feec709 	.word	0x3feec709
 800b7d8:	dc3a03fd 	.word	0xdc3a03fd
 800b7dc:	3feec709 	.word	0x3feec709
 800b7e0:	145b01f5 	.word	0x145b01f5
 800b7e4:	be3e2fe0 	.word	0xbe3e2fe0
 800b7e8:	7ff00000 	.word	0x7ff00000
 800b7ec:	43400000 	.word	0x43400000
 800b7f0:	0003988e 	.word	0x0003988e
 800b7f4:	000bb679 	.word	0x000bb679
 800b7f8:	0800bf60 	.word	0x0800bf60
 800b7fc:	3ff00000 	.word	0x3ff00000
 800b800:	40080000 	.word	0x40080000
 800b804:	0800bf80 	.word	0x0800bf80
 800b808:	0800bf70 	.word	0x0800bf70
 800b80c:	2601      	movs	r6, #1
 800b80e:	e667      	b.n	800b4e0 <__ieee754_pow+0x420>
 800b810:	a39d      	add	r3, pc, #628	; (adr r3, 800ba88 <__ieee754_pow+0x9c8>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fc9f 	bl	800015c <__adddf3>
 800b81e:	4622      	mov	r2, r4
 800b820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b824:	462b      	mov	r3, r5
 800b826:	4650      	mov	r0, sl
 800b828:	4639      	mov	r1, r7
 800b82a:	f7f4 fc95 	bl	8000158 <__aeabi_dsub>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b836:	f7f5 f8d7 	bl	80009e8 <__aeabi_dcmpgt>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f47f ae01 	bne.w	800b442 <__ieee754_pow+0x382>
 800b840:	4aa5      	ldr	r2, [pc, #660]	; (800bad8 <__ieee754_pow+0xa18>)
 800b842:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b846:	4293      	cmp	r3, r2
 800b848:	f340 8103 	ble.w	800ba52 <__ieee754_pow+0x992>
 800b84c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b850:	2000      	movs	r0, #0
 800b852:	151b      	asrs	r3, r3, #20
 800b854:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b858:	fa4a f303 	asr.w	r3, sl, r3
 800b85c:	4433      	add	r3, r6
 800b85e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b862:	4f9e      	ldr	r7, [pc, #632]	; (800badc <__ieee754_pow+0xa1c>)
 800b864:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b868:	4117      	asrs	r7, r2
 800b86a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b86e:	ea23 0107 	bic.w	r1, r3, r7
 800b872:	f1c2 0214 	rsb	r2, r2, #20
 800b876:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b87a:	460b      	mov	r3, r1
 800b87c:	fa4a fa02 	asr.w	sl, sl, r2
 800b880:	2e00      	cmp	r6, #0
 800b882:	4602      	mov	r2, r0
 800b884:	4629      	mov	r1, r5
 800b886:	4620      	mov	r0, r4
 800b888:	bfb8      	it	lt
 800b88a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b88e:	f7f4 fc63 	bl	8000158 <__aeabi_dsub>
 800b892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89a:	2400      	movs	r4, #0
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	f7f4 fc5c 	bl	800015c <__adddf3>
 800b8a4:	a37a      	add	r3, pc, #488	; (adr r3, 800ba90 <__ieee754_pow+0x9d0>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	f7f4 fe0b 	bl	80004c8 <__aeabi_dmul>
 800b8b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fc4b 	bl	8000158 <__aeabi_dsub>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	f7f4 fc45 	bl	8000158 <__aeabi_dsub>
 800b8ce:	a372      	add	r3, pc, #456	; (adr r3, 800ba98 <__ieee754_pow+0x9d8>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 fdf8 	bl	80004c8 <__aeabi_dmul>
 800b8d8:	a371      	add	r3, pc, #452	; (adr r3, 800baa0 <__ieee754_pow+0x9e0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	4680      	mov	r8, r0
 800b8e0:	4689      	mov	r9, r1
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f4 fdef 	bl	80004c8 <__aeabi_dmul>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	f7f4 fc33 	bl	800015c <__adddf3>
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	460d      	mov	r5, r1
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4630      	mov	r0, r6
 800b900:	4639      	mov	r1, r7
 800b902:	f7f4 fc2b 	bl	800015c <__adddf3>
 800b906:	4632      	mov	r2, r6
 800b908:	463b      	mov	r3, r7
 800b90a:	4680      	mov	r8, r0
 800b90c:	4689      	mov	r9, r1
 800b90e:	f7f4 fc23 	bl	8000158 <__aeabi_dsub>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4620      	mov	r0, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	f7f4 fc1d 	bl	8000158 <__aeabi_dsub>
 800b91e:	4642      	mov	r2, r8
 800b920:	4606      	mov	r6, r0
 800b922:	460f      	mov	r7, r1
 800b924:	464b      	mov	r3, r9
 800b926:	4640      	mov	r0, r8
 800b928:	4649      	mov	r1, r9
 800b92a:	f7f4 fdcd 	bl	80004c8 <__aeabi_dmul>
 800b92e:	a35e      	add	r3, pc, #376	; (adr r3, 800baa8 <__ieee754_pow+0x9e8>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	4604      	mov	r4, r0
 800b936:	460d      	mov	r5, r1
 800b938:	f7f4 fdc6 	bl	80004c8 <__aeabi_dmul>
 800b93c:	a35c      	add	r3, pc, #368	; (adr r3, 800bab0 <__ieee754_pow+0x9f0>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fc09 	bl	8000158 <__aeabi_dsub>
 800b946:	4622      	mov	r2, r4
 800b948:	462b      	mov	r3, r5
 800b94a:	f7f4 fdbd 	bl	80004c8 <__aeabi_dmul>
 800b94e:	a35a      	add	r3, pc, #360	; (adr r3, 800bab8 <__ieee754_pow+0x9f8>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fc02 	bl	800015c <__adddf3>
 800b958:	4622      	mov	r2, r4
 800b95a:	462b      	mov	r3, r5
 800b95c:	f7f4 fdb4 	bl	80004c8 <__aeabi_dmul>
 800b960:	a357      	add	r3, pc, #348	; (adr r3, 800bac0 <__ieee754_pow+0xa00>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	f7f4 fbf7 	bl	8000158 <__aeabi_dsub>
 800b96a:	4622      	mov	r2, r4
 800b96c:	462b      	mov	r3, r5
 800b96e:	f7f4 fdab 	bl	80004c8 <__aeabi_dmul>
 800b972:	a355      	add	r3, pc, #340	; (adr r3, 800bac8 <__ieee754_pow+0xa08>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fbf0 	bl	800015c <__adddf3>
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f4 fda2 	bl	80004c8 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4640      	mov	r0, r8
 800b98a:	4649      	mov	r1, r9
 800b98c:	f7f4 fbe4 	bl	8000158 <__aeabi_dsub>
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	f7f4 fd94 	bl	80004c8 <__aeabi_dmul>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7f4 fbd3 	bl	8000158 <__aeabi_dsub>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ba:	f7f4 feaf 	bl	800071c <__aeabi_ddiv>
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	460d      	mov	r5, r1
 800b9c4:	463b      	mov	r3, r7
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	f7f4 fd7d 	bl	80004c8 <__aeabi_dmul>
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	463b      	mov	r3, r7
 800b9d2:	f7f4 fbc3 	bl	800015c <__adddf3>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7f4 fbbb 	bl	8000158 <__aeabi_dsub>
 800b9e2:	4642      	mov	r2, r8
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	f7f4 fbb7 	bl	8000158 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	493b      	ldr	r1, [pc, #236]	; (800bae0 <__ieee754_pow+0xa20>)
 800b9f2:	f7f4 fbb1 	bl	8000158 <__aeabi_dsub>
 800b9f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b9fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b9fe:	da2b      	bge.n	800ba58 <__ieee754_pow+0x998>
 800ba00:	4652      	mov	r2, sl
 800ba02:	f000 f9b5 	bl	800bd70 <scalbn>
 800ba06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0a:	f7ff bbf2 	b.w	800b1f2 <__ieee754_pow+0x132>
 800ba0e:	4b35      	ldr	r3, [pc, #212]	; (800bae4 <__ieee754_pow+0xa24>)
 800ba10:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ba14:	429f      	cmp	r7, r3
 800ba16:	f77f af13 	ble.w	800b840 <__ieee754_pow+0x780>
 800ba1a:	4b33      	ldr	r3, [pc, #204]	; (800bae8 <__ieee754_pow+0xa28>)
 800ba1c:	440b      	add	r3, r1
 800ba1e:	4303      	orrs	r3, r0
 800ba20:	d00b      	beq.n	800ba3a <__ieee754_pow+0x97a>
 800ba22:	a32b      	add	r3, pc, #172	; (adr r3, 800bad0 <__ieee754_pow+0xa10>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba2c:	f7f4 fd4c 	bl	80004c8 <__aeabi_dmul>
 800ba30:	a327      	add	r3, pc, #156	; (adr r3, 800bad0 <__ieee754_pow+0xa10>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7ff bbdc 	b.w	800b1f2 <__ieee754_pow+0x132>
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	f7f4 fb8b 	bl	8000158 <__aeabi_dsub>
 800ba42:	4642      	mov	r2, r8
 800ba44:	464b      	mov	r3, r9
 800ba46:	f7f4 ffc5 	bl	80009d4 <__aeabi_dcmpge>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	f43f aef8 	beq.w	800b840 <__ieee754_pow+0x780>
 800ba50:	e7e7      	b.n	800ba22 <__ieee754_pow+0x962>
 800ba52:	f04f 0a00 	mov.w	sl, #0
 800ba56:	e71e      	b.n	800b896 <__ieee754_pow+0x7d6>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	e7d4      	b.n	800ba06 <__ieee754_pow+0x946>
 800ba5c:	f04f 0b00 	mov.w	fp, #0
 800ba60:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bae0 <__ieee754_pow+0xa20>
 800ba64:	f7ff bbb0 	b.w	800b1c8 <__ieee754_pow+0x108>
 800ba68:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ba6c:	f7ff bbac 	b.w	800b1c8 <__ieee754_pow+0x108>
 800ba70:	4638      	mov	r0, r7
 800ba72:	4641      	mov	r1, r8
 800ba74:	f7ff bbbf 	b.w	800b1f6 <__ieee754_pow+0x136>
 800ba78:	9200      	str	r2, [sp, #0]
 800ba7a:	f7ff bb7f 	b.w	800b17c <__ieee754_pow+0xbc>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f7ff bb69 	b.w	800b156 <__ieee754_pow+0x96>
 800ba84:	f3af 8000 	nop.w
 800ba88:	652b82fe 	.word	0x652b82fe
 800ba8c:	3c971547 	.word	0x3c971547
 800ba90:	00000000 	.word	0x00000000
 800ba94:	3fe62e43 	.word	0x3fe62e43
 800ba98:	fefa39ef 	.word	0xfefa39ef
 800ba9c:	3fe62e42 	.word	0x3fe62e42
 800baa0:	0ca86c39 	.word	0x0ca86c39
 800baa4:	be205c61 	.word	0xbe205c61
 800baa8:	72bea4d0 	.word	0x72bea4d0
 800baac:	3e663769 	.word	0x3e663769
 800bab0:	c5d26bf1 	.word	0xc5d26bf1
 800bab4:	3ebbbd41 	.word	0x3ebbbd41
 800bab8:	af25de2c 	.word	0xaf25de2c
 800babc:	3f11566a 	.word	0x3f11566a
 800bac0:	16bebd93 	.word	0x16bebd93
 800bac4:	3f66c16c 	.word	0x3f66c16c
 800bac8:	5555553e 	.word	0x5555553e
 800bacc:	3fc55555 	.word	0x3fc55555
 800bad0:	c2f8f359 	.word	0xc2f8f359
 800bad4:	01a56e1f 	.word	0x01a56e1f
 800bad8:	3fe00000 	.word	0x3fe00000
 800badc:	000fffff 	.word	0x000fffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	4090cbff 	.word	0x4090cbff
 800bae8:	3f6f3400 	.word	0x3f6f3400

0800baec <__ieee754_sqrt>:
 800baec:	f8df c150 	ldr.w	ip, [pc, #336]	; 800bc40 <__ieee754_sqrt+0x154>
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	ea3c 0c01 	bics.w	ip, ip, r1
 800baf8:	460b      	mov	r3, r1
 800bafa:	4606      	mov	r6, r0
 800bafc:	460d      	mov	r5, r1
 800bafe:	460a      	mov	r2, r1
 800bb00:	4607      	mov	r7, r0
 800bb02:	4604      	mov	r4, r0
 800bb04:	d10e      	bne.n	800bb24 <__ieee754_sqrt+0x38>
 800bb06:	4602      	mov	r2, r0
 800bb08:	f7f4 fcde 	bl	80004c8 <__aeabi_dmul>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4630      	mov	r0, r6
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fb22 	bl	800015c <__adddf3>
 800bb18:	4606      	mov	r6, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4629      	mov	r1, r5
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb24:	2900      	cmp	r1, #0
 800bb26:	dc0d      	bgt.n	800bb44 <__ieee754_sqrt+0x58>
 800bb28:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bb2c:	ea5c 0707 	orrs.w	r7, ip, r7
 800bb30:	d0f4      	beq.n	800bb1c <__ieee754_sqrt+0x30>
 800bb32:	b139      	cbz	r1, 800bb44 <__ieee754_sqrt+0x58>
 800bb34:	4602      	mov	r2, r0
 800bb36:	f7f4 fb0f 	bl	8000158 <__aeabi_dsub>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	f7f4 fded 	bl	800071c <__aeabi_ddiv>
 800bb42:	e7e9      	b.n	800bb18 <__ieee754_sqrt+0x2c>
 800bb44:	1512      	asrs	r2, r2, #20
 800bb46:	d074      	beq.n	800bc32 <__ieee754_sqrt+0x146>
 800bb48:	2000      	movs	r0, #0
 800bb4a:	07d5      	lsls	r5, r2, #31
 800bb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb50:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800bb54:	bf5e      	ittt	pl
 800bb56:	0fe3      	lsrpl	r3, r4, #31
 800bb58:	0064      	lslpl	r4, r4, #1
 800bb5a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800bb5e:	0fe3      	lsrs	r3, r4, #31
 800bb60:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bb64:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800bb68:	2516      	movs	r5, #22
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bb70:	1076      	asrs	r6, r6, #1
 800bb72:	0064      	lsls	r4, r4, #1
 800bb74:	188f      	adds	r7, r1, r2
 800bb76:	429f      	cmp	r7, r3
 800bb78:	bfde      	ittt	le
 800bb7a:	1bdb      	suble	r3, r3, r7
 800bb7c:	18b9      	addle	r1, r7, r2
 800bb7e:	1880      	addle	r0, r0, r2
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	3d01      	subs	r5, #1
 800bb84:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bb88:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bb8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bb90:	d1f0      	bne.n	800bb74 <__ieee754_sqrt+0x88>
 800bb92:	462a      	mov	r2, r5
 800bb94:	f04f 0e20 	mov.w	lr, #32
 800bb98:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800bb9c:	428b      	cmp	r3, r1
 800bb9e:	eb07 0c05 	add.w	ip, r7, r5
 800bba2:	dc02      	bgt.n	800bbaa <__ieee754_sqrt+0xbe>
 800bba4:	d113      	bne.n	800bbce <__ieee754_sqrt+0xe2>
 800bba6:	45a4      	cmp	ip, r4
 800bba8:	d811      	bhi.n	800bbce <__ieee754_sqrt+0xe2>
 800bbaa:	f1bc 0f00 	cmp.w	ip, #0
 800bbae:	eb0c 0507 	add.w	r5, ip, r7
 800bbb2:	da43      	bge.n	800bc3c <__ieee754_sqrt+0x150>
 800bbb4:	2d00      	cmp	r5, #0
 800bbb6:	db41      	blt.n	800bc3c <__ieee754_sqrt+0x150>
 800bbb8:	f101 0801 	add.w	r8, r1, #1
 800bbbc:	1a5b      	subs	r3, r3, r1
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	45a4      	cmp	ip, r4
 800bbc2:	bf88      	it	hi
 800bbc4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bbc8:	eba4 040c 	sub.w	r4, r4, ip
 800bbcc:	443a      	add	r2, r7
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	f1be 0e01 	subs.w	lr, lr, #1
 800bbd4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bbd8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800bbdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bbe0:	d1dc      	bne.n	800bb9c <__ieee754_sqrt+0xb0>
 800bbe2:	4323      	orrs	r3, r4
 800bbe4:	d006      	beq.n	800bbf4 <__ieee754_sqrt+0x108>
 800bbe6:	1c54      	adds	r4, r2, #1
 800bbe8:	bf0b      	itete	eq
 800bbea:	4672      	moveq	r2, lr
 800bbec:	3201      	addne	r2, #1
 800bbee:	3001      	addeq	r0, #1
 800bbf0:	f022 0201 	bicne.w	r2, r2, #1
 800bbf4:	1043      	asrs	r3, r0, #1
 800bbf6:	07c1      	lsls	r1, r0, #31
 800bbf8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bbfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc04:	bf48      	it	mi
 800bc06:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800bc10:	e782      	b.n	800bb18 <__ieee754_sqrt+0x2c>
 800bc12:	0ae3      	lsrs	r3, r4, #11
 800bc14:	3915      	subs	r1, #21
 800bc16:	0564      	lsls	r4, r4, #21
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0fa      	beq.n	800bc12 <__ieee754_sqrt+0x126>
 800bc1c:	02de      	lsls	r6, r3, #11
 800bc1e:	d50a      	bpl.n	800bc36 <__ieee754_sqrt+0x14a>
 800bc20:	f1c2 0020 	rsb	r0, r2, #32
 800bc24:	fa24 f000 	lsr.w	r0, r4, r0
 800bc28:	1e55      	subs	r5, r2, #1
 800bc2a:	4094      	lsls	r4, r2
 800bc2c:	4303      	orrs	r3, r0
 800bc2e:	1b4a      	subs	r2, r1, r5
 800bc30:	e78a      	b.n	800bb48 <__ieee754_sqrt+0x5c>
 800bc32:	4611      	mov	r1, r2
 800bc34:	e7f0      	b.n	800bc18 <__ieee754_sqrt+0x12c>
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	3201      	adds	r2, #1
 800bc3a:	e7ef      	b.n	800bc1c <__ieee754_sqrt+0x130>
 800bc3c:	4688      	mov	r8, r1
 800bc3e:	e7bd      	b.n	800bbbc <__ieee754_sqrt+0xd0>
 800bc40:	7ff00000 	.word	0x7ff00000

0800bc44 <finite>:
 800bc44:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bc48:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc4c:	0fc0      	lsrs	r0, r0, #31
 800bc4e:	4770      	bx	lr

0800bc50 <nan>:
 800bc50:	2000      	movs	r0, #0
 800bc52:	4901      	ldr	r1, [pc, #4]	; (800bc58 <nan+0x8>)
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	7ff80000 	.word	0x7ff80000

0800bc5c <rint>:
 800bc5c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800bc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc62:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800bc66:	2f13      	cmp	r7, #19
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	4605      	mov	r5, r0
 800bc70:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800bc74:	dc59      	bgt.n	800bd2a <rint+0xce>
 800bc76:	2f00      	cmp	r7, #0
 800bc78:	da2a      	bge.n	800bcd0 <rint+0x74>
 800bc7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc7e:	4301      	orrs	r1, r0
 800bc80:	d022      	beq.n	800bcc8 <rint+0x6c>
 800bc82:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800bc86:	4301      	orrs	r1, r0
 800bc88:	424d      	negs	r5, r1
 800bc8a:	430d      	orrs	r5, r1
 800bc8c:	4936      	ldr	r1, [pc, #216]	; (800bd68 <rint+0x10c>)
 800bc8e:	0c5c      	lsrs	r4, r3, #17
 800bc90:	0b2d      	lsrs	r5, r5, #12
 800bc92:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800bc96:	0464      	lsls	r4, r4, #17
 800bc98:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc9c:	ea45 0304 	orr.w	r3, r5, r4
 800bca0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 fa58 	bl	800015c <__adddf3>
 800bcac:	e9cd 0100 	strd	r0, r1, [sp]
 800bcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	f7f4 fa4e 	bl	8000158 <__aeabi_dsub>
 800bcbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcc0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4619      	mov	r1, r3
 800bccc:	b003      	add	sp, #12
 800bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd0:	4926      	ldr	r1, [pc, #152]	; (800bd6c <rint+0x110>)
 800bcd2:	4139      	asrs	r1, r7
 800bcd4:	ea03 0001 	and.w	r0, r3, r1
 800bcd8:	4310      	orrs	r0, r2
 800bcda:	d0f5      	beq.n	800bcc8 <rint+0x6c>
 800bcdc:	084b      	lsrs	r3, r1, #1
 800bcde:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800bce2:	ea52 0501 	orrs.w	r5, r2, r1
 800bce6:	d00c      	beq.n	800bd02 <rint+0xa6>
 800bce8:	ea24 0303 	bic.w	r3, r4, r3
 800bcec:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800bcf0:	2f13      	cmp	r7, #19
 800bcf2:	bf0c      	ite	eq
 800bcf4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800bcf8:	2500      	movne	r5, #0
 800bcfa:	fa44 f707 	asr.w	r7, r4, r7
 800bcfe:	ea43 0407 	orr.w	r4, r3, r7
 800bd02:	4919      	ldr	r1, [pc, #100]	; (800bd68 <rint+0x10c>)
 800bd04:	4623      	mov	r3, r4
 800bd06:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800bd10:	4620      	mov	r0, r4
 800bd12:	4629      	mov	r1, r5
 800bd14:	f7f4 fa22 	bl	800015c <__adddf3>
 800bd18:	e9cd 0100 	strd	r0, r1, [sp]
 800bd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd20:	4622      	mov	r2, r4
 800bd22:	462b      	mov	r3, r5
 800bd24:	f7f4 fa18 	bl	8000158 <__aeabi_dsub>
 800bd28:	e7cc      	b.n	800bcc4 <rint+0x68>
 800bd2a:	2f33      	cmp	r7, #51	; 0x33
 800bd2c:	dd05      	ble.n	800bd3a <rint+0xde>
 800bd2e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800bd32:	d1c9      	bne.n	800bcc8 <rint+0x6c>
 800bd34:	f7f4 fa12 	bl	800015c <__adddf3>
 800bd38:	e7c4      	b.n	800bcc4 <rint+0x68>
 800bd3a:	f04f 31ff 	mov.w	r1, #4294967295
 800bd3e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800bd42:	fa21 f10c 	lsr.w	r1, r1, ip
 800bd46:	4208      	tst	r0, r1
 800bd48:	d0be      	beq.n	800bcc8 <rint+0x6c>
 800bd4a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800bd4e:	bf18      	it	ne
 800bd50:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800bd54:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800bd58:	bf1e      	ittt	ne
 800bd5a:	ea20 0303 	bicne.w	r3, r0, r3
 800bd5e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800bd62:	ea43 050c 	orrne.w	r5, r3, ip
 800bd66:	e7cc      	b.n	800bd02 <rint+0xa6>
 800bd68:	0800bf90 	.word	0x0800bf90
 800bd6c:	000fffff 	.word	0x000fffff

0800bd70 <scalbn>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	4617      	mov	r7, r2
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	b996      	cbnz	r6, 800bda6 <scalbn+0x36>
 800bd80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd84:	4303      	orrs	r3, r0
 800bd86:	d039      	beq.n	800bdfc <scalbn+0x8c>
 800bd88:	4b35      	ldr	r3, [pc, #212]	; (800be60 <scalbn+0xf0>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f7f4 fb9c 	bl	80004c8 <__aeabi_dmul>
 800bd90:	4b34      	ldr	r3, [pc, #208]	; (800be64 <scalbn+0xf4>)
 800bd92:	4604      	mov	r4, r0
 800bd94:	429f      	cmp	r7, r3
 800bd96:	460d      	mov	r5, r1
 800bd98:	da0f      	bge.n	800bdba <scalbn+0x4a>
 800bd9a:	a32d      	add	r3, pc, #180	; (adr r3, 800be50 <scalbn+0xe0>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fb92 	bl	80004c8 <__aeabi_dmul>
 800bda4:	e006      	b.n	800bdb4 <scalbn+0x44>
 800bda6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bdaa:	4296      	cmp	r6, r2
 800bdac:	d10a      	bne.n	800bdc4 <scalbn+0x54>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	f7f4 f9d4 	bl	800015c <__adddf3>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	e020      	b.n	800bdfc <scalbn+0x8c>
 800bdba:	460b      	mov	r3, r1
 800bdbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bdc0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800bdc4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800bdc8:	19b9      	adds	r1, r7, r6
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	dd0e      	ble.n	800bdec <scalbn+0x7c>
 800bdce:	a322      	add	r3, pc, #136	; (adr r3, 800be58 <scalbn+0xe8>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bdd8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bddc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bde0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bde4:	4820      	ldr	r0, [pc, #128]	; (800be68 <scalbn+0xf8>)
 800bde6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bdea:	e7d9      	b.n	800bda0 <scalbn+0x30>
 800bdec:	2900      	cmp	r1, #0
 800bdee:	dd08      	ble.n	800be02 <scalbn+0x92>
 800bdf0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdf8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4629      	mov	r1, r5
 800be00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be02:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800be06:	da16      	bge.n	800be36 <scalbn+0xc6>
 800be08:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be0c:	429f      	cmp	r7, r3
 800be0e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800be12:	dd08      	ble.n	800be26 <scalbn+0xb6>
 800be14:	4c15      	ldr	r4, [pc, #84]	; (800be6c <scalbn+0xfc>)
 800be16:	4814      	ldr	r0, [pc, #80]	; (800be68 <scalbn+0xf8>)
 800be18:	f363 74df 	bfi	r4, r3, #31, #1
 800be1c:	a30e      	add	r3, pc, #56	; (adr r3, 800be58 <scalbn+0xe8>)
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	4621      	mov	r1, r4
 800be24:	e7bc      	b.n	800bda0 <scalbn+0x30>
 800be26:	4c12      	ldr	r4, [pc, #72]	; (800be70 <scalbn+0x100>)
 800be28:	4812      	ldr	r0, [pc, #72]	; (800be74 <scalbn+0x104>)
 800be2a:	f363 74df 	bfi	r4, r3, #31, #1
 800be2e:	a308      	add	r3, pc, #32	; (adr r3, 800be50 <scalbn+0xe0>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	e7f5      	b.n	800be22 <scalbn+0xb2>
 800be36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be3a:	3136      	adds	r1, #54	; 0x36
 800be3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	2200      	movs	r2, #0
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <scalbn+0x108>)
 800be4c:	e7a8      	b.n	800bda0 <scalbn+0x30>
 800be4e:	bf00      	nop
 800be50:	c2f8f359 	.word	0xc2f8f359
 800be54:	01a56e1f 	.word	0x01a56e1f
 800be58:	8800759c 	.word	0x8800759c
 800be5c:	7e37e43c 	.word	0x7e37e43c
 800be60:	43500000 	.word	0x43500000
 800be64:	ffff3cb0 	.word	0xffff3cb0
 800be68:	8800759c 	.word	0x8800759c
 800be6c:	7e37e43c 	.word	0x7e37e43c
 800be70:	01a56e1f 	.word	0x01a56e1f
 800be74:	c2f8f359 	.word	0xc2f8f359
 800be78:	3c900000 	.word	0x3c900000

0800be7c <_init>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	bf00      	nop
 800be80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be82:	bc08      	pop	{r3}
 800be84:	469e      	mov	lr, r3
 800be86:	4770      	bx	lr

0800be88 <_fini>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	bf00      	nop
 800be8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8e:	bc08      	pop	{r3}
 800be90:	469e      	mov	lr, r3
 800be92:	4770      	bx	lr
